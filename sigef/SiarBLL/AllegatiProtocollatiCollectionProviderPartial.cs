using SiarLibrary;
using System.Linq;
using System.Collections.Generic;
using System.Collections;
using System;

namespace SiarBLL
{
    public partial class AllegatiProtocollatiCollectionProvider : IAllegatiProtocollatiProvider
    {
        public enum TipoCheck
        {
            Progetto,
            DomandaDiPagamento,
            Variante,
            IntegrazioneDiDomandaPagamento,
            Comunicazione
        }

        #region Vecchi metodi CheckAllegatiProtocollatiProgetto

        private bool CheckAllegatiProtocollatiProgetto(ProgettoStorico p, int numeroAllegati)
        {
            AllegatiProtocollatiCollectionProvider allegatiProtocollatiProvider = new AllegatiProtocollatiCollectionProvider();

            AllegatiProtocollatiCollection allegatiProtocollati = allegatiProtocollatiProvider.Find(p.IdProgetto, null, null, null, null, null, true, p.Segnatura);
            if (allegatiProtocollati.Count == numeroAllegati)
                return true;
            else
                return false;
        }

        private bool CheckAllegatiProtocollatiProgetto(Progetto p, int numeroAllegati)
        {
            AllegatiProtocollatiCollectionProvider allegatiProtocollatiProvider = new AllegatiProtocollatiCollectionProvider();

            AllegatiProtocollatiCollection allegatiProtocollati = allegatiProtocollatiProvider.Find(p.IdProgetto, null, null, null, null, null, true, p.Segnatura);
            if (allegatiProtocollati.Count == numeroAllegati)
                return true;
            else
                return false;
        }

        #endregion Vecchi metodi CheckAllegatiProtocollatiProgetto

        #region Vecchi metodi CheckAllegatiProtocollatiIntegrazioni

        private bool CheckAllegatiProtocollati(IntegrazioniPerDomandaDiPagamento integrazione, int numeroAllegati)
        {
            AllegatiProtocollatiCollectionProvider allegatiProtocollatiProvider = new AllegatiProtocollatiCollectionProvider();

            AllegatiProtocollatiCollection allegatiProtocollati = allegatiProtocollatiProvider.Find(null, null, null, integrazione.IdIntegrazioneDomandaDiPagamento, null, null, null, integrazione.SegnaturaBeneficiario);
            if (allegatiProtocollati.Count == numeroAllegati)
                return true;
            else
                return false;
        }

        #endregion Vecchi metodi CheckAllegatiProtocollatiIntegrazioni

        #region Vecchi metodi CheckAllegatiProtocollatiDomandaPagamento

        private bool CheckAllegatiProtocollatiDomandaPagamento(SiarLibrary.NotAutogeneratedClasses.RiepilogoDomandePagamento domanda, int numeroAllegati)
        {
            var allegatiProtocollatiProvider = new AllegatiProtocollatiCollectionProvider();

            var allegatiProtocollati = allegatiProtocollatiProvider.Find(null, domanda.IdDomandaPagamento, null, null, null, null, true, domanda.Segnatura);

            if (allegatiProtocollati.Count == numeroAllegati || numeroAllegati == 0)
                return true;
            else
                return false;
        }

        private bool CheckAllegatiProtocollatiDomandaPagamento(DomandaDiPagamento domanda, int numeroAllegati)
        {
            var allegatiProtocollatiProvider = new AllegatiProtocollatiCollectionProvider();

            var allegatiProtocollati = allegatiProtocollatiProvider.Find(null, domanda.IdDomandaPagamento, null, null, null, null, true, domanda.Segnatura);

            if (allegatiProtocollati.Count == numeroAllegati)
                return true;
            else
                return false;
        }

        #endregion Vecchi metodi CheckAllegatiProtocollatiDomandaPagamento

        #region Vecchi metodi CheckAllegatiProtocollatiVariante

        private bool CheckAllegatiProtocollatiVariante(Varianti v, int numeroAllegati)
        {
            AllegatiProtocollatiCollectionProvider allegatiProtocollatiProvider = new AllegatiProtocollatiCollectionProvider();

            AllegatiProtocollatiCollection allegatiProtocollati = allegatiProtocollatiProvider.Find(null, null, v.IdVariante, null, null, null, true, v.Segnatura);
            if (allegatiProtocollati.Count == numeroAllegati || numeroAllegati == 0)
                return true;
            else
                return false;
        }

        #endregion CheckAllegatiProtocollatiVariante

        #region Vecchi metodi CheckAllegatiProtocollatiComunicazione

        private bool CheckAllegatiProtocollatiComunicazione(ProgettoComunicazione c)
        {
            AllegatiProtocollatiCollectionProvider allegatiProtocollatiProvider = new AllegatiProtocollatiCollectionProvider();

            AllegatiProtocollatiCollection ff = allegatiProtocollatiProvider.Find(null, null, null, null, c.IdComunicazione, null, null, null);
            int numeroAllegati = ff.Count;

            AllegatiProtocollatiCollection allegatiProtocollati = allegatiProtocollatiProvider.Find(null, null, null, null, c.IdComunicazione, null, true, c.Segnatura);
            if (allegatiProtocollati.Count == numeroAllegati || numeroAllegati == 0)
                return true;
            else
                return false;
        }

        private bool CheckAllegatiProtocollatiComunicazione(int idComunicazione, int numeroAllegati, string segnatura)
        {
            AllegatiProtocollatiCollectionProvider allegatiProtocollatiProvider = new AllegatiProtocollatiCollectionProvider();

            AllegatiProtocollatiCollection allegatiProtocollati = allegatiProtocollatiProvider.Find(null, null, null, null, idComunicazione, null, true, segnatura);
            if (allegatiProtocollati.Count == numeroAllegati)
                return true;
            else
                return false;
        }

        #endregion Vecchi metodi CheckAllegatiProtocollatiComunicazione

        public bool CheckAllegatiProtocollati(TipoCheck tipoCheck, int idRiferimento, string protocollo)
        {
            List<AllegatiProtocollati> allegatiProtocollatiList = new List<AllegatiProtocollati>();

            switch (tipoCheck)
            {
                case TipoCheck.Progetto:
                    allegatiProtocollatiList = 
                        Find(idRiferimento, null, null, null, null, null, null, null)
                        .ToArrayList<AllegatiProtocollati>();
                    break;
                case TipoCheck.DomandaDiPagamento:
                    allegatiProtocollatiList = 
                        Find(null, idRiferimento, null, null, null, null, null, null)
                        .ToArrayList<AllegatiProtocollati>();
                    break;
                case TipoCheck.Variante:
                    allegatiProtocollatiList =
                        Find(null, null, idRiferimento, null, null, null, null, null)
                        .ToArrayList<AllegatiProtocollati>();
                    break;
                case TipoCheck.IntegrazioneDiDomandaPagamento:
                    allegatiProtocollatiList =
                        Find(null, null, null, idRiferimento, null, null, null, null)
                        .ToArrayList<AllegatiProtocollati>();
                    break;
                case TipoCheck.Comunicazione:
                    allegatiProtocollatiList =
                        Find(null, null, null, null, idRiferimento, null, null, null)
                        .ToArrayList<AllegatiProtocollati>();
                    break;
            }

            // se non ci sono allegati protocollati nel db è ok
            if (allegatiProtocollatiList.Count == 0)
                return true;

            // se non ci sono record non protocollati o senza il protocollo sicuramente non va bene
            var numAllegatiSenzaProtocolloONonProtocollati = (from a in allegatiProtocollatiList
                                                              where a.Protocollato == false || a.Protocollo == null
                                                              select a)
                                                              .Count();

            if (numAllegatiSenzaProtocolloONonProtocollati != 0)
                return false;

            // verifico se ci sono più segnature collegate 
            var segnatureMultipleProvider = new SegnatureMultipleCollectionProvider();
            var segnatureMultipleCollection = segnatureMultipleProvider.FindPerSignaturaPrincipale(protocollo);

            if (segnatureMultipleCollection.Count > 0)
            {
                // in caso di segnature multiple verifico che tutte le segnature secondarie abbiano gli allegati protocollati
                var segnatureMultipleList = segnatureMultipleCollection.ToArrayList<SegnatureMultiple>();

                foreach (SegnatureMultiple sm in segnatureMultipleList)
                {
                    var numAllegatiSegnaturaSecondariaNonProtocollati = allegatiProtocollatiList
                        .Where(a => a.Protocollato == null || a.Protocollato == false)
                        .Where(a => a.Protocollo == sm.SegnaturaSecondaria)
                        .Count();

                    if (numAllegatiSegnaturaSecondariaNonProtocollati > 0)
                        return false;
                }
            }

            // alla fine verifico sempre la segnatura principale
            var numAllegatiSegnaturaPrincipaleNonProtocollati = allegatiProtocollatiList
                        .Where(a => a.Protocollato == null || a.Protocollato == false)
                        .Where(a => a.Protocollo == protocollo)
                        .Count();

            if (numAllegatiSegnaturaPrincipaleNonProtocollati > 0)
                return false;

            // se non ho trovato errori in nessun caso allora è ok
            return true;
        }

        public bool ProtocollaAllegatiSegnatura(TipoCheck tipoCheck, int idRiferimento, string protocolloPrincipale, object tokenCohesion)
        {
            ArchivioFileCollectionProvider archivioFileCollectionProvider = new ArchivioFileCollectionProvider();
            AllegatiProtocollatiCollectionProvider allegatiProtocollatiCollectionProvider = new AllegatiProtocollatiCollectionProvider();
            List<AllegatiProtocollati> allegatiProtocollatiList = new List<AllegatiProtocollati>();
            ArrayList allegatiProtocollo = new ArrayList();
            Progetto progetto = null;
            Bando bando = null;
            string tipoOrigine = "";

            //prendo sempre tutti gli allegati protocollati e no perché altrimenti non so quanti sono in totale
            switch (tipoCheck)
            {
                case TipoCheck.Progetto:
                    allegatiProtocollatiList =
                        Find(idRiferimento, null, null, null, null, null, null, null)
                        .ToArrayList<AllegatiProtocollati>();
                    tipoOrigine = "progetto"; 

                    progetto = new ProgettoCollectionProvider().GetById(idRiferimento);
                    bando = new BandoCollectionProvider().GetById(progetto.IdBando);

                    break;
                case TipoCheck.DomandaDiPagamento:
                    allegatiProtocollatiList =
                        Find(null, idRiferimento, null, null, null, null, null, null)
                        .ToArrayList<AllegatiProtocollati>();
                    tipoOrigine = "pagamento";

                    DomandaDiPagamento domandaDiPagamento = new DomandaDiPagamentoCollectionProvider().GetById(idRiferimento);
                    progetto = new ProgettoCollectionProvider().GetById(domandaDiPagamento.IdProgetto);
                    bando = new BandoCollectionProvider().GetById(progetto.IdBando);

                    break;
                case TipoCheck.Variante:
                    allegatiProtocollatiList =
                        Find(null, null, idRiferimento, null, null, null, null, null)
                        .ToArrayList<AllegatiProtocollati>();
                    tipoOrigine = "variante"; 

                    Varianti variante = new VariantiCollectionProvider().GetById(idRiferimento);
                    progetto = new ProgettoCollectionProvider().GetById(variante.IdProgetto);
                    bando = new BandoCollectionProvider().GetById(progetto.IdBando);

                    break;
                case TipoCheck.IntegrazioneDiDomandaPagamento:
                    allegatiProtocollatiList =
                        Find(null, null, null, idRiferimento, null, null, null, null)
                        .ToArrayList<AllegatiProtocollati>();
                    tipoOrigine = "integrazione";

                    IntegrazioniPerDomandaDiPagamento integrazione = new IntegrazioniPerDomandaDiPagamentoCollectionProvider().GetById(idRiferimento);
                    progetto = new ProgettoCollectionProvider().GetById(integrazione.IdProgetto);
                    bando = new BandoCollectionProvider().GetById(progetto.IdBando);

                    break;
                case TipoCheck.Comunicazione:
                    allegatiProtocollatiList =
                        Find(null, null, null, null, idRiferimento, null, null, null)
                        .ToArrayList<AllegatiProtocollati>();
                    tipoOrigine = "comunicazione";

                    ProgettoComunicazione comunicazione = new ProgettoComunicazioneCollectionProvider().GetById(idRiferimento);
                    progetto = new ProgettoCollectionProvider().GetById(comunicazione.IdProgetto);
                    bando = new BandoCollectionProvider().GetById(progetto.IdBando);

                    break;
            }

            // verifico se ci sono più segnature collegate 
            var segnatureMultipleProvider = new SegnatureMultipleCollectionProvider();
            var segnatureMultipleCollection = segnatureMultipleProvider.FindPerSignaturaPrincipale(protocolloPrincipale);

            if (segnatureMultipleCollection.Count == 0) //se non ho più segnature è un vecchio protocollo o non usa le segnature multiple
            {
                Protocollo protocolloAll = new Protocollo(bando.CodEnte);

                foreach (AllegatiProtocollati a in allegatiProtocollatiList)
                {
                    if (a.Protocollato == null || a.Protocollo == null)
                    {
                        if (a.IdFile == -1) //se è un token cohesion "Autenticazione_Operatore.xml"
                        {
                            paleoWebService.Allegato all = new paleoWebService.Allegato();
                            all.Descrizione = "Autenticazione_Operatore.xml";
                            all.Documento = new paleoWebService.File();
                            all.Documento.NomeFile = "Autenticazione_Operatore.xml";
                            all.Documento.Stream = System.Text.Encoding.Unicode.GetBytes(tokenCohesion.ToString());

                            Dictionary<string, object> allegatoProtocollo = new Dictionary<string, object>();
                            allegatoProtocollo.Add("allegato", all);
                            allegatoProtocollo.Add("id_file", -1); 
                            allegatoProtocollo.Add("tipo_origine", tipoOrigine);
                            allegatoProtocollo.Add("id_origine", idRiferimento);
                            allegatiProtocollo.Add(allegatoProtocollo);
                        }
                        else
                        {
                            ArchivioFile f = archivioFileCollectionProvider.GetById(a.IdFile);
                            paleoWebService.Allegato all = new paleoWebService.Allegato();
                            all.Descrizione = f.NomeFile;
                            all.Documento = new paleoWebService.File();
                            all.Documento.NomeFile = f.NomeFile;

                            Dictionary<string, object> allegatoProtocollo = new Dictionary<string, object>();
                            allegatoProtocollo.Add("allegato", all);
                            allegatoProtocollo.Add("id_file", f.Id); 
                            allegatoProtocollo.Add("tipo_origine", tipoOrigine);
                            allegatoProtocollo.Add("id_origine", idRiferimento);
                            allegatiProtocollo.Add(allegatoProtocollo);
                        }
                    }
                }

                protocolloAll.addAllegatiProtocollo(allegatiProtocollo, protocolloPrincipale);

                return CheckAllegatiProtocollati(tipoCheck, idRiferimento, protocolloPrincipale);
            }
            else
            {
                List<string> segnature = new List<string>();
                bool allegatiProtocollatiOk = true;
                segnature.Add(protocolloPrincipale);

                foreach (SegnatureMultiple segnaturaMultipla in segnatureMultipleCollection)
                {
                    segnature.Add(segnaturaMultipla.SegnaturaSecondaria);
                }

                for (int i = 0; i < allegatiProtocollatiList.Count; i++)
                {
                    AllegatiProtocollati allegato = allegatiProtocollatiList[i];

                    if (i != 0 && i % (Protocollo.LimiteAllegatiPaleo + 1) == 0) //se supero il limite massimo degli allegati creo un nuovo allegati protocollo
                    {
                        if (allegatiProtocollo.Count > 0) // se avevo degli allegati da protocollare li protocollo
                        {
                            Protocollo protocolloAll = new Protocollo(bando.CodEnte);

                            var segnatura = segnature[(int)Math.Truncate((decimal)(i / Protocollo.LimiteAllegatiPaleo)) - 1]; //trovo il protocollo in base al numero dell'allegato in cui sto ciclando

                            protocolloAll.addAllegatiProtocollo(allegatiProtocollo, segnatura);

                            var esito = CheckAllegatiProtocollati(tipoCheck, idRiferimento, segnatura);
                            if (!esito)
                                allegatiProtocollatiOk = false;
                        }

                        allegatiProtocollo = new ArrayList();
                    }

                    if (allegato.Protocollato == null || allegato.Protocollo == null)
                    {
                        if (allegato.IdFile == -1) //se è un token cohesion "Autenticazione_Operatore.xml"
                        {
                            paleoWebService.Allegato all = new paleoWebService.Allegato();
                            all.Descrizione = "Autenticazione_Operatore.xml";
                            all.Documento = new paleoWebService.File();
                            all.Documento.NomeFile = "Autenticazione_Operatore.xml";
                            all.Documento.Stream = System.Text.Encoding.Unicode.GetBytes(tokenCohesion.ToString());

                            Dictionary<string, object> allegatoProtocollo = new Dictionary<string, object>();
                            allegatoProtocollo.Add("allegato", all);
                            allegatoProtocollo.Add("id_file", -1);
                            allegatoProtocollo.Add("tipo_origine", tipoOrigine);
                            allegatoProtocollo.Add("id_origine", idRiferimento);
                            allegatiProtocollo.Add(allegatoProtocollo);
                        }
                        else
                        {
                            ArchivioFile f = archivioFileCollectionProvider.GetById(allegato.IdFile);
                            paleoWebService.Allegato all = new paleoWebService.Allegato();
                            all.Descrizione = f.NomeFile;
                            all.Documento = new paleoWebService.File();
                            all.Documento.NomeFile = f.NomeFile;

                            Dictionary<string, object> allegatoProtocollo = new Dictionary<string, object>();
                            allegatoProtocollo.Add("allegato", all);
                            allegatoProtocollo.Add("id_file", f.Id);
                            allegatoProtocollo.Add("tipo_origine", tipoOrigine);
                            allegatoProtocollo.Add("id_origine", idRiferimento);
                            allegatiProtocollo.Add(allegatoProtocollo);
                        }
                    }

                    //se sono all'ultimo allegato allego il blocco degli allegati all'ultima segnatura
                    if (i == (allegatiProtocollatiList.Count - 1)
                        && allegatiProtocollo.Count > 0) //e ho degli allegati da protocollare nel range
                    {
                        Protocollo protocolloAll = new Protocollo(bando.CodEnte);

                        var segnatura = segnature.Last();

                        protocolloAll.addAllegatiProtocollo(allegatiProtocollo, segnatura);

                        var esito = CheckAllegatiProtocollati(tipoCheck, idRiferimento, segnatura);
                        if (!esito)
                            allegatiProtocollatiOk = false;
                    }
                }

                return allegatiProtocollatiOk;
            }
        }
    }
}
