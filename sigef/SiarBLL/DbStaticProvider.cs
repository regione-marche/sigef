using System;
using System.Text.RegularExpressions;
using System.Data;
using System.Data.SqlClient;
using SiarLibrary.NotAutogeneratedClasses;
using SiarLibrary.NullTypes;
using System.Security.Cryptography;
using System.IO;
using System.Text;

namespace SiarLibrary
{
    public static class DbStaticProvider
    {
        #region log accessi
        public static void WriteLogAccessi(int id_utente, string browser_name, string browser_version, string platform, string ip, string host)
        {
            DbProvider db = new DbProvider(DbProvider.DbNames.SIGEF);
            IDbCommand cmd = db.GetCommand();
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandText = "SpWriteLogSigefAccessi";
            cmd.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_UTENTE", id_utente));
            cmd.Parameters.Add(new System.Data.SqlClient.SqlParameter("@BROWSER_NAME", browser_name));
            cmd.Parameters.Add(new System.Data.SqlClient.SqlParameter("@BROWSER_VERSION", browser_version));
            cmd.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PLATFORM", platform));
            cmd.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IP", ip));
            cmd.Parameters.Add(new System.Data.SqlClient.SqlParameter("@HOST", host));
            int retval = db.Execute(cmd);
            db.Close();
        }

        #endregion

        #region utilities

        public static string isCuaa(string cuaa)
        {
            if (isCodiceFiscale(cuaa)) return "CF";
            if (isPartitaIva(cuaa)) return "PI";
            throw new Exception("Codice Fiscale/Partita Iva non verificato.");
        }

        public static bool isCodiceFiscale(string cf)
        {
            if (cf == null || cf.Length != 16) return false;
            cf = cf.ToUpper();

            // stringa per controllo e calcolo omocodia
            const string omocodici = "LMNPQRSTUV";
            // stringa per il calcolo del check digit e la conversione in numero
            const string listaControllo = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";

            int[] listaPari = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 };
            int[] listaDispari = { 1, 0, 5, 7, 9, 13, 15, 17, 19, 21, 2, 4, 18, 20, 11, 3, 6, 8, 12, 14, 16, 10, 22, 25, 24, 23 };

            char[] cfarr = cf.ToCharArray();
            // check della correttezza formale del codice fiscale
            // normalizzo il cf eliminando dalla stringa gli eventuali caratteri utilizzati negli
            // spazi riservati ai 7 che sono diventati carattere in caso di omocodia
            for (int k = 6; k < 15; k++)
            {
                if ((k == 8) || (k == 11)) continue;
                int x = (omocodici.IndexOf(cfarr[k]));
                if (x != -1) cfarr[k] = x.ToString().ToCharArray()[0];
            }

            Regex rgx = new Regex(@"^[A-Z]{6}[]{2}[A-Z][]{2}[A-Z][]{3}[A-Z]$");
            Match m = rgx.Match(new string(cfarr));
            if (!m.Success) return false;

            // da una verifica ho trovato 3 risultati errati su più di 4000  codici fiscali 
            // ho temporaneamente rimosso il test con le Regular fino a quando non riuscirò a capire perchè in alcuni casi sbaglia

            int somma = 0;
            // ripristino il codice fiscale originario 
            cfarr = cf.ToCharArray();
            for (int i = 0; i < 15; i++)
            {
                char c = cfarr[i];
                int x = "0123456789".IndexOf(c);
                if (x != -1) c = listaControllo.Substring(x, 1).ToCharArray()[0];
                x = listaControllo.IndexOf(c);
                // i modulo 2 = 0 è dispari perchè iniziamo da 0
                if ((i % 2) == 0) x = listaDispari[x];
                else x = listaPari[x];
                somma += x;
            }
            return (listaControllo.Substring(somma % 26, 1) == cf.Substring(15, 1));
        }

        public static bool isPartitaIva(string piva)
        {
            if (piva == null || piva.Length != 11) return false;

            const int caratteri = 11;
            string partitaiva = piva;
            Regex pregex = new Regex("^\\d{" + caratteri.ToString() + "}$");
            Match m = pregex.Match(partitaiva);
            if (!m.Success) return false;

            if (!(int.Parse(partitaiva.Substring(0, 7)) != 0 && int.Parse(partitaiva.Substring(7, 3)) >= 0 && int.Parse(partitaiva.Substring(7, 3)) < 201))
                return false;

            int somma = 0;
            for (int i = 0; i < caratteri - 1; i++)
            {
                int j = int.Parse(partitaiva.Substring(i, 1));
                if ((i + 1) % 2 == 0)
                {
                    j *= 2;
                    char[] c = j.ToString("00").ToCharArray();
                    somma += int.Parse(c[0].ToString());
                    somma += int.Parse(c[1].ToString());
                }
                else somma += j;
            }
            if (somma.ToString("00").Substring(1, 1) == "0" && partitaiva.Substring(10, 1) != "0") return false;
            somma = int.Parse(partitaiva.Substring(10, 1)) + int.Parse(somma.ToString("00").Substring(1, 1));
            return somma.ToString("00").Substring(1, 1) == "0";
        }

        public static string ConvertToHa(IntNT mq) { if (mq == null) return "00.00.00"; return ConvertToHa(mq.Value); }
        public static string ConvertToHa(string mq)
        {
            mq = mq.Replace(System.Globalization.CultureInfo.CurrentCulture.NumberFormat.CurrencyGroupSeparator, "");
            decimal d; decimal.TryParse(mq, out d); return ConvertToHa((int)Math.Floor(d));
        }
        public static string ConvertToHa(int mq)
        {
            if (mq <= 0) return "00.00.00";
            int ettari = mq / 10000;
            int are = (mq - ettari * 10000) / 100;
            int centiare = mq - ettari * 10000 - are * 100;
            return (ettari < 10 ? "0" + (ettari < 1 ? "0" : ettari.ToString()) : ettari.ToString()) + "." + (are < 10 ? "0" + (are < 1 ? "0" : are.ToString())
                : are.ToString()) + "." + (centiare < 10 ? "0" + (centiare < 1 ? "0" : centiare.ToString()) : centiare.ToString());
        }

        public static string getCurrencyFormat(object str)
        {
            string s, r = "", virgola = "";
            s = str.ToString();
            bool negativo = s.StartsWith("-");
            if (s.LastIndexOf(',') >= 0)
            {
                virgola = s.Substring(s.LastIndexOf(','));
                s = s.Replace(virgola, "").Replace("-", "");
            }
            while (((decimal)s.Length / 3) > 1)
            {
                r = "." + s.Substring(s.Length - 3) + r;
                s = s.Substring(0, s.Length - 3);
            }
            return Convert.ToString((negativo ? "-" : "") + s + r + virgola);
        }

        public static byte[] EncryptString(string PASSWORD, string plainMessage)
        {
            try
            {
                TripleDESCryptoServiceProvider des = new TripleDESCryptoServiceProvider();
                des.IV = new byte[8];
                PasswordDeriveBytes pdb = new PasswordDeriveBytes(PASSWORD, new byte[0]);
                des.Key = pdb.CryptDeriveKey("RC2", "MD5", 128, new byte[8]);
                //string prova=Encoding.ASCII.GetString(des.Key);
                MemoryStream ms = new MemoryStream(plainMessage.Length * 2);
                CryptoStream encStream = new CryptoStream(ms, des.CreateEncryptor(), CryptoStreamMode.Write);
                byte[] plainBytes = Encoding.UTF8.GetBytes(plainMessage);
                encStream.Write(plainBytes, 0, plainBytes.Length);
                encStream.FlushFinalBlock();
                byte[] encryptedBytes = new byte[ms.Length];
                ms.Position = 0;
                ms.Read(encryptedBytes, 0, (int)ms.Length);
                encStream.Close();
                return encryptedBytes;
            }
            catch
            {
                throw new Exception("Password errata.");
            }
        }

        public static byte[] DecryptString(string PASSWORD, byte[] encryptedBytes)
        {
            try
            {
                TripleDESCryptoServiceProvider des = new TripleDESCryptoServiceProvider();
                des.IV = new byte[8];
                PasswordDeriveBytes pdb = new PasswordDeriveBytes(PASSWORD, new byte[0]);
                des.Key = pdb.CryptDeriveKey("RC2", "MD5", 128, new byte[8]);
                //string prova=Encoding.ASCII.GetString(des.Key);
                MemoryStream ms = new MemoryStream(encryptedBytes.Length);
                CryptoStream decStream = new CryptoStream(ms, des.CreateDecryptor(), CryptoStreamMode.Write);
                decStream.Write(encryptedBytes, 0, encryptedBytes.Length);
                decStream.FlushFinalBlock();
                byte[] plainBytes = new byte[ms.Length];
                ms.Position = 0;
                ms.Read(plainBytes, 0, (int)ms.Length);
                decStream.Close();
                return plainBytes;
            }
            catch { throw new Exception("Password errata."); }
        }

        public static string GetExtensionMimeType(string ext, DbProvider db)
        {
            if (db == null) db = new DbProvider();
            IDbCommand cmd = db.GetCommand();
            cmd.CommandType = CommandType.Text;
            cmd.CommandText = "SELECT TOP 1 MIME_TYPE FROM MIME_TYPES WHERE ESTENSIONE=@EXT";
            cmd.Parameters.Add(new SqlParameter("@EXT", ext));
            object retval = db.ExecuteScalar(cmd);
            db.Close();
            return new SiarLibrary.NullTypes.StringNT(retval);
        }


        #region conversione numero in lettere

        public static string ConvertNumberToDigital(string numero)
        {
            numero = numero.Replace(System.Globalization.CultureInfo.CurrentCulture.NumberFormat.CurrencyGroupSeparator, "");
            if (System.Globalization.CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator == ".") numero = numero.Replace(",", ".");
            else numero = numero.Replace(".", ",");
            decimal valore_convertito;
            decimal.TryParse(numero, out valore_convertito);
            return ConvertNumberToDigital(valore_convertito);
        }

        public static string ConvertNumberToDigital(decimal numero)
        {
            long parte_intera = (long)Math.Truncate(numero);                                                    //parte intera
            string parte_decimale = string.Format("{0:N}", Math.Round(numero - parte_intera, 2, MidpointRounding.AwayFromZero));               //parte decimale
            string suffisso_decimale = "/" + parte_decimale.Substring(2, 2);

            string stringa_parte_intera = parte_intera.ToString();                                              //suddivido la parte intera in terzine di numeri
            System.Collections.ArrayList terzine_parte_intera = new System.Collections.ArrayList();             //memorizzo l'array di terzine
            while (stringa_parte_intera.Length > 3)
            {
                terzine_parte_intera.Add(stringa_parte_intera.Substring(stringa_parte_intera.Length - 3, 3));
                stringa_parte_intera = stringa_parte_intera.Substring(0, stringa_parte_intera.Length - 3);
            }
            terzine_parte_intera.Add(stringa_parte_intera);

            string output = "";
            int ordine_terzina = 1;
            foreach (string s in terzine_parte_intera)                                                          //converto ogni terzina in lettere
            {
                int terzina = int.Parse(s);
                output = trasforma_terzina(terzina, ordine_terzina++) + output;
            }
            return output + suffisso_decimale;
        }

        private static string trasforma_terzina(int terzina, int ordine)
        {
            string result = "";
            if (terzina > 0)
            {
                if (terzina < 20) result = Unita[terzina];                                  // da 1 a 19
                else
                {
                    string cifre = terzina.ToString();
                    if (terzina > 99)                                                       //prima cifra, le centinaia
                    {
                        int centinaia = int.Parse(cifre.Substring(0, 1));
                        if (centinaia == 1) result = "cento";
                        else result = Unita[centinaia] + "cento";

                        cifre = cifre.Substring(1, 2);                                      // aggiorno la terzina per ricondurla al caso a 2 cifre
                    }

                    int decine = int.Parse(cifre.Substring(0, 1)),                          // da 20 a 99
                        unita = int.Parse(cifre.Substring(1, 1));
                    result += Decine[decine];
                    if (unita == 1 || unita == 8) result = result.Substring(0, result.Length - 1);
                    result += Unita[unita];
                }

                switch (ordine)                                                             //suffisso 
                {
                    case 2:
                        result += "mila";
                        if (terzina == 1) result = "mille";
                        break;
                    case 3:
                        result += "milioni";
                        if (terzina == 1) result = "unmilione";
                        break;
                    case 4:
                        result += "miliardi";
                        if (terzina == 1) result = "unmiliardo";
                        break;
                    case 5:
                        result += "milamiliardi";
                        if (terzina == 1) result = "millemiliardi";
                        break;
                    default:
                        result += "";
                        break;
                }
            }
            return result;
        }

        private static string[] Unita = { "", "uno", "due", "tre", "quattro", "cinque", "sei", "sette", "otto", "nove", "dieci", "undici", "dodici", "tredici",
                                     "quattordici", "quindici", "sedici", "diciassette", "diciotto", "diciannove" };
        private static string[] Decine = { "", "", "venti", "trenta", "quaranta", "cinquanta", "sessanta", "settanta", "ottanta", "novanta" };

        #endregion

        #endregion

        #region permessi

        public static int GetPermessiOperatoreSuVisitaAziendale(IntNT idVisita, IntNT idUtente, DbProvider dbProvider)
        {
            if (dbProvider == null) dbProvider = new DbProvider();
            IDbCommand cmd = dbProvider.GetCommand();
            cmd.CommandText = "SpGetPermessiOperatoreSuVisitaAziendale";
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.Parameters.Add(new SqlParameter("ID_VISITA", idVisita.Value));
            cmd.Parameters.Add(new SqlParameter("ID_UTENTE", idUtente.Value));
            object result = dbProvider.ExecuteScalar(cmd);
            dbProvider.Close();
            int retval = 0;
            int.TryParse(result.ToString(), out retval);
            return retval;
        }

        public static int GetPermessiOperatoreSuVariante(IntNT idVariante, IntNT idUtente, DbProvider dbProvider)
        {
            if (dbProvider == null) dbProvider = new DbProvider();
            IDbCommand cmd = dbProvider.GetCommand();
            cmd.CommandText = "SpGetPermessiOperatoreSuVariante";
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.Parameters.Add(new SqlParameter("ID_VARIANTE", idVariante.Value));
            cmd.Parameters.Add(new SqlParameter("ID_UTENTE", idUtente.Value));
            object result = dbProvider.ExecuteScalar(cmd);
            dbProvider.Close();
            int retval = 0;
            int.TryParse(result.ToString(), out retval);
            return retval;
        }

        public static int GetPermessiOperatoreSuDomandaPagamento(IntNT idDomandaPagamento, IntNT idUtente, DbProvider dbProvider)
        {
            if (dbProvider == null) dbProvider = new DbProvider();
            IDbCommand cmd = dbProvider.GetCommand();
            cmd.CommandText = "SpGetPermessiOperatoreSuDomandaPagamento";
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.Parameters.Add(new SqlParameter("ID_DOMANDA_PAGAMENTO", idDomandaPagamento.Value));
            cmd.Parameters.Add(new SqlParameter("ID_UTENTE", idUtente.Value));
            object result = dbProvider.ExecuteScalar(cmd);
            dbProvider.Close();
            int retval = 0;
            int.TryParse(result.ToString(), out retval);
            return retval;
        }

        public static int GetPermessiOperatoreSuProgetto(IntNT idProgetto, IntNT idUtente, DbProvider dbProvider)
        {
            if (dbProvider == null) dbProvider = new DbProvider();
            IDbCommand cmd = dbProvider.GetCommand();
            cmd.CommandText = "SpGetPermessiOperatoreSuProgetto";
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.Parameters.Add(new SqlParameter("ID_PROGETTO", idProgetto.Value));
            cmd.Parameters.Add(new SqlParameter("ID_UTENTE", idUtente.Value));
            object result = dbProvider.ExecuteScalar(cmd);
            dbProvider.Close();
            int retval = 0;
            int.TryParse(result.ToString(), out retval);
            return retval;
        }

        public static int GetPermessiOperatoreSuGestioneLavori(IntNT idProgetto, IntNT idUtente, DbProvider dbProvider)
        {
            if (dbProvider == null) dbProvider = new DbProvider();
            IDbCommand cmd = dbProvider.GetCommand();
            cmd.CommandText = "SpGetPermessiOperatoreSuGestioneLavori";
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.Parameters.Add(new SqlParameter("@ID_PROGETTO", idProgetto.Value));
            cmd.Parameters.Add(new SqlParameter("@ID_UTENTE", idUtente.Value));
            object result = dbProvider.ExecuteScalar(cmd);
            dbProvider.Close();
            int retval;
            int.TryParse(result.ToString(), out retval);
            return retval;
        }

        #endregion

        public static System.Collections.ArrayList ZoomComuniFind(StringNT descrizione, int idRegione, DbProvider db)
        {
            System.Collections.ArrayList retval = new System.Collections.ArrayList();
            if (db == null) db = new DbProvider();
            IDbCommand cmd = db.GetCommand();
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandText = "SpZoomComuniFind";
            cmd.Parameters.Add(new SqlParameter("@DESCRIZIONE", descrizione.Value));
            if (idRegione > 0) cmd.Parameters.Add(new SqlParameter("@ID_REGIONE", idRegione));
            db.InitDatareader(cmd);
            while (db.DataReader.Read()) retval.Add(new System.Collections.DictionaryEntry(db.DataReader["ID_COMUNE"], db.DataReader["DENOMINAZIONE"]
                + "(" + db.DataReader["SIGLA"] + ") - " + db.DataReader["CAP"]));
            db.Close();
            while (retval.Count < 8) retval.Add(null);
            return retval;
        }

        public static string GetSiglaProvinciaByCodice(string codice_provincia, DbProvider db)
        {
            if (db == null) db = new DbProvider();
            IDbCommand cmd = db.GetCommand();
            cmd.CommandType = CommandType.Text;
            cmd.CommandText = "SELECT TOP 1 SIGLA FROM PROVINCE WHERE CODICE=@CODICE";
            cmd.Parameters.Add(new SqlParameter("@CODICE", codice_provincia));
            string retval = new StringNT(db.ExecuteScalar(cmd));
            db.Close();
            return retval;
        }

        public static void ControlloStatoProgettoXDecadenza(int id_progetto, DbProvider dbProvider)
        {
            if (dbProvider == null) dbProvider = new DbProvider();
            IDbCommand cmd = dbProvider.GetCommand();
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandText = "SpControlloStatoProgettoXDecadenza";
            cmd.Parameters.Add(new SqlParameter("ID_PROGETTO", id_progetto));
            dbProvider.ExecuteScalar(cmd);
            dbProvider.Close();
        }

        public static void ControlloCambioBeneficiarioVariante(IntNT idVariante, bool faseIstruttoria, DbProvider dbProvider)
        {
            if (dbProvider == null) dbProvider = new DbProvider();
            IDbCommand cmd = dbProvider.GetCommand();
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandText = "SpControlloCambioBeneficiarioVariante";
            cmd.Parameters.Add(new SqlParameter("ID_VARIANTE", idVariante.Value));
            cmd.Parameters.Add(new SqlParameter("FASE_ISTRUTTORIA", faseIstruttoria));
            object result = dbProvider.ExecuteScalar(cmd);
            dbProvider.Close();
            int esito = 0;
            int.TryParse(result.ToString(), out esito);
            switch (esito)
            {
                case 1: throw new Exception("Il cuaa ed il fascicolo registrati in questa variante non appartengono alla stessa azienda. Impossibile continuare.");
                case 2: throw new Exception("Esiste attualmente una versione più aggiornata del fascicolo. E` necessario effettuare il download di nuovo.");
                case 3: throw new Exception("Le localizzazioni di uno o più investimenti non sono valide o sono riferite al fascicolo del vecchio beneficiario.");
                case 4: throw new Exception("Occorre effettuare il salvataggio dei dati per ogni investimento del piano. Impossibile continuare.");
            }
        }

        public static object LockObjectBarcodeFidejussione;
        public static string GetCodiceABarreFidejussione(bool Conferma, DbProvider dbProvider)
        {
            if (LockObjectBarcodeFidejussione == null) LockObjectBarcodeFidejussione = new object();
            lock (LockObjectBarcodeFidejussione)
            {
                if (dbProvider == null) dbProvider = new DbProvider();
                IDbCommand cmd = dbProvider.GetCommand();
                cmd.CommandText = "SELECT DBO.calcoloCodiceABarreFidejussione(" + (Conferma ? "1" : "DEFAULT") + ")";
                cmd.CommandType = CommandType.Text;
                object result = dbProvider.ExecuteScalar(cmd);
                dbProvider.Close();
                return result.ToString();
            }
        }

        public static void CalcolaImportoGarantitoFidejussione(IntNT idDomandaPagamento, out decimal ammontare_garantito, out decimal ammontare_richiesto, DbProvider dbProvider)
        {
            ammontare_garantito = 0; ammontare_richiesto = 0;
            if (dbProvider == null) dbProvider = new DbProvider();
            IDbCommand cmd = dbProvider.GetCommand();
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandText = "SpcalcoloImportoGarantitoFidejussione";
            cmd.Parameters.Add(new SqlParameter("ID_DOMANDA_PAGAMENTO", idDomandaPagamento.Value));
            dbProvider.InitDatareader(cmd);
            if (dbProvider.DataReader.Read())
            {
                ammontare_garantito = new DecimalNT(dbProvider.DataReader["AMMONTARE_POLIZZA"]);
                ammontare_richiesto = new DecimalNT(dbProvider.DataReader["AMMONTARE_RICHIESTO"]);
            }
            dbProvider.Close();
        }

        public static decimal GetStoricoImportoRichiestoInvestimento(IntNT idInvestimento, IntNT idDomandaPagamento,
            DbProvider dbProvider)
        {
            if (dbProvider == null) dbProvider = new DbProvider();
            IDbCommand cmd = dbProvider.GetCommand();
            cmd.CommandText = "SELECT DBO.calcoloStoricoImportoRichiestoInvestimento(" + idInvestimento + "," + idDomandaPagamento + ")";
            cmd.CommandType = CommandType.Text;
            object result = dbProvider.ExecuteScalar(cmd);
            dbProvider.Close();
            decimal retval = 0;
            decimal.TryParse(result.ToString(), out retval);
            return retval;
        }

        public static decimal GetStoricoContributoRichiestoInvestimento(IntNT idInvestimento, IntNT idDomandaPagamento,
            DbProvider dbProvider)
        {
            if (dbProvider == null) dbProvider = new DbProvider();
            IDbCommand cmd = dbProvider.GetCommand();
            cmd.CommandText = "SELECT DBO.calcoloStoricoContributoRichiestoInvestimento(" + idInvestimento + "," + idDomandaPagamento + ")";
            cmd.CommandType = CommandType.Text;
            object result = dbProvider.ExecuteScalar(cmd);
            dbProvider.Close();
            decimal retval = 0;
            decimal.TryParse(result.ToString(), out retval);
            return retval;
        }

        public static decimal GetAmmontareErogatoInvestimento(IntNT idInvestimento, IntNT idDomandaPagamento,
            DbProvider dbProvider)
        {
            if (dbProvider == null) dbProvider = new DbProvider();
            IDbCommand cmd = dbProvider.GetCommand();
            cmd.CommandText = "SELECT DBO.calcoloAmmontareErogatoInvestimento(" + idInvestimento + "," + idDomandaPagamento + ")";
            cmd.CommandType = CommandType.Text;
            object result = dbProvider.ExecuteScalar(cmd);
            dbProvider.Close();
            decimal retval = 0;
            decimal.TryParse(result.ToString(), out retval);
            return retval;
        }

        public static decimal GetAmmontareDisponibileGiustificativo(IntNT idGiustificativo, DecimalNT importo_giustificativo,
            BoolNT faseIstruttoria, DbProvider dbProvider)
        {
            if (dbProvider == null) dbProvider = new DbProvider();
            IDbCommand cmd = dbProvider.GetCommand();
            cmd.CommandText = "SELECT DBO.calcoloAmmontareDisponibileGiustificativo(" + idGiustificativo + "," + importo_giustificativo.ToString()
                .Replace(",", ".") + "," + (faseIstruttoria ? "1" : "0") + ")";
            cmd.CommandType = CommandType.Text;
            object result = dbProvider.ExecuteScalar(cmd);
            dbProvider.Close();
            decimal retval;
            decimal.TryParse(result.ToString(), out retval);
            return retval;
        }

        public static decimal GetAmmontarePagamentiGiustificativo(IntNT idGiustificativo, DbProvider dbProvider)
        {
            if (dbProvider == null) dbProvider = new DbProvider();
            IDbCommand cmd = dbProvider.GetCommand();
            cmd.CommandText =
                @"SELECT 
	                CASE
		                WHEN (GIU.IVA_NON_RECUPERABILE IS NULL OR GIU.IVA_NON_RECUPERABILE = 0)
			                THEN SUM(SP.NETTO) OVER (PARTITION BY GIU.ID_GIUSTIFICATIVO)
		                ELSE
			                SUM(SP.IMPORTO) OVER (PARTITION BY GIU.ID_GIUSTIFICATIVO)
	                END AS DISPONIBILE 
                FROM GIUSTIFICATIVI GIU
	                JOIN SPESE_SOSTENUTE SP ON SP.ID_GIUSTIFICATIVO = GIU.ID_GIUSTIFICATIVO
	                JOIN DOMANDA_DI_PAGAMENTO D ON D.ID_DOMANDA_PAGAMENTO = SP.ID_DOMANDA_PAGAMENTO
                WHERE 1 = 1
	                AND GIU.ID_GIUSTIFICATIVO = @IdGiustificativo 
                    AND D.ANNULLATA = 0  ";
            cmd.CommandType = CommandType.Text;
            cmd.Parameters.Add(new SqlParameter("@IdGiustificativo", idGiustificativo.Value));
            object result = dbProvider.ExecuteScalar(cmd);
            dbProvider.Close();
            decimal retval;
            decimal.TryParse(result.ToString(), out retval);
            return retval;
        }

        public static decimal GetAmmontarePagamentiGiustificativoAssociatiPiano(IntNT idGiustificativo, IntNT idPagamentoBeneficiario, DbProvider dbProvider)
        {
            if (dbProvider == null) dbProvider = new DbProvider();
            IDbCommand cmd = dbProvider.GetCommand();
            cmd.CommandText = @"SELECT SUM(ISNULL(pb.IMPORTO_AMMESSO, pb.IMPORTO_RICHIESTO)) 
                FROM PAGAMENTI_BENEFICIARIO pb 
                JOIN PAGAMENTI_RICHIESTI pr ON pb.ID_PAGAMENTO_RICHIESTO = pr.ID_PAGAMENTO_RICHIESTO 
                JOIN DOMANDA_DI_PAGAMENTO d ON  d.ID_DOMANDA_PAGAMENTO = pr.id_domanda_pagamento 
                WHERE pb.ID_GIUSTIFICATIVO = @IdGiustificativo 
                    AND d.ANNULLATA = 0 ";
            cmd.CommandType = CommandType.Text;
            cmd.Parameters.Add(new SqlParameter("@IdGiustificativo", idGiustificativo.Value));
            if (idPagamentoBeneficiario != null)
            {
                cmd.CommandText += "AND pb.ID_PAGAMENTO_BENEFICIARIO != @IdPagamentoBeneficiario ";
                cmd.Parameters.Add(new SqlParameter("@IdPagamentoBeneficiario", idPagamentoBeneficiario.Value));
            }
            object result = dbProvider.ExecuteScalar(cmd);
            dbProvider.Close();
            decimal retval;
            decimal.TryParse(result.ToString(), out retval);
            return retval;
        }

        public static int GetSuperficieRimanente(IntNT idFascicolo, IntNT idCatasto, IntNT BIOLOGICO, IntNT CONVERSIONE, IntNT CONVENZ, DbProvider dbProvider)
        {
            if (dbProvider == null) dbProvider = new DbProvider();
            IDbCommand cmd = dbProvider.GetCommand();
            cmd.CommandText = "SELECT DBO.calcoloSuperficieUtilizzata(" + idFascicolo + "," + idCatasto + " , " + BIOLOGICO + "," + CONVERSIONE + "," + CONVENZ + " )";
            cmd.CommandType = CommandType.Text;
            object result = dbProvider.ExecuteScalar(cmd);
            dbProvider.Close();
            int retval;
            int.TryParse(result.ToString(), out retval);
            return retval;
        }

        public static int GetDomandePresentateBandoTipoPagamento(IntNT IdBando, StringNT codTipoPagamento, DbProvider dbProvider)
        {
            if (dbProvider == null) dbProvider = new DbProvider();
            IDbCommand cmd = dbProvider.GetCommand();
            cmd.CommandText = @"SELECT COUNT(*) FROM DOMANDA_DI_PAGAMENTO D INNER JOIN PROGETTO P ON D.ID_PROGETTO=ISNULL(P.ID_PROG_INTEGRATO,P.ID_PROGETTO)
                                WHERE ID_BANDO=" + IdBando + " AND COD_TIPO='" + codTipoPagamento + "'";
            cmd.CommandType = CommandType.Text;
            object result = dbProvider.ExecuteScalar(cmd);
            dbProvider.Close();
            int retval;
            int.TryParse(result.ToString(), out retval);
            return retval;
        }

        public static int GetDomandePresentateBandoTipoVariante(IntNT IdBando, StringNT codTipoVariante, DbProvider dbProvider)
        {
            if (dbProvider == null) dbProvider = new DbProvider();
            IDbCommand cmd = dbProvider.GetCommand();
            cmd.CommandText = @"SELECT COUNT(*) FROM VARIANTI V INNER JOIN PROGETTO P ON V.ID_PROGETTO=ISNULL(P.ID_PROG_INTEGRATO,P.ID_PROGETTO)
                                WHERE ID_BANDO=" + IdBando + " AND COD_TIPO='" + codTipoVariante + "'";
            cmd.CommandType = CommandType.Text;
            object result = dbProvider.ExecuteScalar(cmd);
            dbProvider.Close();
            int retval;
            int.TryParse(result.ToString(), out retval);
            return retval;
        }

        public static int EsitoControlloAntimafia(IntNT idImpresa, DatetimeNT data, DbProvider dbProvider)
        {
            if (dbProvider == null) dbProvider = new DbProvider();
            IDbCommand cmd = dbProvider.GetCommand();
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandText = "SpControlloAntimafia";
            cmd.Parameters.Add(new SqlParameter("ID_IMPRESA", idImpresa.Value));
            cmd.Parameters.Add(new SqlParameter("DATA", data.Value));
            object result = dbProvider.ExecuteScalar(cmd);
            dbProvider.Close();
            int retval = 0;
            int.TryParse(result.ToString(), out retval);
            return retval;
        }

        #region monitoraggio

        public static int EstraiDatiMonitoraggioXMisura(DatetimeNT data_estrazione, StringNT note, SiarLibrary.Operatore op, SiarLibrary.DbProvider db)
        {
            if (db == null) db = new DbProvider();
            System.Data.IDbCommand cmd = db.GetCommand();
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.CommandText = "SpEstrazioneMonitoraggioMisura";
            cmd.Parameters.Add(new System.Data.SqlClient.SqlParameter("PDATAESTRAZIONE", data_estrazione.Value));
            cmd.Parameters.Add(new System.Data.SqlClient.SqlParameter("NOTE", note.Value));
            cmd.Parameters.Add(new System.Data.SqlClient.SqlParameter("OPERATORE", op.Utente.CfUtente.Value));
            object result = db.ExecuteScalar(cmd);
            db.Close();
            int retval;
            if (result == null || !int.TryParse(result.ToString(), out retval) || retval < 1)
                throw new SiarLibrary.SiarException(SiarLibrary.TextErrorCodes.GenericoConLink);
            return retval;
        }

        public static int EstraiDatiMonitoraggioXBando(DatetimeNT data_estrazione, StringNT note, SiarLibrary.Operatore op, SiarLibrary.DbProvider db)
        {
            if (db == null) db = new DbProvider();
            System.Data.IDbCommand cmd = db.GetCommand();
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.CommandText = "SpEstrazioneMonitoraggioBandi";
            cmd.Parameters.Add(new System.Data.SqlClient.SqlParameter("PDATAESTRAZIONE", data_estrazione.Value));
            cmd.Parameters.Add(new System.Data.SqlClient.SqlParameter("NOTE", note.Value));
            cmd.Parameters.Add(new System.Data.SqlClient.SqlParameter("OPERATORE", op.Utente.CfUtente.Value));
            object result = db.ExecuteScalar(cmd);
            db.Close();
            int retval;
            if (result == null || !int.TryParse(result.ToString(), out retval) || retval < 1)
                throw new SiarLibrary.SiarException(SiarLibrary.TextErrorCodes.GenericoConLink);
            return retval;
        }
        #endregion

        #region UMA

        public static object LockObjectFoglioRiga;
        public static int CalcoloFoglioRiga(IntNT idAssegnazione, StringNT prov, DbProvider dbProvider)
        {
            if (LockObjectFoglioRiga == null) LockObjectFoglioRiga = new object();
            int retval = 0;
            lock (LockObjectFoglioRiga)
            {
                IDbCommand cmd = dbProvider.GetCommand();
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandText = "SpCalcoloFoglioRiga";
                cmd.Parameters.Add(new SqlParameter("ID_ASSEGNAZIONE", idAssegnazione.Value));
                if (!string.IsNullOrEmpty(prov)) cmd.Parameters.Add(new SqlParameter("PROV", prov.Value));
                object result = null;
                try { result = dbProvider.ExecuteScalar(cmd); }
                catch { }
                dbProvider.Close();
                int.TryParse(result.ToString(), out retval);
            }
            return retval;
        }

        public static string GetFascicoloPaleo(string cod_tipo, string cod_ente, IntNT anno, string provincia, DbProvider db)
        {
            if (db == null) db = new DbProvider();
            IDbCommand cmd = db.GetCommand();
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandText = "SpGetFascicoloPaleo";
            cmd.Parameters.Add(new System.Data.SqlClient.SqlParameter("@COD_TIPO", cod_tipo));
            cmd.Parameters.Add(new System.Data.SqlClient.SqlParameter("@COD_ENTE", cod_ente));
            if (anno != null) cmd.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ANNO", anno.Value));
            if (!string.IsNullOrEmpty(provincia)) cmd.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PROVINCIA", provincia));
            object result = db.ExecuteScalar(cmd);
            db.Close();
            if (result != null) return result.ToString();
            return null;
        }

        #endregion

        public static string GetToolTipByCode(string codice, DbProvider dbProvider)
        {
            if (dbProvider == null) dbProvider = new DbProvider();
            IDbCommand cmd = dbProvider.GetCommand();
            cmd.CommandText = "SELECT TESTO FROM TOOLTIP WHERE CODICE=@CODICE";
            cmd.CommandType = CommandType.Text;
            cmd.Parameters.Add(new SqlParameter("@CODICE", codice));
            object result = dbProvider.ExecuteScalar(cmd);
            dbProvider.Close();
            if (result == null) return null;
            else return result.ToString();
        }

        public static int EstraiCampioneDomandeXRevisione(int id_bando, int revisore, string provincia, DbProvider dbProvider)
        {
            if (dbProvider == null) dbProvider = new DbProvider();
            IDbCommand cmd = dbProvider.GetCommand();
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandText = "SpEstraiCampioneDomandeXRevisione";
            cmd.Parameters.Add(new System.Data.SqlClient.SqlParameter("ID_BANDO", id_bando));
            cmd.Parameters.Add(new System.Data.SqlClient.SqlParameter("REVISORE", revisore));
            cmd.Parameters.Add(new System.Data.SqlClient.SqlParameter("PROVINCIA", provincia));
            object result = dbProvider.ExecuteScalar(cmd);
            dbProvider.Close();
            int retval;
            int.TryParse(result.ToString(), out retval);
            return retval;
        }

        public static System.Collections.Generic.Dictionary<string, object> GetDatiBancaByCC(string abi, string cab)
        {
            var dt = new System.Collections.Generic.Dictionary<string, object>();
            SiarLibrary.DbProvider db = new SiarLibrary.DbProvider();
            System.Data.IDbCommand cmd = db.GetCommand();
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.CommandText = "SpZoomRecuperoDatiBanca";
            cmd.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ABI", abi));
            if (!string.IsNullOrEmpty(cab)) cmd.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CAB", cab));
            db.InitDatareader(cmd);
            if (db.DataReader.Read())
            {
                dt.Add("Istituto", db.DataReader["ISTITUTO"]);
                dt.Add("Agenzia", db.DataReader["AGENZIA"]);
                dt.Add("IdComune", db.DataReader["ID_COMUNE"]);
                dt.Add("Comune", db.DataReader["COMUNE"]);
                dt.Add("Cap", db.DataReader["CAP"]);
                dt.Add("Provincia", db.DataReader["PROVINCIA"]);
            }
            db.Close();
            return dt;
        }

        public static string GetJsUrlDecreto(SiarLibrary.Atti a) { return GetJsUrlDecreto(a.CodDefinizione, a.Data, a.AwDocnumber, a.AwDocnumberNuovo); }

        public static string GetJsUrlDecreto(string cod_definizione, DateTime data, string aw_docnumber, string aw_docnumber_nuovo)
        {
            string url = "";
            if (string.IsNullOrEmpty(aw_docnumber) && string.IsNullOrEmpty(aw_docnumber_nuovo)) url = "alert('Non è ancora possibile visionare ll documento selezionato.');";
            else
            {
                switch (cod_definizione)
                {
                    case "E":
                        {
                            DbProvider db = new DbProvider();
                            System.Data.IDbCommand cmd = db.GetCommand();
                            cmd.CommandType = System.Data.CommandType.Text;
                            cmd.CommandText = @"SELECT TOP 1 DATA_AVVIO_OPEN_ACT_DELIBERE as 'DATA_DELIBERE' FROM ATTI_REGISTRI";
                            db.InitDatareader(cmd);
                            DateTime data_avvio_delibere = DateTime.Now;
                            if (db.DataReader.Read())
                            {
                                data_avvio_delibere = new SiarLibrary.NullTypes.DatetimeNT(db.DataReader["DATA_DELIBERE"]);
                            }
                            if (data_avvio_delibere <= data)
                            {
                                if (!string.IsNullOrEmpty(aw_docnumber_nuovo))
                                    url = "SNCGetDocumentoFromOpenAct(" + aw_docnumber_nuovo + ");";
                            }
                            else
                            {
                                url = "window.open('" + System.Configuration.ConfigurationManager.AppSettings["NormeMarcheDocUrl"] + data.Year.ToString() + "/" + aw_docnumber + "');";
                            }
                            break;
                        }
                        
                    case "D":
                        if (!string.IsNullOrEmpty(aw_docnumber)) url = "location='" + System.Configuration.ConfigurationManager.AppSettings["AttiWebDocUrl"] + aw_docnumber + "';";
                        else if (!string.IsNullOrEmpty(aw_docnumber_nuovo)) url = "SNCGetDocumentoFromOpenAct(" + aw_docnumber_nuovo + ");";
                        break;
                    default: url = "alert('Tipologia di atto non ancora attiva.');"; break;
                }
            }
            return "javascript:" + url;
        }

        public static System.Collections.Generic.Dictionary<string, string> GetTipiRiduzionePagamento(bool attivi, bool lavoro_in_economia)
        {
            DbProvider db = new DbProvider();
            System.Data.IDbCommand cmd = db.GetCommand();
            cmd.CommandType = System.Data.CommandType.Text;
            cmd.CommandText = "SELECT CODICE,DESCRIZIONE FROM TIPO_RIDUZIONE_SPESE WHERE " + (lavoro_in_economia ? " LAVORO_IN_ECONOMIA=1" : "1=1")
                + (attivi ? " AND ATTIVO=1" : "") + " ORDER BY ORDINE";
            db.InitDatareader(cmd);
            System.Collections.Generic.Dictionary<string, string> retval = new System.Collections.Generic.Dictionary<string, string>();
            while (db.DataReader.Read())
                retval.Add(new StringNT(db.DataReader["DESCRIZIONE"]), new StringNT(db.DataReader["CODICE"]));
            db.Close();
            return retval;
        }

        public static System.Collections.Generic.Dictionary<string, string> GetEsitiStep()
        {
            DbProvider db = new DbProvider();
            System.Data.IDbCommand cmd = db.GetCommand();
            cmd.CommandType = System.Data.CommandType.Text;
            cmd.CommandText = "SELECT COD_ESITO,DESCRIZIONE FROM ESITI_STEP";
            db.InitDatareader(cmd);
            System.Collections.Generic.Dictionary<string, string> retval = new System.Collections.Generic.Dictionary<string, string>();
            while (db.DataReader.Read())
                retval.Add(new StringNT(db.DataReader["DESCRIZIONE"]), new StringNT(db.DataReader["COD_ESITO"]));
            db.Close();
            return retval;
        }
    }
}
