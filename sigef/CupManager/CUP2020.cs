// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 4.2.0.31
//    <NameSpace>CupManager</NameSpace><Collection>List</Collection><codeType>CSharp</codeType><EnableDataBinding>False</EnableDataBinding><GenerateCloneMethod>True</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><DataMemberNameArg>OnlyIfDifferent</DataMemberNameArg><DataMemberOnXmlIgnore>False</DataMemberOnXmlIgnore><CodeBaseTag>Net35</CodeBaseTag><InitializeFields>All</InitializeFields><GenerateUnusedComplexTypes>False</GenerateUnusedComplexTypes><GenerateUnusedSimpleTypes>False</GenerateUnusedSimpleTypes><GenerateXMLAttributes>True</GenerateXMLAttributes><OrderXMLAttrib>False</OrderXMLAttrib><EnableLazyLoading>False</EnableLazyLoading><VirtualProp>False</VirtualProp><PascalCase>False</PascalCase><AutomaticProperties>False</AutomaticProperties><PropNameSpecified>None</PropNameSpecified><PrivateFieldName>StartWithUnderscore</PrivateFieldName><PrivateFieldNamePrefix></PrivateFieldNamePrefix><EnableRestriction>False</EnableRestriction><RestrictionMaxLenght>False</RestrictionMaxLenght><RestrictionRegEx>False</RestrictionRegEx><RestrictionRange>False</RestrictionRange><ValidateProperty>False</ValidateProperty><ClassNamePrefix></ClassNamePrefix><ClassLevel>Public</ClassLevel><PartialClass>True</PartialClass><ClassesInSeparateFiles>False</ClassesInSeparateFiles><ClassesInSeparateFilesDir></ClassesInSeparateFilesDir><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>False</HidePrivateFieldInIDE><EnableSummaryComment>False</EnableSummaryComment><EnableAppInfoSettings>False</EnableAppInfoSettings><EnableExternalSchemasCache>False</EnableExternalSchemasCache><EnableDebug>False</EnableDebug><EnableWarn>False</EnableWarn><ExcludeImportedTypes>False</ExcludeImportedTypes><ExpandNesteadAttributeGroup>False</ExpandNesteadAttributeGroup><CleanupCode>False</CleanupCode><EnableXmlSerialization>True</EnableXmlSerialization><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><EnableEncoding>False</EnableEncoding><EnableXMLIndent>False</EnableXMLIndent><Encoder>UTF8</Encoder><Serializer>XmlSerializer</Serializer><sspNullable>False</sspNullable><sspString>False</sspString><sspCollection>True</sspCollection><sspComplexType>True</sspComplexType><sspSimpleType>False</sspSimpleType><sspEnumType>False</sspEnumType><BaseClassName>EntityBase</BaseClassName><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><CustomUsings></CustomUsings><AttributesToExlude></AttributesToExlude>
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace CupManager
{
    using System.Collections.Generic;
    using System.IO;
    using System.Xml;
    using System.Xml.Serialization;


    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.81.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = false)]
    public partial class RICHIESTA_GENERAZIONE_CUP
    {

        private ID_RICHIESTA _iD_RICHIESTA;

        private USER _uSER;

        private PASSWORD _pASSWORD;

        private CUP_GENERAZIONE _cUP_GENERAZIONE;

        private static XmlSerializer serializer;

        public RICHIESTA_GENERAZIONE_CUP()
        {
            this._cUP_GENERAZIONE = new CUP_GENERAZIONE();
            this._pASSWORD = new PASSWORD();
            this._uSER = new USER();
            this._iD_RICHIESTA = new ID_RICHIESTA();
        }

        public ID_RICHIESTA ID_RICHIESTA
        {
            get
            {
                return this._iD_RICHIESTA;
            }
            set
            {
                this._iD_RICHIESTA = value;
            }
        }

        public USER USER
        {
            get
            {
                return this._uSER;
            }
            set
            {
                this._uSER = value;
            }
        }

        public PASSWORD PASSWORD
        {
            get
            {
                return this._pASSWORD;
            }
            set
            {
                this._pASSWORD = value;
            }
        }

        public CUP_GENERAZIONE CUP_GENERAZIONE
        {
            get
            {
                return this._cUP_GENERAZIONE;
            }
            set
            {
                this._cUP_GENERAZIONE = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(RICHIESTA_GENERAZIONE_CUP));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether ID_RICHIESTA should be serialized
        /// </summary>
        public virtual bool ShouldSerializeID_RICHIESTA()
        {
            return (_iD_RICHIESTA != null);
        }

        /// <summary>
        /// Test whether USER should be serialized
        /// </summary>
        public virtual bool ShouldSerializeUSER()
        {
            return (_uSER != null);
        }

        /// <summary>
        /// Test whether PASSWORD should be serialized
        /// </summary>
        public virtual bool ShouldSerializePASSWORD()
        {
            return (_pASSWORD != null);
        }

        /// <summary>
        /// Test whether CUP_GENERAZIONE should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCUP_GENERAZIONE()
        {
            return (_cUP_GENERAZIONE != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current RICHIESTA_GENERAZIONE_CUP object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                XmlSerializerNamespaces ns = new XmlSerializerNamespaces();
                ns.Add("", "");
                //Serializer.Serialize(xmlWriter, this);
                Serializer.Serialize(xmlWriter, this, ns);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize(bool xmlDeclaration)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                if (!xmlDeclaration)
                {
                    xmlWriterSettings.OmitXmlDeclaration = true;
                }
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                XmlSerializerNamespaces ns = new XmlSerializerNamespaces();
                ns.Add("", "");
                //Serializer.Serialize(xmlWriter, this);
                Serializer.Serialize(xmlWriter, this, ns);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }


        /// <summary>
        /// Deserializes workflow markup into an RICHIESTA_GENERAZIONE_CUP object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output RICHIESTA_GENERAZIONE_CUP object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out RICHIESTA_GENERAZIONE_CUP obj, out System.Exception exception)
        {
            exception = null;
            obj = default(RICHIESTA_GENERAZIONE_CUP);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out RICHIESTA_GENERAZIONE_CUP obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static RICHIESTA_GENERAZIONE_CUP Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((RICHIESTA_GENERAZIONE_CUP)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static RICHIESTA_GENERAZIONE_CUP Deserialize(System.IO.Stream s)
        {
            return ((RICHIESTA_GENERAZIONE_CUP)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current RICHIESTA_GENERAZIONE_CUP object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an RICHIESTA_GENERAZIONE_CUP object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output RICHIESTA_GENERAZIONE_CUP object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out RICHIESTA_GENERAZIONE_CUP obj, out System.Exception exception)
        {
            exception = null;
            obj = default(RICHIESTA_GENERAZIONE_CUP);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out RICHIESTA_GENERAZIONE_CUP obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static RICHIESTA_GENERAZIONE_CUP LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Clone method
        /// <summary>
        /// Create a clone of this RICHIESTA_GENERAZIONE_CUP object
        /// </summary>
        public virtual RICHIESTA_GENERAZIONE_CUP Clone()
        {
            return ((RICHIESTA_GENERAZIONE_CUP)(this.MemberwiseClone()));
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.81.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = false)]
    public partial class ID_RICHIESTA
    {

        private List<string> _text;

        private static XmlSerializer serializer;

        public ID_RICHIESTA()
        {
            this._text = new List<string>();
        }

        [System.Xml.Serialization.XmlTextAttribute()]
        public List<string> Text
        {
            get
            {
                return this._text;
            }
            set
            {
                this._text = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(ID_RICHIESTA));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Text should be serialized
        /// </summary>
        public virtual bool ShouldSerializeText()
        {
            return Text != null && Text.Count > 0;
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ID_RICHIESTA object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an ID_RICHIESTA object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output ID_RICHIESTA object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out ID_RICHIESTA obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ID_RICHIESTA);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out ID_RICHIESTA obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static ID_RICHIESTA Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((ID_RICHIESTA)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static ID_RICHIESTA Deserialize(System.IO.Stream s)
        {
            return ((ID_RICHIESTA)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current ID_RICHIESTA object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ID_RICHIESTA object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ID_RICHIESTA object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ID_RICHIESTA obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ID_RICHIESTA);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ID_RICHIESTA obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ID_RICHIESTA LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Clone method
        /// <summary>
        /// Create a clone of this ID_RICHIESTA object
        /// </summary>
        public virtual ID_RICHIESTA Clone()
        {
            return ((ID_RICHIESTA)(this.MemberwiseClone()));
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.81.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = false)]
    public partial class CODICE_TIPOLOGIA_COP_FINANZ
    {

        private List<string> _text;

        private static XmlSerializer serializer;

        public CODICE_TIPOLOGIA_COP_FINANZ()
        {
            this._text = new List<string>();
        }

        [System.Xml.Serialization.XmlTextAttribute()]
        public List<string> Text
        {
            get
            {
                return this._text;
            }
            set
            {
                this._text = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(CODICE_TIPOLOGIA_COP_FINANZ));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Text should be serialized
        /// </summary>
        public virtual bool ShouldSerializeText()
        {
            return Text != null && Text.Count > 0;
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current CODICE_TIPOLOGIA_COP_FINANZ object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an CODICE_TIPOLOGIA_COP_FINANZ object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output CODICE_TIPOLOGIA_COP_FINANZ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out CODICE_TIPOLOGIA_COP_FINANZ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(CODICE_TIPOLOGIA_COP_FINANZ);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out CODICE_TIPOLOGIA_COP_FINANZ obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static CODICE_TIPOLOGIA_COP_FINANZ Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((CODICE_TIPOLOGIA_COP_FINANZ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static CODICE_TIPOLOGIA_COP_FINANZ Deserialize(System.IO.Stream s)
        {
            return ((CODICE_TIPOLOGIA_COP_FINANZ)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current CODICE_TIPOLOGIA_COP_FINANZ object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an CODICE_TIPOLOGIA_COP_FINANZ object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output CODICE_TIPOLOGIA_COP_FINANZ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out CODICE_TIPOLOGIA_COP_FINANZ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(CODICE_TIPOLOGIA_COP_FINANZ);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out CODICE_TIPOLOGIA_COP_FINANZ obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static CODICE_TIPOLOGIA_COP_FINANZ LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Clone method
        /// <summary>
        /// Create a clone of this CODICE_TIPOLOGIA_COP_FINANZ object
        /// </summary>
        public virtual CODICE_TIPOLOGIA_COP_FINANZ Clone()
        {
            return ((CODICE_TIPOLOGIA_COP_FINANZ)(this.MemberwiseClone()));
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.81.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = false)]
    public partial class FINANZIAMENTO
    {

        private List<CODICE_TIPOLOGIA_COP_FINANZ> _cODICE_TIPOLOGIA_COP_FINANZ;

        private FINANZIAMENTOSponsorizzazione _sponsorizzazione;

        private FINANZIAMENTOFinanza_progetto _finanza_progetto;

        private string _costo;

        private string _finanziamento;

        private static XmlSerializer serializer;

        public FINANZIAMENTO()
        {
            this._cODICE_TIPOLOGIA_COP_FINANZ = new List<CODICE_TIPOLOGIA_COP_FINANZ>();
        }

        [System.Xml.Serialization.XmlElementAttribute("CODICE_TIPOLOGIA_COP_FINANZ")]
        public List<CODICE_TIPOLOGIA_COP_FINANZ> CODICE_TIPOLOGIA_COP_FINANZ
        {
            get
            {
                return this._cODICE_TIPOLOGIA_COP_FINANZ;
            }
            set
            {
                this._cODICE_TIPOLOGIA_COP_FINANZ = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public FINANZIAMENTOSponsorizzazione sponsorizzazione
        {
            get
            {
                return this._sponsorizzazione;
            }
            set
            {
                this._sponsorizzazione = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public FINANZIAMENTOFinanza_progetto finanza_progetto
        {
            get
            {
                return this._finanza_progetto;
            }
            set
            {
                this._finanza_progetto = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string costo
        {
            get
            {
                return this._costo;
            }
            set
            {
                this._costo = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string finanziamento
        {
            get
            {
                return this._finanziamento;
            }
            set
            {
                this._finanziamento = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(FINANZIAMENTO));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether CODICE_TIPOLOGIA_COP_FINANZ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCODICE_TIPOLOGIA_COP_FINANZ()
        {
            return CODICE_TIPOLOGIA_COP_FINANZ != null && CODICE_TIPOLOGIA_COP_FINANZ.Count > 0;
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current FINANZIAMENTO object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an FINANZIAMENTO object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output FINANZIAMENTO object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out FINANZIAMENTO obj, out System.Exception exception)
        {
            exception = null;
            obj = default(FINANZIAMENTO);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out FINANZIAMENTO obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static FINANZIAMENTO Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((FINANZIAMENTO)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static FINANZIAMENTO Deserialize(System.IO.Stream s)
        {
            return ((FINANZIAMENTO)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current FINANZIAMENTO object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an FINANZIAMENTO object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output FINANZIAMENTO object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out FINANZIAMENTO obj, out System.Exception exception)
        {
            exception = null;
            obj = default(FINANZIAMENTO);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out FINANZIAMENTO obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static FINANZIAMENTO LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Clone method
        /// <summary>
        /// Create a clone of this FINANZIAMENTO object
        /// </summary>
        public virtual FINANZIAMENTO Clone()
        {
            return ((FINANZIAMENTO)(this.MemberwiseClone()));
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.81.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public enum FINANZIAMENTOSponsorizzazione
    {

        /// <remarks/>
        N,

        /// <remarks/>
        P,

        /// <remarks/>
        T,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.81.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public enum FINANZIAMENTOFinanza_progetto
    {

        /// <remarks/>
        N,

        /// <remarks/>
        P,

        /// <remarks/>
        A,
    }

    //[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.81.0")]
    //[System.SerializableAttribute()]
    //[System.Diagnostics.DebuggerStepThroughAttribute()]
    //[System.ComponentModel.DesignerCategoryAttribute("code")]
    //[System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = false)]
    //public partial class ATTIV_ECONOMICA_BENEFICIARIO
    //{

    //    private string _sezione;

    //    private string _sottosezione;

    //    private string _divisione;

    //    private string _gruppo;

    //    private static XmlSerializer serializer;

    //    [System.Xml.Serialization.XmlAttributeAttribute()]
    //    public string sezione
    //    {
    //        get
    //        {
    //            return this._sezione;
    //        }
    //        set
    //        {
    //            this._sezione = value;
    //        }
    //    }

    //    [System.Xml.Serialization.XmlAttributeAttribute()]
    //    public string sottosezione
    //    {
    //        get
    //        {
    //            return this._sottosezione;
    //        }
    //        set
    //        {
    //            this._sottosezione = value;
    //        }
    //    }

    //    [System.Xml.Serialization.XmlAttributeAttribute()]
    //    public string divisione
    //    {
    //        get
    //        {
    //            return this._divisione;
    //        }
    //        set
    //        {
    //            this._divisione = value;
    //        }
    //    }

    //    [System.Xml.Serialization.XmlAttributeAttribute()]
    //    public string gruppo
    //    {
    //        get
    //        {
    //            return this._gruppo;
    //        }
    //        set
    //        {
    //            this._gruppo = value;
    //        }
    //    }

    //    private static XmlSerializer Serializer
    //    {
    //        get
    //        {
    //            if ((serializer == null))
    //            {
    //                serializer = new XmlSerializerFactory().CreateSerializer(typeof(ATTIV_ECONOMICA_BENEFICIARIO));
    //            }
    //            return serializer;
    //        }
    //    }

    //    #region Serialize/Deserialize
    //    /// <summary>
    //    /// Serializes current ATTIV_ECONOMICA_BENEFICIARIO object into an XML string
    //    /// </summary>
    //    /// <returns>string XML value</returns>
    //    public virtual string Serialize()
    //    {
    //        System.IO.StreamReader streamReader = null;
    //        System.IO.MemoryStream memoryStream = null;
    //        try
    //        {
    //            memoryStream = new System.IO.MemoryStream();
    //            System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
    //            xmlWriterSettings.Indent = false;
    //            System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
    //            Serializer.Serialize(xmlWriter, this);
    //            memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
    //            streamReader = new System.IO.StreamReader(memoryStream);
    //            return streamReader.ReadToEnd();
    //        }
    //        finally
    //        {
    //            if ((streamReader != null))
    //            {
    //                streamReader.Dispose();
    //            }
    //            if ((memoryStream != null))
    //            {
    //                memoryStream.Dispose();
    //            }
    //        }
    //    }

    //    /// <summary>
    //    /// Deserializes workflow markup into an ATTIV_ECONOMICA_BENEFICIARIO object
    //    /// </summary>
    //    /// <param name="input">string workflow markup to deserialize</param>
    //    /// <param name="obj">Output ATTIV_ECONOMICA_BENEFICIARIO object</param>
    //    /// <param name="exception">output Exception value if deserialize failed</param>
    //    /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
    //    public static bool Deserialize(string input, out ATTIV_ECONOMICA_BENEFICIARIO obj, out System.Exception exception)
    //    {
    //        exception = null;
    //        obj = default(ATTIV_ECONOMICA_BENEFICIARIO);
    //        try
    //        {
    //            obj = Deserialize(input);
    //            return true;
    //        }
    //        catch (System.Exception ex)
    //        {
    //            exception = ex;
    //            return false;
    //        }
    //    }

    //    public static bool Deserialize(string input, out ATTIV_ECONOMICA_BENEFICIARIO obj)
    //    {
    //        System.Exception exception = null;
    //        return Deserialize(input, out obj, out exception);
    //    }

    //    public static ATTIV_ECONOMICA_BENEFICIARIO Deserialize(string input)
    //    {
    //        System.IO.StringReader stringReader = null;
    //        try
    //        {
    //            stringReader = new System.IO.StringReader(input);
    //            return ((ATTIV_ECONOMICA_BENEFICIARIO)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
    //        }
    //        finally
    //        {
    //            if ((stringReader != null))
    //            {
    //                stringReader.Dispose();
    //            }
    //        }
    //    }

    //    public static ATTIV_ECONOMICA_BENEFICIARIO Deserialize(System.IO.Stream s)
    //    {
    //        return ((ATTIV_ECONOMICA_BENEFICIARIO)(Serializer.Deserialize(s)));
    //    }
    //    #endregion

    //    /// <summary>
    //    /// Serializes current ATTIV_ECONOMICA_BENEFICIARIO object into file
    //    /// </summary>
    //    /// <param name="fileName">full path of outupt xml file</param>
    //    /// <param name="exception">output Exception value if failed</param>
    //    /// <returns>true if can serialize and save into file; otherwise, false</returns>
    //    public virtual bool SaveToFile(string fileName, out System.Exception exception)
    //    {
    //        exception = null;
    //        try
    //        {
    //            SaveToFile(fileName);
    //            return true;
    //        }
    //        catch (System.Exception e)
    //        {
    //            exception = e;
    //            return false;
    //        }
    //    }

    //    public virtual void SaveToFile(string fileName)
    //    {
    //        System.IO.StreamWriter streamWriter = null;
    //        try
    //        {
    //            string xmlString = Serialize();
    //            System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
    //            streamWriter = xmlFile.CreateText();
    //            streamWriter.WriteLine(xmlString);
    //            streamWriter.Close();
    //        }
    //        finally
    //        {
    //            if ((streamWriter != null))
    //            {
    //                streamWriter.Dispose();
    //            }
    //        }
    //    }

    //    /// <summary>
    //    /// Deserializes xml markup from file into an ATTIV_ECONOMICA_BENEFICIARIO object
    //    /// </summary>
    //    /// <param name="fileName">string xml file to load and deserialize</param>
    //    /// <param name="obj">Output ATTIV_ECONOMICA_BENEFICIARIO object</param>
    //    /// <param name="exception">output Exception value if deserialize failed</param>
    //    /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
    //    public static bool LoadFromFile(string fileName, out ATTIV_ECONOMICA_BENEFICIARIO obj, out System.Exception exception)
    //    {
    //        exception = null;
    //        obj = default(ATTIV_ECONOMICA_BENEFICIARIO);
    //        try
    //        {
    //            obj = LoadFromFile(fileName);
    //            return true;
    //        }
    //        catch (System.Exception ex)
    //        {
    //            exception = ex;
    //            return false;
    //        }
    //    }

    //    public static bool LoadFromFile(string fileName, out ATTIV_ECONOMICA_BENEFICIARIO obj)
    //    {
    //        System.Exception exception = null;
    //        return LoadFromFile(fileName, out obj, out exception);
    //    }

    //    public static ATTIV_ECONOMICA_BENEFICIARIO LoadFromFile(string fileName)
    //    {
    //        System.IO.FileStream file = null;
    //        System.IO.StreamReader sr = null;
    //        try
    //        {
    //            file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
    //            sr = new System.IO.StreamReader(file);
    //            string xmlString = sr.ReadToEnd();
    //            sr.Close();
    //            file.Close();
    //            return Deserialize(xmlString);
    //        }
    //        finally
    //        {
    //            if ((file != null))
    //            {
    //                file.Dispose();
    //            }
    //            if ((sr != null))
    //            {
    //                sr.Dispose();
    //            }
    //        }
    //    }

    //    #region Clone method
    //    /// <summary>
    //    /// Create a clone of this ATTIV_ECONOMICA_BENEFICIARIO object
    //    /// </summary>
    //    public virtual ATTIV_ECONOMICA_BENEFICIARIO Clone()
    //    {
    //        return ((ATTIV_ECONOMICA_BENEFICIARIO)(this.MemberwiseClone()));
    //    }
    //    #endregion
    //}
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.81.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = false)]
    public partial class ATTIV_ECONOMICA_BENEFICIARIO_ATECO_2007
    {

        private string _sezione;

        private string _divisione;

        private string _gruppo;

        private string _classe;

        private string _categoria;

        private string _sottocategoria;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string sezione
        {
            get
            {
                return this._sezione;
            }
            set
            {
                this._sezione = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string divisione
        {
            get
            {
                return this._divisione;
            }
            set
            {
                this._divisione = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string gruppo
        {
            get
            {
                return this._gruppo;
            }
            set
            {
                this._gruppo = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string classe
        {
            get
            {
                return this._classe;
            }
            set
            {
                this._classe = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string categoria
        {
            get
            {
                return this._categoria;
            }
            set
            {
                this._categoria = value;
            }
        }


        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string sottocategoria
        {
            get
            {
                return this._sottocategoria;
            }
            set
            {
                this._sottocategoria = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(ATTIV_ECONOMICA_BENEFICIARIO_ATECO_2007));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ATTIV_ECONOMICA_BENEFICIARIO_ATECO_2007 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an ATTIV_ECONOMICA_BENEFICIARIO_ATECO_2007 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output ATTIV_ECONOMICA_BENEFICIARIO object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out ATTIV_ECONOMICA_BENEFICIARIO_ATECO_2007 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ATTIV_ECONOMICA_BENEFICIARIO_ATECO_2007);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out ATTIV_ECONOMICA_BENEFICIARIO_ATECO_2007 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static ATTIV_ECONOMICA_BENEFICIARIO_ATECO_2007 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((ATTIV_ECONOMICA_BENEFICIARIO_ATECO_2007)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static ATTIV_ECONOMICA_BENEFICIARIO_ATECO_2007 Deserialize(System.IO.Stream s)
        {
            return ((ATTIV_ECONOMICA_BENEFICIARIO_ATECO_2007)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current ATTIV_ECONOMICA_BENEFICIARIO_ATECO_2007 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ATTIV_ECONOMICA_BENEFICIARIO object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ATTIV_ECONOMICA_BENEFICIARIO object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ATTIV_ECONOMICA_BENEFICIARIO_ATECO_2007 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ATTIV_ECONOMICA_BENEFICIARIO_ATECO_2007);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ATTIV_ECONOMICA_BENEFICIARIO_ATECO_2007 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ATTIV_ECONOMICA_BENEFICIARIO_ATECO_2007 LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Clone method
        /// <summary>
        /// Create a clone of this ATTIV_ECONOMICA_BENEFICIARIO object
        /// </summary>
        public virtual ATTIV_ECONOMICA_BENEFICIARIO_ATECO_2007 Clone()
        {
            return ((ATTIV_ECONOMICA_BENEFICIARIO_ATECO_2007)(this.MemberwiseClone()));
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.81.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = false)]
    public partial class CUP_CUMULATIVO
    {

        private string _atto_amministr;

        private string _scopo_intervento;

        private string _altre_informazioni;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string atto_amministr
        {
            get
            {
                return this._atto_amministr;
            }
            set
            {
                this._atto_amministr = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string scopo_intervento
        {
            get
            {
                return this._scopo_intervento;
            }
            set
            {
                this._scopo_intervento = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string altre_informazioni
        {
            get
            {
                return this._altre_informazioni;
            }
            set
            {
                this._altre_informazioni = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(CUP_CUMULATIVO));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current CUP_CUMULATIVO object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an CUP_CUMULATIVO object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output CUP_CUMULATIVO object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out CUP_CUMULATIVO obj, out System.Exception exception)
        {
            exception = null;
            obj = default(CUP_CUMULATIVO);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out CUP_CUMULATIVO obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static CUP_CUMULATIVO Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((CUP_CUMULATIVO)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static CUP_CUMULATIVO Deserialize(System.IO.Stream s)
        {
            return ((CUP_CUMULATIVO)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current CUP_CUMULATIVO object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an CUP_CUMULATIVO object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output CUP_CUMULATIVO object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out CUP_CUMULATIVO obj, out System.Exception exception)
        {
            exception = null;
            obj = default(CUP_CUMULATIVO);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out CUP_CUMULATIVO obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static CUP_CUMULATIVO LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Clone method
        /// <summary>
        /// Create a clone of this CUP_CUMULATIVO object
        /// </summary>
        public virtual CUP_CUMULATIVO Clone()
        {
            return ((CUP_CUMULATIVO)(this.MemberwiseClone()));
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.81.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = false)]
    public partial class CONCESSIONE_CONTRIBUTI_NO_UNITA_PRODUTTIVE
    {

        private string _beneficiario;

        private string _partita_iva;

        private string _struttura;

        //private CONCESSIONE_CONTRIBUTI_NO_UNITA_PRODUTTIVETipo_ind_area_rifer _tipo_ind_area_rifer;
        private string _tipo_ind_area_rifer;

        private string _ind_area_rifer;

        private string _desc_intervento;

        private string _strum_progr;

        private string _desc_strum_progr;

        private string _altre_informazioni;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string beneficiario
        {
            get
            {
                return this._beneficiario;
            }
            set
            {
                this._beneficiario = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string partita_iva
        {
            get
            {
                return this._partita_iva;
            }
            set
            {
                this._partita_iva = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string struttura
        {
            get
            {
                return this._struttura;
            }
            set
            {
                this._struttura = value;
            }
        }

        //[System.Xml.Serialization.XmlAttributeAttribute()]
        //public CONCESSIONE_CONTRIBUTI_NO_UNITA_PRODUTTIVETipo_ind_area_rifer tipo_ind_area_rifer
        //{
        //    get
        //    {
        //        return this._tipo_ind_area_rifer;
        //    }
        //    set
        //    {
        //        this._tipo_ind_area_rifer = value;
        //    }
        //}
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string tipo_ind_area_rifer
        {
            get
            {
                return this._tipo_ind_area_rifer;
            }
            set
            {
                this._tipo_ind_area_rifer = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ind_area_rifer
        {
            get
            {
                return this._ind_area_rifer;
            }
            set
            {
                this._ind_area_rifer = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string desc_intervento
        {
            get
            {
                return this._desc_intervento;
            }
            set
            {
                this._desc_intervento = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string strum_progr
        {
            get
            {
                return this._strum_progr;
            }
            set
            {
                this._strum_progr = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string desc_strum_progr
        {
            get
            {
                return this._desc_strum_progr;
            }
            set
            {
                this._desc_strum_progr = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string altre_informazioni
        {
            get
            {
                return this._altre_informazioni;
            }
            set
            {
                this._altre_informazioni = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(CONCESSIONE_CONTRIBUTI_NO_UNITA_PRODUTTIVE));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current CONCESSIONE_CONTRIBUTI_NO_UNITA_PRODUTTIVE object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an CONCESSIONE_CONTRIBUTI_NO_UNITA_PRODUTTIVE object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output CONCESSIONE_CONTRIBUTI_NO_UNITA_PRODUTTIVE object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out CONCESSIONE_CONTRIBUTI_NO_UNITA_PRODUTTIVE obj, out System.Exception exception)
        {
            exception = null;
            obj = default(CONCESSIONE_CONTRIBUTI_NO_UNITA_PRODUTTIVE);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out CONCESSIONE_CONTRIBUTI_NO_UNITA_PRODUTTIVE obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static CONCESSIONE_CONTRIBUTI_NO_UNITA_PRODUTTIVE Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((CONCESSIONE_CONTRIBUTI_NO_UNITA_PRODUTTIVE)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static CONCESSIONE_CONTRIBUTI_NO_UNITA_PRODUTTIVE Deserialize(System.IO.Stream s)
        {
            return ((CONCESSIONE_CONTRIBUTI_NO_UNITA_PRODUTTIVE)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current CONCESSIONE_CONTRIBUTI_NO_UNITA_PRODUTTIVE object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an CONCESSIONE_CONTRIBUTI_NO_UNITA_PRODUTTIVE object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output CONCESSIONE_CONTRIBUTI_NO_UNITA_PRODUTTIVE object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out CONCESSIONE_CONTRIBUTI_NO_UNITA_PRODUTTIVE obj, out System.Exception exception)
        {
            exception = null;
            obj = default(CONCESSIONE_CONTRIBUTI_NO_UNITA_PRODUTTIVE);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out CONCESSIONE_CONTRIBUTI_NO_UNITA_PRODUTTIVE obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static CONCESSIONE_CONTRIBUTI_NO_UNITA_PRODUTTIVE LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Clone method
        /// <summary>
        /// Create a clone of this CONCESSIONE_CONTRIBUTI_NO_UNITA_PRODUTTIVE object
        /// </summary>
        public virtual CONCESSIONE_CONTRIBUTI_NO_UNITA_PRODUTTIVE Clone()
        {
            return ((CONCESSIONE_CONTRIBUTI_NO_UNITA_PRODUTTIVE)(this.MemberwiseClone()));
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.81.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public enum CONCESSIONE_CONTRIBUTI_NO_UNITA_PRODUTTIVETipo_ind_area_rifer
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("01")]
        Item01,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("02")]
        Item02,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("03")]
        Item03,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("04")]
        Item04,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("05")]
        Item05,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.81.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = false)]
    public partial class PARTECIP_AZIONARIE_CONFERIM_CAPITALE
    {

        private string _ragione_sociale;

        private string _partita_iva;

        private string _ragione_sociale_prec;

        //private PARTECIP_AZIONARIE_CONFERIM_CAPITALETipo_ind_area_rifer _tipo_ind_area_rifer;
        private string _tipo_ind_area_rifer;

        private string _ind_area_rifer;

        private string _finalita;

        private string _strum_progr;

        private string _desc_strum_progr;

        private string _altre_informazioni;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ragione_sociale
        {
            get
            {
                return this._ragione_sociale;
            }
            set
            {
                this._ragione_sociale = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string partita_iva
        {
            get
            {
                return this._partita_iva;
            }
            set
            {
                this._partita_iva = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ragione_sociale_prec
        {
            get
            {
                return this._ragione_sociale_prec;
            }
            set
            {
                this._ragione_sociale_prec = value;
            }
        }

        //[System.Xml.Serialization.XmlAttributeAttribute()]
        //public PARTECIP_AZIONARIE_CONFERIM_CAPITALETipo_ind_area_rifer tipo_ind_area_rifer
        //{
        //    get
        //    {
        //        return this._tipo_ind_area_rifer;
        //    }
        //    set
        //    {
        //        this._tipo_ind_area_rifer = value;
        //    }
        //}
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string tipo_ind_area_rifer
        {
            get
            {
                return this._tipo_ind_area_rifer;
            }
            set
            {
                this._tipo_ind_area_rifer = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ind_area_rifer
        {
            get
            {
                return this._ind_area_rifer;
            }
            set
            {
                this._ind_area_rifer = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string finalita
        {
            get
            {
                return this._finalita;
            }
            set
            {
                this._finalita = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string strum_progr
        {
            get
            {
                return this._strum_progr;
            }
            set
            {
                this._strum_progr = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string desc_strum_progr
        {
            get
            {
                return this._desc_strum_progr;
            }
            set
            {
                this._desc_strum_progr = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string altre_informazioni
        {
            get
            {
                return this._altre_informazioni;
            }
            set
            {
                this._altre_informazioni = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(PARTECIP_AZIONARIE_CONFERIM_CAPITALE));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current PARTECIP_AZIONARIE_CONFERIM_CAPITALE object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an PARTECIP_AZIONARIE_CONFERIM_CAPITALE object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output PARTECIP_AZIONARIE_CONFERIM_CAPITALE object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out PARTECIP_AZIONARIE_CONFERIM_CAPITALE obj, out System.Exception exception)
        {
            exception = null;
            obj = default(PARTECIP_AZIONARIE_CONFERIM_CAPITALE);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out PARTECIP_AZIONARIE_CONFERIM_CAPITALE obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static PARTECIP_AZIONARIE_CONFERIM_CAPITALE Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((PARTECIP_AZIONARIE_CONFERIM_CAPITALE)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static PARTECIP_AZIONARIE_CONFERIM_CAPITALE Deserialize(System.IO.Stream s)
        {
            return ((PARTECIP_AZIONARIE_CONFERIM_CAPITALE)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current PARTECIP_AZIONARIE_CONFERIM_CAPITALE object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an PARTECIP_AZIONARIE_CONFERIM_CAPITALE object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output PARTECIP_AZIONARIE_CONFERIM_CAPITALE object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out PARTECIP_AZIONARIE_CONFERIM_CAPITALE obj, out System.Exception exception)
        {
            exception = null;
            obj = default(PARTECIP_AZIONARIE_CONFERIM_CAPITALE);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out PARTECIP_AZIONARIE_CONFERIM_CAPITALE obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static PARTECIP_AZIONARIE_CONFERIM_CAPITALE LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Clone method
        /// <summary>
        /// Create a clone of this PARTECIP_AZIONARIE_CONFERIM_CAPITALE object
        /// </summary>
        public virtual PARTECIP_AZIONARIE_CONFERIM_CAPITALE Clone()
        {
            return ((PARTECIP_AZIONARIE_CONFERIM_CAPITALE)(this.MemberwiseClone()));
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.81.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public enum PARTECIP_AZIONARIE_CONFERIM_CAPITALETipo_ind_area_rifer
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("01")]
        Item01,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("02")]
        Item02,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("03")]
        Item03,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("04")]
        Item04,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("05")]
        Item05,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.81.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = false)]
    public partial class ACQUISTO_BENI
    {

        private string _nome_str_infrastr;

        //private ACQUISTO_BENITipo_ind_area_rifer _tipo_ind_area_rifer;
        private string _tipo_ind_area_rifer;

        private string _ind_area_rifer;

        private string _bene;

        private string _strum_progr;

        private string _desc_strum_progr;

        private string _altre_informazioni;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string nome_str_infrastr
        {
            get
            {
                return this._nome_str_infrastr;
            }
            set
            {
                this._nome_str_infrastr = value;
            }
        }

        //[System.Xml.Serialization.XmlAttributeAttribute()]
        //public ACQUISTO_BENITipo_ind_area_rifer tipo_ind_area_rifer
        //{
        //    get
        //    {
        //        return this._tipo_ind_area_rifer;
        //    }
        //    set
        //    {
        //        this._tipo_ind_area_rifer = value;
        //    }
        //}
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string tipo_ind_area_rifer
        {
            get
            {
                return this._tipo_ind_area_rifer;
            }
            set
            {
                this._tipo_ind_area_rifer = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ind_area_rifer
        {
            get
            {
                return this._ind_area_rifer;
            }
            set
            {
                this._ind_area_rifer = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string bene
        {
            get
            {
                return this._bene;
            }
            set
            {
                this._bene = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string strum_progr
        {
            get
            {
                return this._strum_progr;
            }
            set
            {
                this._strum_progr = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string desc_strum_progr
        {
            get
            {
                return this._desc_strum_progr;
            }
            set
            {
                this._desc_strum_progr = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string altre_informazioni
        {
            get
            {
                return this._altre_informazioni;
            }
            set
            {
                this._altre_informazioni = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(ACQUISTO_BENI));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ACQUISTO_BENI object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an ACQUISTO_BENI object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output ACQUISTO_BENI object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out ACQUISTO_BENI obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ACQUISTO_BENI);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out ACQUISTO_BENI obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static ACQUISTO_BENI Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((ACQUISTO_BENI)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static ACQUISTO_BENI Deserialize(System.IO.Stream s)
        {
            return ((ACQUISTO_BENI)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current ACQUISTO_BENI object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ACQUISTO_BENI object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ACQUISTO_BENI object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ACQUISTO_BENI obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ACQUISTO_BENI);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ACQUISTO_BENI obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ACQUISTO_BENI LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Clone method
        /// <summary>
        /// Create a clone of this ACQUISTO_BENI object
        /// </summary>
        public virtual ACQUISTO_BENI Clone()
        {
            return ((ACQUISTO_BENI)(this.MemberwiseClone()));
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.81.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public enum ACQUISTO_BENITipo_ind_area_rifer
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("01")]
        Item01,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("02")]
        Item02,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("03")]
        Item03,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("04")]
        Item04,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("05")]
        Item05,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.81.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = false)]
    public partial class REALIZZ_ACQUISTO_SERVIZI_NO_FORMAZIONE_RICERCA
    {

        private string _nome_str_infrastr;

        //private REALIZZ_ACQUISTO_SERVIZI_NO_FORMAZIONE_RICERCATipo_ind_area_rifer _tipo_ind_area_rifer;
        private string _tipo_ind_area_rifer;

        private string _ind_area_rifer;

        private string _servizio;

        private string _strum_progr;

        private string _desc_strum_progr;

        private string _altre_informazioni;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string nome_str_infrastr
        {
            get
            {
                return this._nome_str_infrastr;
            }
            set
            {
                this._nome_str_infrastr = value;
            }
        }

        //[System.Xml.Serialization.XmlAttributeAttribute()]
        //public REALIZZ_ACQUISTO_SERVIZI_NO_FORMAZIONE_RICERCATipo_ind_area_rifer tipo_ind_area_rifer
        //{
        //    get
        //    {
        //        return this._tipo_ind_area_rifer;
        //    }
        //    set
        //    {
        //        this._tipo_ind_area_rifer = value;
        //    }
        //}
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string tipo_ind_area_rifer
        {
            get
            {
                return this._tipo_ind_area_rifer;
            }
            set
            {
                this._tipo_ind_area_rifer = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ind_area_rifer
        {
            get
            {
                return this._ind_area_rifer;
            }
            set
            {
                this._ind_area_rifer = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string servizio
        {
            get
            {
                return this._servizio;
            }
            set
            {
                this._servizio = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string strum_progr
        {
            get
            {
                return this._strum_progr;
            }
            set
            {
                this._strum_progr = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string desc_strum_progr
        {
            get
            {
                return this._desc_strum_progr;
            }
            set
            {
                this._desc_strum_progr = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string altre_informazioni
        {
            get
            {
                return this._altre_informazioni;
            }
            set
            {
                this._altre_informazioni = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(REALIZZ_ACQUISTO_SERVIZI_NO_FORMAZIONE_RICERCA));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current REALIZZ_ACQUISTO_SERVIZI_NO_FORMAZIONE_RICERCA object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an REALIZZ_ACQUISTO_SERVIZI_NO_FORMAZIONE_RICERCA object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output REALIZZ_ACQUISTO_SERVIZI_NO_FORMAZIONE_RICERCA object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out REALIZZ_ACQUISTO_SERVIZI_NO_FORMAZIONE_RICERCA obj, out System.Exception exception)
        {
            exception = null;
            obj = default(REALIZZ_ACQUISTO_SERVIZI_NO_FORMAZIONE_RICERCA);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out REALIZZ_ACQUISTO_SERVIZI_NO_FORMAZIONE_RICERCA obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static REALIZZ_ACQUISTO_SERVIZI_NO_FORMAZIONE_RICERCA Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((REALIZZ_ACQUISTO_SERVIZI_NO_FORMAZIONE_RICERCA)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static REALIZZ_ACQUISTO_SERVIZI_NO_FORMAZIONE_RICERCA Deserialize(System.IO.Stream s)
        {
            return ((REALIZZ_ACQUISTO_SERVIZI_NO_FORMAZIONE_RICERCA)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current REALIZZ_ACQUISTO_SERVIZI_NO_FORMAZIONE_RICERCA object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an REALIZZ_ACQUISTO_SERVIZI_NO_FORMAZIONE_RICERCA object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output REALIZZ_ACQUISTO_SERVIZI_NO_FORMAZIONE_RICERCA object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out REALIZZ_ACQUISTO_SERVIZI_NO_FORMAZIONE_RICERCA obj, out System.Exception exception)
        {
            exception = null;
            obj = default(REALIZZ_ACQUISTO_SERVIZI_NO_FORMAZIONE_RICERCA);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out REALIZZ_ACQUISTO_SERVIZI_NO_FORMAZIONE_RICERCA obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static REALIZZ_ACQUISTO_SERVIZI_NO_FORMAZIONE_RICERCA LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Clone method
        /// <summary>
        /// Create a clone of this REALIZZ_ACQUISTO_SERVIZI_NO_FORMAZIONE_RICERCA object
        /// </summary>
        public virtual REALIZZ_ACQUISTO_SERVIZI_NO_FORMAZIONE_RICERCA Clone()
        {
            return ((REALIZZ_ACQUISTO_SERVIZI_NO_FORMAZIONE_RICERCA)(this.MemberwiseClone()));
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.81.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public enum REALIZZ_ACQUISTO_SERVIZI_NO_FORMAZIONE_RICERCATipo_ind_area_rifer
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("01")]
        Item01,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("02")]
        Item02,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("03")]
        Item03,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("04")]
        Item04,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("05")]
        Item05,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.81.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = false)]
    public partial class REALIZZ_ACQUISTO_SERVIZI_FORMAZIONE
    {

        private string _denom_progetto;

        private string _denom_ente_corso;

        //private REALIZZ_ACQUISTO_SERVIZI_FORMAZIONETipo_ind_area_rifer _tipo_ind_area_rifer;
        private string _tipo_ind_area_rifer;

        private string _ind_area_rifer;

        private string _obiett_corso;

        private string _mod_intervento_frequenza;

        private string _strum_progr;

        private string _desc_strum_progr;

        private string _altre_informazioni;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string denom_progetto
        {
            get
            {
                return this._denom_progetto;
            }
            set
            {
                this._denom_progetto = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string denom_ente_corso
        {
            get
            {
                return this._denom_ente_corso;
            }
            set
            {
                this._denom_ente_corso = value;
            }
        }

        //[System.Xml.Serialization.XmlAttributeAttribute()]
        //public REALIZZ_ACQUISTO_SERVIZI_FORMAZIONETipo_ind_area_rifer tipo_ind_area_rifer
        //{
        //    get
        //    {
        //        return this._tipo_ind_area_rifer;
        //    }
        //    set
        //    {
        //        this._tipo_ind_area_rifer = value;
        //    }
        //}
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string tipo_ind_area_rifer
        {
            get
            {
                return this._tipo_ind_area_rifer;
            }
            set
            {
                this._tipo_ind_area_rifer = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ind_area_rifer
        {
            get
            {
                return this._ind_area_rifer;
            }
            set
            {
                this._ind_area_rifer = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string obiett_corso
        {
            get
            {
                return this._obiett_corso;
            }
            set
            {
                this._obiett_corso = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string mod_intervento_frequenza
        {
            get
            {
                return this._mod_intervento_frequenza;
            }
            set
            {
                this._mod_intervento_frequenza = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string strum_progr
        {
            get
            {
                return this._strum_progr;
            }
            set
            {
                this._strum_progr = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string desc_strum_progr
        {
            get
            {
                return this._desc_strum_progr;
            }
            set
            {
                this._desc_strum_progr = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string altre_informazioni
        {
            get
            {
                return this._altre_informazioni;
            }
            set
            {
                this._altre_informazioni = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(REALIZZ_ACQUISTO_SERVIZI_FORMAZIONE));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current REALIZZ_ACQUISTO_SERVIZI_FORMAZIONE object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an REALIZZ_ACQUISTO_SERVIZI_FORMAZIONE object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output REALIZZ_ACQUISTO_SERVIZI_FORMAZIONE object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out REALIZZ_ACQUISTO_SERVIZI_FORMAZIONE obj, out System.Exception exception)
        {
            exception = null;
            obj = default(REALIZZ_ACQUISTO_SERVIZI_FORMAZIONE);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out REALIZZ_ACQUISTO_SERVIZI_FORMAZIONE obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static REALIZZ_ACQUISTO_SERVIZI_FORMAZIONE Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((REALIZZ_ACQUISTO_SERVIZI_FORMAZIONE)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static REALIZZ_ACQUISTO_SERVIZI_FORMAZIONE Deserialize(System.IO.Stream s)
        {
            return ((REALIZZ_ACQUISTO_SERVIZI_FORMAZIONE)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current REALIZZ_ACQUISTO_SERVIZI_FORMAZIONE object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an REALIZZ_ACQUISTO_SERVIZI_FORMAZIONE object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output REALIZZ_ACQUISTO_SERVIZI_FORMAZIONE object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out REALIZZ_ACQUISTO_SERVIZI_FORMAZIONE obj, out System.Exception exception)
        {
            exception = null;
            obj = default(REALIZZ_ACQUISTO_SERVIZI_FORMAZIONE);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out REALIZZ_ACQUISTO_SERVIZI_FORMAZIONE obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static REALIZZ_ACQUISTO_SERVIZI_FORMAZIONE LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Clone method
        /// <summary>
        /// Create a clone of this REALIZZ_ACQUISTO_SERVIZI_FORMAZIONE object
        /// </summary>
        public virtual REALIZZ_ACQUISTO_SERVIZI_FORMAZIONE Clone()
        {
            return ((REALIZZ_ACQUISTO_SERVIZI_FORMAZIONE)(this.MemberwiseClone()));
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.81.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public enum REALIZZ_ACQUISTO_SERVIZI_FORMAZIONETipo_ind_area_rifer
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("01")]
        Item01,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("02")]
        Item02,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("03")]
        Item03,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("04")]
        Item04,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("05")]
        Item05,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.81.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = false)]
    public partial class REALIZZ_ACQUISTO_SERVIZI_RICERCA
    {

        private string _denominazione_progetto;

        private string _ente;

        //private REALIZZ_ACQUISTO_SERVIZI_RICERCATipo_ind_area_rifer _tipo_ind_area_rifer;
        private string _tipo_ind_area_rifer;

        private string _ind_area_rifer;

        private string _descrizione_intervento;

        private string _strum_progr;

        private string _desc_strum_progr;

        private string _altre_informazioni;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string denominazione_progetto
        {
            get
            {
                return this._denominazione_progetto;
            }
            set
            {
                this._denominazione_progetto = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ente
        {
            get
            {
                return this._ente;
            }
            set
            {
                this._ente = value;
            }
        }

        //[System.Xml.Serialization.XmlAttributeAttribute()]
        //public REALIZZ_ACQUISTO_SERVIZI_RICERCATipo_ind_area_rifer tipo_ind_area_rifer
        //{
        //    get
        //    {
        //        return this._tipo_ind_area_rifer;
        //    }
        //    set
        //    {
        //        this._tipo_ind_area_rifer = value;
        //    }
        //}
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string tipo_ind_area_rifer
        {
            get
            {
                return this._tipo_ind_area_rifer;
            }
            set
            {
                this._tipo_ind_area_rifer = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ind_area_rifer
        {
            get
            {
                return this._ind_area_rifer;
            }
            set
            {
                this._ind_area_rifer = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string descrizione_intervento
        {
            get
            {
                return this._descrizione_intervento;
            }
            set
            {
                this._descrizione_intervento = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string strum_progr
        {
            get
            {
                return this._strum_progr;
            }
            set
            {
                this._strum_progr = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string desc_strum_progr
        {
            get
            {
                return this._desc_strum_progr;
            }
            set
            {
                this._desc_strum_progr = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string altre_informazioni
        {
            get
            {
                return this._altre_informazioni;
            }
            set
            {
                this._altre_informazioni = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(REALIZZ_ACQUISTO_SERVIZI_RICERCA));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current REALIZZ_ACQUISTO_SERVIZI_RICERCA object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an REALIZZ_ACQUISTO_SERVIZI_RICERCA object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output REALIZZ_ACQUISTO_SERVIZI_RICERCA object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out REALIZZ_ACQUISTO_SERVIZI_RICERCA obj, out System.Exception exception)
        {
            exception = null;
            obj = default(REALIZZ_ACQUISTO_SERVIZI_RICERCA);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out REALIZZ_ACQUISTO_SERVIZI_RICERCA obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static REALIZZ_ACQUISTO_SERVIZI_RICERCA Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((REALIZZ_ACQUISTO_SERVIZI_RICERCA)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static REALIZZ_ACQUISTO_SERVIZI_RICERCA Deserialize(System.IO.Stream s)
        {
            return ((REALIZZ_ACQUISTO_SERVIZI_RICERCA)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current REALIZZ_ACQUISTO_SERVIZI_RICERCA object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an REALIZZ_ACQUISTO_SERVIZI_RICERCA object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output REALIZZ_ACQUISTO_SERVIZI_RICERCA object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out REALIZZ_ACQUISTO_SERVIZI_RICERCA obj, out System.Exception exception)
        {
            exception = null;
            obj = default(REALIZZ_ACQUISTO_SERVIZI_RICERCA);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out REALIZZ_ACQUISTO_SERVIZI_RICERCA obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static REALIZZ_ACQUISTO_SERVIZI_RICERCA LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Clone method
        /// <summary>
        /// Create a clone of this REALIZZ_ACQUISTO_SERVIZI_RICERCA object
        /// </summary>
        public virtual REALIZZ_ACQUISTO_SERVIZI_RICERCA Clone()
        {
            return ((REALIZZ_ACQUISTO_SERVIZI_RICERCA)(this.MemberwiseClone()));
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.81.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public enum REALIZZ_ACQUISTO_SERVIZI_RICERCATipo_ind_area_rifer
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("01")]
        Item01,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("02")]
        Item02,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("03")]
        Item03,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("04")]
        Item04,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("05")]
        Item05,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.81.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = false)]
    public partial class CONCESSIONE_INCENTIVI_UNITA_PRODUTTIVE
    {

        private string _denominazione_impresa_stabilimento;

        private string _partita_iva;

        private string _denominazione_impresa_stabilimento_prec;

        //private CONCESSIONE_INCENTIVI_UNITA_PRODUTTIVETipo_ind_area_rifer _tipo_ind_area_rifer;
        private string _tipo_ind_area_rifer;

        private string _ind_area_rifer;

        private string _descrizione_intervento;

        private string _strum_progr;

        private string _desc_strum_progr;

        private string _altre_informazioni;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string denominazione_impresa_stabilimento
        {
            get
            {
                return this._denominazione_impresa_stabilimento;
            }
            set
            {
                this._denominazione_impresa_stabilimento = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string partita_iva
        {
            get
            {
                return this._partita_iva;
            }
            set
            {
                this._partita_iva = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string denominazione_impresa_stabilimento_prec
        {
            get
            {
                return this._denominazione_impresa_stabilimento_prec;
            }
            set
            {
                this._denominazione_impresa_stabilimento_prec = value;
            }
        }

        //[System.Xml.Serialization.XmlAttributeAttribute()]
        //public CONCESSIONE_INCENTIVI_UNITA_PRODUTTIVETipo_ind_area_rifer tipo_ind_area_rifer
        //{
        //    get
        //    {
        //        return this._tipo_ind_area_rifer;
        //    }
        //    set
        //    {
        //        this._tipo_ind_area_rifer = value;
        //    }
        //}
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string tipo_ind_area_rifer
        {
            get
            {
                return this._tipo_ind_area_rifer;
            }
            set
            {
                this._tipo_ind_area_rifer = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ind_area_rifer
        {
            get
            {
                return this._ind_area_rifer;
            }
            set
            {
                this._ind_area_rifer = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string descrizione_intervento
        {
            get
            {
                return this._descrizione_intervento;
            }
            set
            {
                this._descrizione_intervento = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string strum_progr
        {
            get
            {
                return this._strum_progr;
            }
            set
            {
                this._strum_progr = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string desc_strum_progr
        {
            get
            {
                return this._desc_strum_progr;
            }
            set
            {
                this._desc_strum_progr = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string altre_informazioni
        {
            get
            {
                return this._altre_informazioni;
            }
            set
            {
                this._altre_informazioni = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(CONCESSIONE_INCENTIVI_UNITA_PRODUTTIVE));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current CONCESSIONE_INCENTIVI_UNITA_PRODUTTIVE object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an CONCESSIONE_INCENTIVI_UNITA_PRODUTTIVE object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output CONCESSIONE_INCENTIVI_UNITA_PRODUTTIVE object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out CONCESSIONE_INCENTIVI_UNITA_PRODUTTIVE obj, out System.Exception exception)
        {
            exception = null;
            obj = default(CONCESSIONE_INCENTIVI_UNITA_PRODUTTIVE);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out CONCESSIONE_INCENTIVI_UNITA_PRODUTTIVE obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static CONCESSIONE_INCENTIVI_UNITA_PRODUTTIVE Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((CONCESSIONE_INCENTIVI_UNITA_PRODUTTIVE)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static CONCESSIONE_INCENTIVI_UNITA_PRODUTTIVE Deserialize(System.IO.Stream s)
        {
            return ((CONCESSIONE_INCENTIVI_UNITA_PRODUTTIVE)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current CONCESSIONE_INCENTIVI_UNITA_PRODUTTIVE object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an CONCESSIONE_INCENTIVI_UNITA_PRODUTTIVE object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output CONCESSIONE_INCENTIVI_UNITA_PRODUTTIVE object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out CONCESSIONE_INCENTIVI_UNITA_PRODUTTIVE obj, out System.Exception exception)
        {
            exception = null;
            obj = default(CONCESSIONE_INCENTIVI_UNITA_PRODUTTIVE);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out CONCESSIONE_INCENTIVI_UNITA_PRODUTTIVE obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static CONCESSIONE_INCENTIVI_UNITA_PRODUTTIVE LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Clone method
        /// <summary>
        /// Create a clone of this CONCESSIONE_INCENTIVI_UNITA_PRODUTTIVE object
        /// </summary>
        public virtual CONCESSIONE_INCENTIVI_UNITA_PRODUTTIVE Clone()
        {
            return ((CONCESSIONE_INCENTIVI_UNITA_PRODUTTIVE)(this.MemberwiseClone()));
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.81.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public enum CONCESSIONE_INCENTIVI_UNITA_PRODUTTIVETipo_ind_area_rifer
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("01")]
        Item01,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("02")]
        Item02,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("03")]
        Item03,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("04")]
        Item04,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("05")]
        Item05,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.81.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = false)]
    public partial class LAVORI_PUBBLICI
    {

        private string _nome_str_infrastr;

        private LAVORI_PUBBLICIStr_infrastr_unica _str_infrastr_unica;

        //private LAVORI_PUBBLICITipo_ind_area_rifer _tipo_ind_area_rifer;
        private string _tipo_ind_area_rifer;

        private string _ind_area_rifer;

        private string _descrizione_intervento;

        private string _strum_progr;

        private string _desc_strum_progr;

        private string _altre_informazioni;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string nome_str_infrastr
        {
            get
            {
                return this._nome_str_infrastr;
            }
            set
            {
                this._nome_str_infrastr = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public LAVORI_PUBBLICIStr_infrastr_unica str_infrastr_unica
        {
            get
            {
                return this._str_infrastr_unica;
            }
            set
            {
                this._str_infrastr_unica = value;
            }
        }

        //[System.Xml.Serialization.XmlAttributeAttribute()]
        //public LAVORI_PUBBLICITipo_ind_area_rifer tipo_ind_area_rifer
        //{
        //    get
        //    {
        //        return this._tipo_ind_area_rifer;
        //    }
        //    set
        //    {
        //        this._tipo_ind_area_rifer = value;
        //    }
        //}
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string tipo_ind_area_rifer
        {
            get
            {
                return this._tipo_ind_area_rifer;
            }
            set
            {
                this._tipo_ind_area_rifer = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ind_area_rifer
        {
            get
            {
                return this._ind_area_rifer;
            }
            set
            {
                this._ind_area_rifer = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string descrizione_intervento
        {
            get
            {
                return this._descrizione_intervento;
            }
            set
            {
                this._descrizione_intervento = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string strum_progr
        {
            get
            {
                return this._strum_progr;
            }
            set
            {
                this._strum_progr = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string desc_strum_progr
        {
            get
            {
                return this._desc_strum_progr;
            }
            set
            {
                this._desc_strum_progr = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string altre_informazioni
        {
            get
            {
                return this._altre_informazioni;
            }
            set
            {
                this._altre_informazioni = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(LAVORI_PUBBLICI));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current LAVORI_PUBBLICI object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an LAVORI_PUBBLICI object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output LAVORI_PUBBLICI object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out LAVORI_PUBBLICI obj, out System.Exception exception)
        {
            exception = null;
            obj = default(LAVORI_PUBBLICI);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out LAVORI_PUBBLICI obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static LAVORI_PUBBLICI Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((LAVORI_PUBBLICI)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static LAVORI_PUBBLICI Deserialize(System.IO.Stream s)
        {
            return ((LAVORI_PUBBLICI)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current LAVORI_PUBBLICI object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an LAVORI_PUBBLICI object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output LAVORI_PUBBLICI object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out LAVORI_PUBBLICI obj, out System.Exception exception)
        {
            exception = null;
            obj = default(LAVORI_PUBBLICI);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out LAVORI_PUBBLICI obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static LAVORI_PUBBLICI LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Clone method
        /// <summary>
        /// Create a clone of this LAVORI_PUBBLICI object
        /// </summary>
        public virtual LAVORI_PUBBLICI Clone()
        {
            return ((LAVORI_PUBBLICI)(this.MemberwiseClone()));
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.81.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public enum LAVORI_PUBBLICIStr_infrastr_unica
    {

        /// <remarks/>
        SI,

        /// <remarks/>
        NO,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.81.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public enum LAVORI_PUBBLICITipo_ind_area_rifer
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("01")]
        Item01,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("02")]
        Item02,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("03")]
        Item03,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("04")]
        Item04,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("05")]
        Item05,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.81.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = false)]
    public partial class DESCRIZIONE
    {

        private object _item;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute("ACQUISTO_BENI", typeof(ACQUISTO_BENI))]
        [System.Xml.Serialization.XmlElementAttribute("CONCESSIONE_CONTRIBUTI_NO_UNITA_PRODUTTIVE", typeof(CONCESSIONE_CONTRIBUTI_NO_UNITA_PRODUTTIVE))]
        [System.Xml.Serialization.XmlElementAttribute("CONCESSIONE_INCENTIVI_UNITA_PRODUTTIVE", typeof(CONCESSIONE_INCENTIVI_UNITA_PRODUTTIVE))]
        [System.Xml.Serialization.XmlElementAttribute("CUP_CUMULATIVO", typeof(CUP_CUMULATIVO))]
        [System.Xml.Serialization.XmlElementAttribute("LAVORI_PUBBLICI", typeof(LAVORI_PUBBLICI))]
        [System.Xml.Serialization.XmlElementAttribute("PARTECIP_AZIONARIE_CONFERIM_CAPITALE", typeof(PARTECIP_AZIONARIE_CONFERIM_CAPITALE))]
        [System.Xml.Serialization.XmlElementAttribute("REALIZZ_ACQUISTO_SERVIZI_FORMAZIONE", typeof(REALIZZ_ACQUISTO_SERVIZI_FORMAZIONE))]
        [System.Xml.Serialization.XmlElementAttribute("REALIZZ_ACQUISTO_SERVIZI_NO_FORMAZIONE_RICERCA", typeof(REALIZZ_ACQUISTO_SERVIZI_NO_FORMAZIONE_RICERCA))]
        [System.Xml.Serialization.XmlElementAttribute("REALIZZ_ACQUISTO_SERVIZI_RICERCA", typeof(REALIZZ_ACQUISTO_SERVIZI_RICERCA))]
        public object Item
        {
            get
            {
                return this._item;
            }
            set
            {
                this._item = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(DESCRIZIONE));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current DESCRIZIONE object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an DESCRIZIONE object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output DESCRIZIONE object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out DESCRIZIONE obj, out System.Exception exception)
        {
            exception = null;
            obj = default(DESCRIZIONE);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out DESCRIZIONE obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static DESCRIZIONE Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((DESCRIZIONE)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static DESCRIZIONE Deserialize(System.IO.Stream s)
        {
            return ((DESCRIZIONE)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current DESCRIZIONE object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an DESCRIZIONE object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output DESCRIZIONE object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out DESCRIZIONE obj, out System.Exception exception)
        {
            exception = null;
            obj = default(DESCRIZIONE);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out DESCRIZIONE obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static DESCRIZIONE LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Clone method
        /// <summary>
        /// Create a clone of this DESCRIZIONE object
        /// </summary>
        public virtual DESCRIZIONE Clone()
        {
            return ((DESCRIZIONE)(this.MemberwiseClone()));
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.81.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = false)]
    public partial class LOCALIZZAZIONE
    {

        private string _stato;

        private string _regione;

        private string _provincia;

        private string _comune;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string stato
        {
            get
            {
                return this._stato;
            }
            set
            {
                this._stato = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string regione
        {
            get
            {
                return this._regione;
            }
            set
            {
                this._regione = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string provincia
        {
            get
            {
                return this._provincia;
            }
            set
            {
                this._provincia = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string comune
        {
            get
            {
                return this._comune;
            }
            set
            {
                this._comune = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(LOCALIZZAZIONE));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current LOCALIZZAZIONE object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an LOCALIZZAZIONE object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output LOCALIZZAZIONE object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out LOCALIZZAZIONE obj, out System.Exception exception)
        {
            exception = null;
            obj = default(LOCALIZZAZIONE);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out LOCALIZZAZIONE obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static LOCALIZZAZIONE Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((LOCALIZZAZIONE)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static LOCALIZZAZIONE Deserialize(System.IO.Stream s)
        {
            return ((LOCALIZZAZIONE)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current LOCALIZZAZIONE object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an LOCALIZZAZIONE object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output LOCALIZZAZIONE object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out LOCALIZZAZIONE obj, out System.Exception exception)
        {
            exception = null;
            obj = default(LOCALIZZAZIONE);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out LOCALIZZAZIONE obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static LOCALIZZAZIONE LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Clone method
        /// <summary>
        /// Create a clone of this LOCALIZZAZIONE object
        /// </summary>
        public virtual LOCALIZZAZIONE Clone()
        {
            return ((LOCALIZZAZIONE)(this.MemberwiseClone()));
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.81.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = false)]
    public partial class MASTER
    {

        private string _cup_master;

        private string _id_master;

        private string _ragioni_collegamento;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cup_master
        {
            get
            {
                return this._cup_master;
            }
            set
            {
                this._cup_master = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string id_master
        {
            get
            {
                return this._id_master;
            }
            set
            {
                this._id_master = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ragioni_collegamento
        {
            get
            {
                return this._ragioni_collegamento;
            }
            set
            {
                this._ragioni_collegamento = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(MASTER));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current MASTER object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an MASTER object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output MASTER object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out MASTER obj, out System.Exception exception)
        {
            exception = null;
            obj = default(MASTER);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out MASTER obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static MASTER Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((MASTER)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static MASTER Deserialize(System.IO.Stream s)
        {
            return ((MASTER)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current MASTER object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an MASTER object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output MASTER object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out MASTER obj, out System.Exception exception)
        {
            exception = null;
            obj = default(MASTER);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out MASTER obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static MASTER LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Clone method
        /// <summary>
        /// Create a clone of this MASTER object
        /// </summary>
        public virtual MASTER Clone()
        {
            return ((MASTER)(this.MemberwiseClone()));
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.81.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = false)]
    public partial class DATI_GENERALI_PROGETTO
    {

        private string _anno_decisione;

        //private DATI_GENERALI_PROGETTOCumulativo _cumulativo;
        private string _cumulativo;

        private string _codifica_locale;

        private string _natura;

        private string _tipologia;

        private string _settore;

        private string _sottosettore;

        private string _categoria;

        private string _cpv1;

        private string _cpv2;

        private string _cpv3;

        private string _cpv4;

        private string _cpv5;

        private string _cpv6;

        private string _cpv7;

        private static XmlSerializer serializer;

        //public DATI_GENERALI_PROGETTO()
        //{
        //    this._cumulativo = DATI_GENERALI_PROGETTOCumulativo.N;
        //}
        public DATI_GENERALI_PROGETTO()
        {
            this._cumulativo = "N";
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string anno_decisione
        {
            get
            {
                return this._anno_decisione;
            }
            set
            {
                this._anno_decisione = value;
            }
        }

        //[System.Xml.Serialization.XmlAttributeAttribute()]
        //[System.ComponentModel.DefaultValueAttribute(DATI_GENERALI_PROGETTOCumulativo.N)]
        //public DATI_GENERALI_PROGETTOCumulativo cumulativo
        //{
        //    get
        //    {
        //        return this._cumulativo;
        //    }
        //    set
        //    {
        //        this._cumulativo = value;
        //    }
        //}
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cumulativo
        {
            get
            {
                return this._cumulativo;
            }
            set
            {
                this._cumulativo = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string codifica_locale
        {
            get
            {
                return this._codifica_locale;
            }
            set
            {
                this._codifica_locale = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string natura
        {
            get
            {
                return this._natura;
            }
            set
            {
                this._natura = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string tipologia
        {
            get
            {
                return this._tipologia;
            }
            set
            {
                this._tipologia = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string settore
        {
            get
            {
                return this._settore;
            }
            set
            {
                this._settore = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string sottosettore
        {
            get
            {
                return this._sottosettore;
            }
            set
            {
                this._sottosettore = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string categoria
        {
            get
            {
                return this._categoria;
            }
            set
            {
                this._categoria = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cpv1
        {
            get
            {
                return this._cpv1;
            }
            set
            {
                this._cpv1 = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cpv2
        {
            get
            {
                return this._cpv2;
            }
            set
            {
                this._cpv2 = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cpv3
        {
            get
            {
                return this._cpv3;
            }
            set
            {
                this._cpv3 = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cpv4
        {
            get
            {
                return this._cpv4;
            }
            set
            {
                this._cpv4 = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cpv5
        {
            get
            {
                return this._cpv5;
            }
            set
            {
                this._cpv5 = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cpv6
        {
            get
            {
                return this._cpv6;
            }
            set
            {
                this._cpv6 = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cpv7
        {
            get
            {
                return this._cpv7;
            }
            set
            {
                this._cpv7 = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(DATI_GENERALI_PROGETTO));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current DATI_GENERALI_PROGETTO object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an DATI_GENERALI_PROGETTO object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output DATI_GENERALI_PROGETTO object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out DATI_GENERALI_PROGETTO obj, out System.Exception exception)
        {
            exception = null;
            obj = default(DATI_GENERALI_PROGETTO);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out DATI_GENERALI_PROGETTO obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static DATI_GENERALI_PROGETTO Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((DATI_GENERALI_PROGETTO)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static DATI_GENERALI_PROGETTO Deserialize(System.IO.Stream s)
        {
            return ((DATI_GENERALI_PROGETTO)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current DATI_GENERALI_PROGETTO object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an DATI_GENERALI_PROGETTO object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output DATI_GENERALI_PROGETTO object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out DATI_GENERALI_PROGETTO obj, out System.Exception exception)
        {
            exception = null;
            obj = default(DATI_GENERALI_PROGETTO);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out DATI_GENERALI_PROGETTO obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static DATI_GENERALI_PROGETTO LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Clone method
        /// <summary>
        /// Create a clone of this DATI_GENERALI_PROGETTO object
        /// </summary>
        public virtual DATI_GENERALI_PROGETTO Clone()
        {
            return ((DATI_GENERALI_PROGETTO)(this.MemberwiseClone()));
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.81.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public enum DATI_GENERALI_PROGETTOCumulativo
    {

        /// <remarks/>
        N,

        /// <remarks/>
        S,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.81.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = false)]
    public partial class CUP_GENERAZIONE
    {

        private DATI_GENERALI_PROGETTO _dATI_GENERALI_PROGETTO;

        private MASTER _mASTER;

        private List<LOCALIZZAZIONE> _lOCALIZZAZIONE;

        private DESCRIZIONE _dESCRIZIONE;

        private ATTIV_ECONOMICA_BENEFICIARIO_ATECO_2007 _aTTIV_ECONOMICA_BENEFICIARIO_ATECO_2007;

        private FINANZIAMENTO _fINANZIAMENTO;

        private string _soggetto_titolare;

        private string _uo_soggetto_titolare;

        private string _user_titolare;

        private string _id_progetto;

        private static XmlSerializer serializer;

        public CUP_GENERAZIONE()
        {
            this._fINANZIAMENTO = new FINANZIAMENTO();
            this._aTTIV_ECONOMICA_BENEFICIARIO_ATECO_2007 = new ATTIV_ECONOMICA_BENEFICIARIO_ATECO_2007();
            this._dESCRIZIONE = new DESCRIZIONE();
            this._lOCALIZZAZIONE = new List<LOCALIZZAZIONE>();
            this._mASTER = new MASTER();
            this._dATI_GENERALI_PROGETTO = new DATI_GENERALI_PROGETTO();
        }

        public DATI_GENERALI_PROGETTO DATI_GENERALI_PROGETTO
        {
            get
            {
                return this._dATI_GENERALI_PROGETTO;
            }
            set
            {
                this._dATI_GENERALI_PROGETTO = value;
            }
        }

        public MASTER MASTER
        {
            get
            {
                return this._mASTER;
            }
            set
            {
                this._mASTER = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("LOCALIZZAZIONE")]
        public List<LOCALIZZAZIONE> LOCALIZZAZIONE
        {
            get
            {
                return this._lOCALIZZAZIONE;
            }
            set
            {
                this._lOCALIZZAZIONE = value;
            }
        }

        public DESCRIZIONE DESCRIZIONE
        {
            get
            {
                return this._dESCRIZIONE;
            }
            set
            {
                this._dESCRIZIONE = value;
            }
        }

        public ATTIV_ECONOMICA_BENEFICIARIO_ATECO_2007 ATTIV_ECONOMICA_BENEFICIARIO_ATECO_2007
        {
            get
            {
                return this._aTTIV_ECONOMICA_BENEFICIARIO_ATECO_2007;
            }
            set
            {
                this._aTTIV_ECONOMICA_BENEFICIARIO_ATECO_2007 = value;
            }
        }

        public FINANZIAMENTO FINANZIAMENTO
        {
            get
            {
                return this._fINANZIAMENTO;
            }
            set
            {
                this._fINANZIAMENTO = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string soggetto_titolare
        {
            get
            {
                return this._soggetto_titolare;
            }
            set
            {
                this._soggetto_titolare = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string uo_soggetto_titolare
        {
            get
            {
                return this._uo_soggetto_titolare;
            }
            set
            {
                this._uo_soggetto_titolare = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string user_titolare
        {
            get
            {
                return this._user_titolare;
            }
            set
            {
                this._user_titolare = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string id_progetto
        {
            get
            {
                return this._id_progetto;
            }
            set
            {
                this._id_progetto = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(CUP_GENERAZIONE));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether LOCALIZZAZIONE should be serialized
        /// </summary>
        public virtual bool ShouldSerializeLOCALIZZAZIONE()
        {
            return LOCALIZZAZIONE != null && LOCALIZZAZIONE.Count > 0;
        }

        /// <summary>
        /// Test whether DATI_GENERALI_PROGETTO should be serialized
        /// </summary>
        public virtual bool ShouldSerializeDATI_GENERALI_PROGETTO()
        {
            return (_dATI_GENERALI_PROGETTO != null);
        }

        /// <summary>
        /// Test whether MASTER should be serialized
        /// </summary>
        public virtual bool ShouldSerializeMASTER()
        {
            return (_mASTER != null);
        }

        /// <summary>
        /// Test whether DESCRIZIONE should be serialized
        /// </summary>
        public virtual bool ShouldSerializeDESCRIZIONE()
        {
            return (_dESCRIZIONE != null);
        }

        /// <summary>
        /// Test whether ATTIV_ECONOMICA_BENEFICIARIO_ATECO_2007 should be serialized
        /// </summary>
        public virtual bool ShouldSerializeATTIV_ECONOMICA_BENEFICIARIO_ATECO_2007()
        {
            return (_aTTIV_ECONOMICA_BENEFICIARIO_ATECO_2007 != null);
        }

        /// <summary>
        /// Test whether FINANZIAMENTO should be serialized
        /// </summary>
        public virtual bool ShouldSerializeFINANZIAMENTO()
        {
            return (_fINANZIAMENTO != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current CUP_GENERAZIONE object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an CUP_GENERAZIONE object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output CUP_GENERAZIONE object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out CUP_GENERAZIONE obj, out System.Exception exception)
        {
            exception = null;
            obj = default(CUP_GENERAZIONE);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out CUP_GENERAZIONE obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static CUP_GENERAZIONE Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((CUP_GENERAZIONE)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static CUP_GENERAZIONE Deserialize(System.IO.Stream s)
        {
            return ((CUP_GENERAZIONE)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current CUP_GENERAZIONE object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an CUP_GENERAZIONE object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output CUP_GENERAZIONE object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out CUP_GENERAZIONE obj, out System.Exception exception)
        {
            exception = null;
            obj = default(CUP_GENERAZIONE);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out CUP_GENERAZIONE obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static CUP_GENERAZIONE LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Clone method
        /// <summary>
        /// Create a clone of this CUP_GENERAZIONE object
        /// </summary>
        public virtual CUP_GENERAZIONE Clone()
        {
            return ((CUP_GENERAZIONE)(this.MemberwiseClone()));
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.81.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = false)]
    public partial class PASSWORD
    {

        private List<string> _text;

        private static XmlSerializer serializer;

        public PASSWORD()
        {
            this._text = new List<string>();
        }

        [System.Xml.Serialization.XmlTextAttribute()]
        public List<string> Text
        {
            get
            {
                return this._text;
            }
            set
            {
                this._text = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(PASSWORD));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Text should be serialized
        /// </summary>
        public virtual bool ShouldSerializeText()
        {
            return Text != null && Text.Count > 0;
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current PASSWORD object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an PASSWORD object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output PASSWORD object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out PASSWORD obj, out System.Exception exception)
        {
            exception = null;
            obj = default(PASSWORD);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out PASSWORD obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static PASSWORD Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((PASSWORD)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static PASSWORD Deserialize(System.IO.Stream s)
        {
            return ((PASSWORD)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current PASSWORD object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an PASSWORD object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output PASSWORD object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out PASSWORD obj, out System.Exception exception)
        {
            exception = null;
            obj = default(PASSWORD);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out PASSWORD obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static PASSWORD LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Clone method
        /// <summary>
        /// Create a clone of this PASSWORD object
        /// </summary>
        public virtual PASSWORD Clone()
        {
            return ((PASSWORD)(this.MemberwiseClone()));
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.81.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = false)]
    public partial class USER
    {

        private List<string> _text;

        private static XmlSerializer serializer;

        public USER()
        {
            this._text = new List<string>();
        }

        [System.Xml.Serialization.XmlTextAttribute()]
        public List<string> Text
        {
            get
            {
                return this._text;
            }
            set
            {
                this._text = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(USER));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Text should be serialized
        /// </summary>
        public virtual bool ShouldSerializeText()
        {
            return Text != null && Text.Count > 0;
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current USER object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an USER object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output USER object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out USER obj, out System.Exception exception)
        {
            exception = null;
            obj = default(USER);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out USER obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static USER Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((USER)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static USER Deserialize(System.IO.Stream s)
        {
            return ((USER)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current USER object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an USER object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output USER object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out USER obj, out System.Exception exception)
        {
            exception = null;
            obj = default(USER);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out USER obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static USER LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Clone method
        /// <summary>
        /// Create a clone of this USER object
        /// </summary>
        public virtual USER Clone()
        {
            return ((USER)(this.MemberwiseClone()));
        }
        #endregion
    }
}
#pragma warning restore

