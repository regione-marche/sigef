using System;
using System.Collections.Generic;
using System.Text;

namespace SiarLibrary.NotAutogeneratedClasses
{
    public class RiepilogoDomandePagamentoCollectionProvider
    {
        public RiepilogoDomandePagamentoCollectionProvider() { }

        DbProvider db = new DbProvider();
        System.Data.IDbCommand cmd;
        public RiepilogoDomandePagamentoCollection Find(NullTypes.IntNT idProgetto)
        {
            RiepilogoDomandePagamentoCollection riepilogo = new RiepilogoDomandePagamentoCollection();
            cmd = db.GetCommand();
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.CommandText = "SpRiepilogoDomandePagamento";
            if (idProgetto != null) cmd.Parameters.Add(new System.Data.SqlClient.SqlParameter("ID_PROGETTO", idProgetto.Value));
            db.InitDatareader(cmd);
            while (db.DataReader.Read())
            {
                riepilogo.Add(new RiepilogoDomandePagamento(db));
            }
            db.Close();
            return riepilogo;
        }

        public RiepilogoDomandePagamentoCollection Find(NullTypes.IntNT idProgetto, NullTypes.IntNT idDomandaPagamento)
        {
            RiepilogoDomandePagamentoCollection riepilogo = new RiepilogoDomandePagamentoCollection();
            cmd = db.GetCommand();
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.CommandText = "SpRiepilogoSingolaDomandaPagamento";
            if (idProgetto != null) 
                cmd.Parameters.Add(new System.Data.SqlClient.SqlParameter("ID_PROGETTO", idProgetto.Value));
            if (idDomandaPagamento != null)
                cmd.Parameters.Add(new System.Data.SqlClient.SqlParameter("ID_DOMANDA", idDomandaPagamento.Value));
            db.InitDatareader(cmd);
            while (db.DataReader.Read())
            {
                riepilogo.Add(new RiepilogoDomandePagamento(db));
            }
            db.Close();
            return riepilogo;
        }

        public RiepilogoDomandePagamentoCollection GetRiepilogoDomandePagamentoDownloadMassivo(NullTypes.IntNT idProgetto, NullTypes.StringNT cfUtente)
        {
            RiepilogoDomandePagamentoCollection riepilogo = new RiepilogoDomandePagamentoCollection();
            cmd = db.GetCommand();
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.CommandText = "SpRiepilogoDomandePagamentoDownloadMassivo";
            if (idProgetto != null) cmd.Parameters.Add(new System.Data.SqlClient.SqlParameter("ID_PROGETTO", idProgetto.Value));
            if (cfUtente != null) cmd.Parameters.Add(new System.Data.SqlClient.SqlParameter("CF_UTENTE", cfUtente.Value));
            db.InitDatareader(cmd);
            while (db.DataReader.Read())
            {
                RiepilogoDomandePagamento r = new RiepilogoDomandePagamento(db);
                r.AdditionalAttributes.Add("CF_OPERATORE", new NullTypes.StringNT(db.DataReader["CF_OPERATORE"]));
                r.AdditionalAttributes.Add("ESEGUITO", new NullTypes.BoolNT(db.DataReader["ESEGUITO"]));
                r.AdditionalAttributes.Add("ID_TICKET", new NullTypes.IntNT(db.DataReader["ID_TICKET"]));
                r.AdditionalAttributes.Add("DIMENSIONE_FILE", new NullTypes.DecimalNT(db.DataReader["DIMENSIONE_FILE"]));
                r.AdditionalAttributes.Add("DATA_FINE_ESTRAZIONE", new NullTypes.DatetimeNT(db.DataReader["DATA_FINE_ESTRAZIONE"]));

                //riepilogo.Add(new RiepilogoDomandePagamento(db));
                riepilogo.Add(r);
            }
            db.Close();
            return riepilogo;
        }
    }

    public class RiepilogoDomandePagamento : BaseObject
    {
        private NullTypes.StringNT _CodTipo;
        private NullTypes.StringNT _Descrizione;
        private NullTypes.IntNT _Numero;
        private NullTypes.DecimalNT _QuotaMin;
        private NullTypes.DecimalNT _QuotaMax;
        private NullTypes.DecimalNT _ImportoMin;
        private NullTypes.DecimalNT _ImportoMax;
        private NullTypes.StringNT _CodFase;
        private NullTypes.StringNT _Fase;
        private NullTypes.IntNT _Ordine;
        private NullTypes.IntNT _IdDomandaPagamento;
        private NullTypes.IntNT _IdProgetto;
        private NullTypes.DatetimeNT _DataInserimento;
        private NullTypes.StringNT _Operatore;
        private NullTypes.StringNT _cfOperatore;
        private NullTypes.DatetimeNT _DataModifica;
        private NullTypes.StringNT _CodEnte;
        private NullTypes.StringNT _Segnatura;
        private NullTypes.DecimalNT _ImportoRichiesto;
        private NullTypes.DecimalNT _ImportoAmmesso;
        private NullTypes.DecimalNT _ContributoRichiesto;
        private NullTypes.DecimalNT _ContributoAmmesso;
        private NullTypes.BoolNT _Approvata;
        private NullTypes.StringNT _SegnaturaApprovazione;
        private NullTypes.StringNT _SegnaturaSecondaApprovazione;
        private NullTypes.BoolNT _SelezionataXRevisione;
        private NullTypes.BoolNT _ApprovataRevisione;
        private NullTypes.StringNT _SegnaturaRevisione;
        private NullTypes.StringNT _SegnaturaSecondaRevisione;
        private NullTypes.BoolNT _Annullata;
        private NullTypes.StringNT _SegnaturaAnnullamento;
        private NullTypes.IntNT _NumeroEstrazioni;
        private NullTypes.BoolNT _RevisioneConclusa;

        public RiepilogoDomandePagamento() { }
        public RiepilogoDomandePagamento(DbProvider db)
        {
            CodTipo = new NullTypes.StringNT(db.DataReader["COD_TIPO"]);
            Descrizione = new NullTypes.StringNT(db.DataReader["DESCRIZIONE"]);
            Numero = new NullTypes.IntNT(db.DataReader["NUMERO"]);
            QuotaMin = new NullTypes.DecimalNT(db.DataReader["QUOTA_MIN"]);
            QuotaMax = new NullTypes.DecimalNT(db.DataReader["QUOTA_MAX"]);
            ImportoMin = new NullTypes.DecimalNT(db.DataReader["IMPORTO_MIN"]);
            ImportoMax = new NullTypes.DecimalNT(db.DataReader["IMPORTO_MAX"]);
            CodFase = new NullTypes.StringNT(db.DataReader["COD_FASE"]);
            Fase = new NullTypes.StringNT(db.DataReader["FASE"]);
            Ordine = new NullTypes.IntNT(db.DataReader["ORDINE"]);
            IdDomandaPagamento = new NullTypes.IntNT(db.DataReader["ID_DOMANDA_PAGAMENTO"]);
            IdProgetto = new NullTypes.IntNT(db.DataReader["ID_PROGETTO"]);
            DataInserimento = new NullTypes.DatetimeNT(db.DataReader["DATA_INSERIMENTO"]);
            Operatore = new NullTypes.StringNT(db.DataReader["OPERATORE"]);
            CfOperatore = new NullTypes.StringNT(db.DataReader["CF_OPERATORE"]);
            DataModifica = new NullTypes.DatetimeNT(db.DataReader["DATA_MODIFICA"]);
            CodEnte = new NullTypes.StringNT(db.DataReader["COD_ENTE"]);
            Segnatura = new NullTypes.StringNT(db.DataReader["SEGNATURA"]);
            ImportoRichiesto = new NullTypes.DecimalNT(db.DataReader["IMPORTO_RICHIESTO"]);
            ImportoAmmesso = new NullTypes.DecimalNT(db.DataReader["IMPORTO_AMMESSO"]);
            ContributoRichiesto = new NullTypes.DecimalNT(db.DataReader["CONTRIBUTO_RICHIESTO"]);
            ContributoAmmesso = new NullTypes.DecimalNT(db.DataReader["CONTRIBUTO_AMMESSO"]);
            Approvata = new SiarLibrary.NullTypes.BoolNT(db.DataReader["APPROVATA"]);
            SegnaturaApprovazione = new NullTypes.StringNT(db.DataReader["SEGNATURA_APPROVAZIONE"]);
            SegnaturaSecondaApprovazione = new NullTypes.StringNT(db.DataReader["SEGNATURA_SECONDA_APPROVAZIONE"]);
            SelezionataXRevisione = new SiarLibrary.NullTypes.BoolNT(db.DataReader["SELEZIONATA_X_REVISIONE"]);
            ApprovataRevisione = new SiarLibrary.NullTypes.BoolNT(db.DataReader["APPROVATA_REVISIONE"]);
            SegnaturaRevisione = new NullTypes.StringNT(db.DataReader["SEGNATURA_REVISIONE"]);
            SegnaturaSecondaRevisione = new NullTypes.StringNT(db.DataReader["SEGNATURA_SECONDA_REVISIONE"]);
            Annullata = new SiarLibrary.NullTypes.BoolNT(db.DataReader["ANNULLATA"]);
            SegnaturaAnnullamento = new NullTypes.StringNT(db.DataReader["SEGNATURA_ANNULLAMENTO"]);
            NumeroEstrazioni = new SiarLibrary.NullTypes.IntNT(db.DataReader["NUMERO_ESTRAZIONI"]);
            RevisioneConclusa = new SiarLibrary.NullTypes.BoolNT(db.DataReader["REVISIONE_CONCLUSA"]);
        }


        public NullTypes.StringNT CodTipo
        {
            get { return _CodTipo; }
            set { _CodTipo = value; }
        }

        public NullTypes.StringNT Descrizione
        {
            get { return _Descrizione; }
            set
            {
                _Descrizione = value;
            }
        }

        public NullTypes.IntNT Numero
        {
            get { return _Numero; }
            set
            {
                _Numero = value;
            }
        }

        public NullTypes.DecimalNT QuotaMin
        {
            get { return _QuotaMin; }
            set
            {
                _QuotaMin = value;
            }
        }
        public NullTypes.DecimalNT QuotaMax
        {
            get { return _QuotaMax; }
            set
            {
                _QuotaMax = value;
            }
        }

        public NullTypes.DecimalNT ImportoMin
        {
            get { return _ImportoMin; }
            set
            {
                _ImportoMin = value;
            }
        }

        public NullTypes.DecimalNT ImportoMax
        {
            get { return _ImportoMax; }
            set
            {
                _ImportoMax = value;
            }
        }

        public NullTypes.StringNT CodFase
        {
            get { return _CodFase; }
            set
            {
                _CodFase = value;
            }
        }

        public NullTypes.StringNT Fase
        {
            get { return _Fase; }
            set
            {
                _Fase = value;
            }
        }

        public NullTypes.IntNT Ordine
        {
            get { return _Ordine; }
            set
            {
                _Ordine = value;
            }
        }

        public NullTypes.IntNT IdDomandaPagamento
        {
            get { return _IdDomandaPagamento; }
            set
            {
                _IdDomandaPagamento = value;
            }
        }

        public NullTypes.IntNT IdProgetto
        {
            get { return _IdProgetto; }
            set
            {
                _IdProgetto = value;
            }
        }

        public NullTypes.DatetimeNT DataInserimento
        {
            get { return _DataInserimento; }
            set
            {
                _DataInserimento = value;

            }
        }

        public NullTypes.StringNT CfOperatore
        {
            get { return _cfOperatore; }
            set
            {
                _cfOperatore = value;
            }
        }

        public NullTypes.StringNT Operatore
        {
            get { return _Operatore; }
            set
            {
                _Operatore = value;
            }
        }

        public NullTypes.DatetimeNT DataModifica
        {
            get { return _DataModifica; }
            set
            {
                _DataModifica = value;
            }
        }

        public NullTypes.StringNT CodEnte
        {
            get { return _CodEnte; }
            set
            {
                _CodEnte = value;
            }
        }

        public NullTypes.StringNT Segnatura
        {
            get { return _Segnatura; }
            set
            {
                _Segnatura = value;
            }
        }

        public NullTypes.DecimalNT ImportoRichiesto
        {
            get { return _ImportoRichiesto; }
            set
            {
                _ImportoRichiesto = value;
            }
        }

        public NullTypes.DecimalNT ImportoAmmesso
        {
            get { return _ImportoAmmesso; }
            set
            {
                _ImportoAmmesso = value;
            }
        }

        public NullTypes.DecimalNT ContributoRichiesto
        {
            get { return _ContributoRichiesto; }
            set
            {
                _ContributoRichiesto = value;
            }
        }

        public NullTypes.DecimalNT ContributoAmmesso
        {
            get { return _ContributoAmmesso; }
            set
            {
                _ContributoAmmesso = value;
            }
        }


        public NullTypes.BoolNT Approvata
        {
            get { return _Approvata; }
            set
            {
                _Approvata = value;
            }
        }

        public NullTypes.StringNT SegnaturaApprovazione
        {
            get { return _SegnaturaApprovazione; }
            set
            {
                _SegnaturaApprovazione = value;
            }
        }

        public NullTypes.StringNT SegnaturaSecondaApprovazione
        {
            get { return _SegnaturaSecondaApprovazione; }
            set
            {
                _SegnaturaSecondaApprovazione = value;
            }
        }

        public NullTypes.BoolNT SelezionataXRevisione
        {
            get { return _SelezionataXRevisione; }
            set
            {
                _SelezionataXRevisione = value;
            }
        }

        public NullTypes.BoolNT ApprovataRevisione
        {
            get { return _ApprovataRevisione; }
            set
            {
                _ApprovataRevisione = value;
            }
        }

        public NullTypes.StringNT SegnaturaRevisione
        {
            get { return _SegnaturaRevisione; }
            set
            {
                _SegnaturaRevisione = value;
            }
        }

        public NullTypes.StringNT SegnaturaSecondaRevisione
        {
            get { return _SegnaturaSecondaRevisione; }
            set
            {
                _SegnaturaSecondaRevisione = value;
            }
        }

        public NullTypes.BoolNT Annullata
        {
            get { return _Annullata; }
            set
            {
                _Annullata = value;
            }
        }

        public NullTypes.StringNT SegnaturaAnnullamento
        {
            get { return _SegnaturaAnnullamento; }
            set
            {
                _SegnaturaAnnullamento = value;
            }
        }

        public NullTypes.IntNT NumeroEstrazioni
        {
            get { return _NumeroEstrazioni; }
            set
            {
                _NumeroEstrazioni = value;
            }
        }

        public NullTypes.BoolNT RevisioneConclusa
        {
            get { return _RevisioneConclusa; }
            set
            {
                _RevisioneConclusa = value;
            }
        }
    }

    public class RiepilogoDomandePagamentoCollection : CustomCollection
    {
        private RiepilogoDomandePagamentoCollection(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
            : this()
        {
            int c = info.GetInt32("_count");
            for (int i = 0; i < c; i++)
            {
                this.Add((RiepilogoDomandePagamento)info.GetValue(i.ToString(), typeof(RiepilogoDomandePagamento)));
            }
        }

        //Costruttore
        public RiepilogoDomandePagamentoCollection()
        {
            this.ItemType = typeof(RiepilogoDomandePagamento);
        }

        //Get e Set
        public new RiepilogoDomandePagamento this[int index]
        {
            get { return (RiepilogoDomandePagamento)(base[index]); }
            set
            {
                base[index] = value;
            }
        }

        public new RiepilogoDomandePagamentoCollection GetChanges()
        {
            return (RiepilogoDomandePagamentoCollection)base.GetChanges();
        }

        //Add
        public int Add(RiepilogoDomandePagamento RiepilogoDomandePagamentoObj)
        {
            return base.Add(RiepilogoDomandePagamentoObj);
        }

        //AddCollection
        public void AddCollection(RiepilogoDomandePagamentoCollection RiepilogoDomandePagamentoCollectionObj)
        {
            foreach (RiepilogoDomandePagamento RiepilogoDomandePagamento in RiepilogoDomandePagamentoCollectionObj)
                this.Add(RiepilogoDomandePagamento);
        }

        public void Insert(int index, RiepilogoDomandePagamento RiepilogoDomandePagamentoObj)
        {

            base.Insert(index, RiepilogoDomandePagamentoObj);
        }

        /// <summary>
        /// ritorna la collection filtrata per domande inserite, se firmate true ritorna quelle definitive, false quelle non firmate
        /// altrimenti entrambe
        /// </summary>
        /// <param name="firmate"></param>
        /// <returns></returns>
        public RiepilogoDomandePagamentoCollection FiltroInLavorazione()
        {
            RiepilogoDomandePagamentoCollection RiepilogoDomandePagamentoCollectionTemp = new RiepilogoDomandePagamentoCollection();
            foreach (RiepilogoDomandePagamento RiepilogoDomandePagamentoItem in this)
            {
                if (RiepilogoDomandePagamentoItem.IdDomandaPagamento != null)
                {
                    //if ((RiepilogoDomandePagamentoItem.Approvata == null && !RiepilogoDomandePagamentoItem.Annullata) ||
                    //    ((RiepilogoDomandePagamentoItem.SelezionataXRevisione != null && RiepilogoDomandePagamentoItem.RevisioneConclusa != true)
                    //    || (RiepilogoDomandePagamentoItem.Approvata == true && RiepilogoDomandePagamentoItem.RevisioneConclusa != true)))
                    if (RiepilogoDomandePagamentoItem.Approvata == null && !RiepilogoDomandePagamentoItem.Annullata)
                        RiepilogoDomandePagamentoCollectionTemp.Add(RiepilogoDomandePagamentoItem);
                }
            }
            return RiepilogoDomandePagamentoCollectionTemp; 
        }

        public RiepilogoDomandePagamentoCollection FiltroAnnullate(NullTypes.BoolNT annullate)
        {
            RiepilogoDomandePagamentoCollection RiepilogoDomandePagamentoCollectionTemp = new RiepilogoDomandePagamentoCollection();
            foreach (RiepilogoDomandePagamento RiepilogoDomandePagamentoItem in this)
            {
                if (RiepilogoDomandePagamentoItem.IdDomandaPagamento != null)
                {
                    if ((annullate == null) || (annullate != null && annullate == RiepilogoDomandePagamentoItem.Annullata))
                        RiepilogoDomandePagamentoCollectionTemp.Add(RiepilogoDomandePagamentoItem);
                }
            }
            return RiepilogoDomandePagamentoCollectionTemp;
        }

        /// <summary>
        /// ritorna la collection filtrata per tipo domanda
        /// </summary>
        /// <param name="firmate"></param>
        /// <returns></returns>
        public RiepilogoDomandePagamentoCollection FiltroTipo(NullTypes.StringNT CodTipo)
        {
            RiepilogoDomandePagamentoCollection RiepilogoDomandePagamentoCollectionTemp = new RiepilogoDomandePagamentoCollection();
            foreach (RiepilogoDomandePagamento RiepilogoDomandePagamentoItem in this)
            {
                    if (CodTipo != null && RiepilogoDomandePagamentoItem.CodTipo == CodTipo)
                        RiepilogoDomandePagamentoCollectionTemp.Add(RiepilogoDomandePagamentoItem);
            }
            return RiepilogoDomandePagamentoCollectionTemp;
        }
    }
}
