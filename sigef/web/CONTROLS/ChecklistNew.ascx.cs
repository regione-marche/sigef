using System;
using System.Collections;
using System.Web.UI;
using System.Web.UI.HtmlControls;
using System.Web.UI.WebControls;

namespace web.CONTROLS
{
    public partial class ChecklistNew : System.Web.UI.UserControl
    {
        SiarBLL.IterProgettoCollectionProvider iter_provider = new SiarBLL.IterProgettoCollectionProvider();
        SiarLibrary.NotAutogeneratedClasses.EsitiChecklistProgettoCollection esiti_progetto;

        public bool NoteColumnVisible
        {
            get { return dgSteps.Columns[5].Visible; }
            set { dgSteps.Columns[5].Visible = value; dgSteps.Style["width"] = "800px"; }
        }

        private string _defaultRedirect;
        public string DefaultRedirect
        {
            get { return _defaultRedirect; }
            set { _defaultRedirect = value; }
        }

        /// <summary>
        /// Codice della Fase procedurale associata alla checklist
        /// </summary>
        private string _Fase;
        public string Fase
        {
            get { return _Fase; }
            set { _Fase = value; }
        }

        private SiarLibrary.Progetto _progetto;
        public SiarLibrary.Progetto Progetto
        {
            get { return _progetto; }
            set { _progetto = value; }
        }

        private SiarLibrary.NullTypes.IntNT _idDomandaPagamento;
        public SiarLibrary.NullTypes.IntNT IdDomandaPagamento
        {
            get { return _idDomandaPagamento; }
            set { _idDomandaPagamento = value; }
        }

        public ArrayList StepDiReindirizzamento
        {
            get
            {
                ArrayList _stepDiReindirizzamento = new ArrayList();
                if (esiti_progetto != null)
                {
                    foreach (SiarLibrary.NotAutogeneratedClasses.EsitiChecklistProgetto cxs in esiti_progetto)
                        if (cxs.Url != null)
                            if (!_stepDiReindirizzamento.Contains(cxs.Url.Value))
                                _stepDiReindirizzamento.Add(cxs.Url.Value);
                }
                return _stepDiReindirizzamento;
            }
        }
        protected void Page_Load(object sender, EventArgs e)
        {
            esiti_progetto = new SiarLibrary.NotAutogeneratedClasses.EsitiChecklistProgettoCollection(_progetto.IdProgetto, _Fase);

            //if (_progetto == null) Response.Redirect(DefaultRedirect + "?show_error=Per proseguire è necessario selezionare la domanda di aiuto.");
            //if (Page != null) ((SiarLibrary.Web.Page)Page).RegisterClientScriptBlock("addEventHandlersByClass('TextArea');");
            // Esecuzione Code Method            
            //if (IsPostBack && Request.Form["__EVENTTARGET"] == "ExecuteStepMethod")
            //{
            //    string codeMethodName = Request.Form["__EVENTARGUMENT"].Substring(0, Request.Form["__EVENTARGUMENT"].IndexOf("_"));
            //    int id_step_code_method;
            //    if (int.TryParse(Request.Form["__EVENTARGUMENT"].Replace(codeMethodName + "_", string.Empty), out id_step_code_method))
            //        EseguiMetodoStep(codeMethodName, id_step_code_method);
            //    else ((SiarLibrary.Web.PrivatePage)Page).ShowError("L'operazione selezionata non è valida.");
            //}
        }

        protected override void OnPreRender(EventArgs e)
        {
            esiti_progetto = new SiarLibrary.NotAutogeneratedClasses.EsitiChecklistProgettoCollection(_progetto.IdProgetto, _Fase);

            dgSteps.DataSource = esiti_progetto;
            if (esiti_progetto.Count == 0) dgSteps.Titolo = "Il bando non prevede la compilazione di una checklist di controllo per la fase selezionata.";
            dgSteps.DataBind();
            base.OnPreRender(e);
        }

        public string VerificaChecklist()
        {
            try
            {
                //if (Progetto.CodFase != _Fase) throw new Exception("La domanda di aiuto non si trova nello stato procedurale per il controllo di questi requisiti.");
                esiti_progetto = new SiarLibrary.NotAutogeneratedClasses.EsitiChecklistProgettoCollection(_progetto.IdProgetto, _Fase);
                if (esiti_progetto.Count == 0) throw new Exception("Il bando non prevede la compilazione di una checklist di controllo per la fase selezionata, impossibile continuare.");
                #region salvo gli step manuali
                foreach (SiarLibrary.NotAutogeneratedClasses.EsitiChecklistProgetto e in esiti_progetto)
                {
                    if (!e.Automatico && string.IsNullOrEmpty(e.CodeMethod))
                    {
                        string esito_step = null;
                        //cerco l'hidden che come valore ha l'uniqueid della combo corrispondente allo step
                        string nome_hidden = "hdnEsitoStep" + e.IdStep;
                        foreach (string s in Request.Form.AllKeys)
                        {
                            if (s.EndsWith(nome_hidden))
                            {
                                //trovo il valore selezionato della combo 
                                string id_combo = Request.Form[s];
                                esito_step = Request.Form[id_combo];
                                break;
                            }
                        }
                        saveIterProgetto(e, esito_step);
                    }
                    // se le note sono visibili le salvo anche per gli altri step
                    else if (NoteColumnVisible) saveIterProgetto(e, null);
                }
                #endregion

                return iter_provider.VerificaCheckListDomandaDiAiuto(Progetto.IdProgetto, null, _Fase,
                    ((SiarLibrary.Web.MasterPage)Page.Master).Operatore.Utente.CfUtente);
            }
            catch (Exception ex) { return ex.Message; }
        }

        private void saveIterProgetto(SiarLibrary.NotAutogeneratedClasses.EsitiChecklistProgetto step, string esito_step)
        {
            SiarLibrary.IterProgetto i = new SiarLibrary.IterProgetto();
            i.IdStep = step.IdStep;
            i.IdProgetto = Progetto.IdProgetto;
            // salvo l'esito solo se manuale
            if (!step.Automatico && string.IsNullOrEmpty(step.CodeMethod)) i.CodEsito = esito_step;
            i.Data = DateTime.Now;
            i.CfOperatore = ((SiarLibrary.Web.MasterPage)Page.Master).Operatore.Utente.CfUtente;
            i.Note = Request.Form["txtAreaLungaCKL" + step.IdStep + "_text"];
            i.CodEsitoRevisore = step.CodEsitoRevisore;
            i.DataRevisore = step.DataRevisore;
            i.Revisore = step.Revisore;
            i.NoteRevisore = step.NoteRevisore;
            // se nuovo, la data non e' ancora valorizzata
            if (step.Data != null) i.ObjectState = SiarLibrary.BaseObject.ObjectStateType.Changed;
            iter_provider.Save(i);
        }

        protected void dgSteps_ItemDataBound(object sender, DataGridItemEventArgs e)
        {
            if (e.Item.ItemType == ListItemType.Item || e.Item.ItemType == ListItemType.AlternatingItem)
            {
                DataGridItem dgi = (DataGridItem)e.Item;
                SiarLibrary.NotAutogeneratedClasses.EsitiChecklistProgetto step = (SiarLibrary.NotAutogeneratedClasses.EsitiChecklistProgetto)dgi.DataItem;
                SiarLibrary.Web.ComboSiNo comboEsitoStep = (SiarLibrary.Web.ComboSiNo)dgi.Cells[3].FindControl("lstEsitoStep");
                if (comboEsitoStep != null)
                {
                    #region hidden con nome combo
                    HtmlInputHidden hdn = new HtmlInputHidden();
                    //hdn.Attributes.Add("runat", "server");
                    hdn.ID = "hdnEsitoStep" + step.IdStep;
                    hdn.Value = comboEsitoStep.UniqueID;
                    dgi.Cells[3].Controls.Add(hdn);
                    #endregion
                }

                #region textarea note
                if (step.CodEsito != null)
                {
                    System.Xml.XmlDocument doc = new System.Xml.XmlDocument();
                    doc.LoadXml(dgi.Cells[5].Text);
                    System.Xml.XmlNode nodo = doc.GetElementsByTagName("textarea").Item(0);
                    nodo.InnerText = step.Note;
                    dgi.Cells[5].Text = doc.InnerXml;
                }
                #endregion

                #region Url
                if (!string.IsNullOrEmpty(step.Url))
                {
                    HyperLink newHL = new HyperLink();
                    newHL.Text = "Pagina di modifica dei dati";
                    newHL.NavigateUrl = step.Url + "&iddom=" + _progetto.IdProgetto;
                    dgi.Cells[4].Controls.Add(newHL);
                }
                #endregion

                if (step.Automatico)
                {
                    dgi.Cells[3].Text = string.Empty; // nascondo la combo
                    // Rendering Esito Step Verificato
                    if (step.CodEsito != null)
                    {
                        if (step.CodEsito == "SI") dgi.Cells[3].Text = "<span style=\"color: #0b9007;\">SI</span>";
                        else if (step.CodEsito == "NO") dgi.Cells[3].Text = "<span style=\"color: #be0202;\">NO</span>";
                        else dgi.Cells[3].Text = step.CodEsito;
                    }

                    #region Rendering "Esegui Metodo"
                    if (!string.IsNullOrEmpty(step.CodeMethod))
                    {
                        if (!(step != null && step.EsitoPositivo))
                        {
                            string url = "alert('Non si hanno i privilegi per effettuare modifiche.');";
                            if (((SiarLibrary.Web.PrivatePage)Page).AbilitaModifica) url = "if(confirm('Procedere con la verifica dello step?')){$('[id$=hdnChkCodeMethodIdStep]').val("
                                + step.IdStep + ");$('[id$=btnChkCodeMethodExec]').click();}";
                            dgi.Cells[4].Text = "<input type='button' style='width:90px' class='ButtonGrid' value='Procedi' onclick=\"" + url + "\" />";
                        }
                    }
                    #endregion
                }
                else
                {
                    if (step.CodEsito != null && comboEsitoStep != null)
                    {
                        ListItem li = comboEsitoStep.Items.FindByValue(step.CodEsito);
                        if (li != null) li.Selected = true;
                    }
                }
            }
        }

        protected void btnChkCodeMethodExec_Click(object sender, EventArgs e)
        {
            int id_step;
            if (!int.TryParse(hdnChkCodeMethodIdStep.Value, out id_step)) ((SiarLibrary.Web.PrivatePage)Page).ShowError("step non selezionato");
            else
            {
                try
                {
                    SiarLibrary.Step s = new SiarBLL.StepCollectionProvider().GetById(id_step);
                    if (s == null || s.CodeMethod == null) throw new SiarLibrary.SiarException(SiarLibrary.TextErrorCodes.GenericoConLink);

                    // Eseguo il metodo via reflection
                    System.Reflection.Assembly actionsAssembly = System.Reflection.Assembly.LoadFrom(Server.MapPath("../../bin/SiarActions.dll"));
                    Type actionsClassType = actionsAssembly.GetType("SiarActions.StepProvider");
                    object esito = actionsClassType.InvokeMember(s.CodeMethod, System.Reflection.BindingFlags.Default | System.Reflection.BindingFlags.InvokeMethod,
                                                                 null, actionsClassType, new object[] { _progetto.IdProgetto.Value });
                    SiarActions.StepResult risultato = (SiarActions.StepResult)esito;

                    SiarLibrary.IterProgetto iter = iter_provider.GetById(_progetto.IdProgetto, id_step);
                    if (iter == null)
                    {
                        iter = new SiarLibrary.IterProgetto();
                        iter.IdProgetto = _progetto.IdProgetto;
                        iter.IdStep = id_step;
                    }
                    if (risultato.Esito)
                    {
                        iter.CodEsito = "SI";
                        ((SiarLibrary.Web.PrivatePage)Page).ShowMessage(risultato.Descrizione);
                    }
                    else
                    {
                        iter.CodEsito = "NO";
                        ((SiarLibrary.Web.PrivatePage)Page).ShowError("Step selezionato non verificato, dettaglio:<br />" + risultato.Descrizione);
                    }
                    iter.Data = DateTime.Now;
                    iter.CfOperatore = ((SiarLibrary.Web.MasterPage)Page.Master).Operatore.Utente.CfUtente;
                    iter_provider.Save(iter);
                }
                catch (Exception ex) { ((SiarLibrary.Web.PrivatePage)Page).ShowError(ex); }
            }
        }
    }
}
