using System;
using System.Collections.Generic;using System.Web.UI.WebControls;
using SiarLibrary.Extensions;
using SiarLibrary;
using SiarLibrary.Web;
using SiarBLL;
using System.Linq;
using System.Collections;
using System.Security.Cryptography;
using SiarLibrary.NullTypes;

namespace web.CONTROLS
{
    public partial class ucCruscotto : SigefUserControl
    {
        #region Variabili

        VcruscottoDomandeCollectionProvider cruscotto_domande_provider;
        VcruscottoVariantiCollectionProvider cruscotto_varianti_provider;
        VcruscottoDomandeBeneficiarioCollectionProvider cruscotto_domande_beneficiario_provider;
        VcruscottoDomandeConsulenteCollectionProvider cruscotto_domande_consulente_provider;
        ProgettoCollectionProvider progetto_provider;
        BandoCollectionProvider bando_provider;
        ErroriPecCollectionProvider errori_pec_provider;
        VariantiCollectionProvider varianti_provider;
        SiarLibrary.NotAutogeneratedClasses.RiepilogoDomandePagamentoCollectionProvider riepilogo_domande_provider;
        VcruscottoBandiRupCollectionProvider cruscotto_bandi_rup_provider;
        VcruscottoDomandeRappresentanteLegaleCollectionProvider cruscotto_domanda_legale_rappresentante_provider;
        BandoCollectionProvider bandi_provider;
        BandoConfigCollectionProvider bando_config_provider;
        PagamentiRichiestiFemCollectionProvider pag_rich_fem_provider;
        VcruscottoBandiProcAttivazioneCollectionProvider bandi_proc_att_provider;
        RichiestaConsulenteCollectionProvider rich_cons_provider;

        AssistenzaUtentiCollectionProvider rich_assistenza_provider;

        RichiestaConsulente richiesta_selezionata = null;
        RichiestaConsulente richiesta_selezionata_procura = null;
        SiarBLL.RichiestaConsulenteProcuraXBandoCollectionProvider richXbandoProvider;
        SiarLibrary.RichiestaConsulenteProcuraXBando procuraBando;
        RichiestaProfilazione richiesta_prof_selezionata = null;
        RichiestaProfilazioneCollectionProvider richiesta_prof_provider;
        NewsCollectionProvider news_provider;

        bool abilita_inserimento_nuova_domanda = false, pratiche_in_istruttoria = false, prima_domanda = false, variante_inserita_non_istruita = false;
        int ordine_minimo_inserimento = 0, permessi_operatore = 0, mostra_dettaglio = 0, mostra_dettaglio_legale_rappresentante = 0;
        List<int> list_abilita_inserimento = new List<int>();
        decimal importo_richiesto = 0, contributo_richiesto = 0, importo_ammesso = 0, contributo_ammesso = 0;

        Progetto progetto_selezionato, progetto_selezionato_legale_rappresentante;
        string profilo_utente;

        bool strumenti_finanziari = false;

        #endregion

        protected void Page_Load(object sender, EventArgs e)
        {
            inizializzaProvider();
            int id_richiesta;
            int id_richiesta_consulente;
            int id_bando_richiesta;
            if (int.TryParse(hdnIdRichiestaCons.Value, out id_richiesta))
            {
                richiesta_selezionata = rich_cons_provider.GetById(id_richiesta);
            }
            else if (int.TryParse(hdnIdRichiestaConsProc.Value, out id_richiesta) && int.TryParse(hdnIdRichiestaConsAssociataProc.Value, out id_richiesta_consulente) && int.TryParse(hdnIdBandoRichiestaConsProc.Value, out id_bando_richiesta))
            {
                richiesta_selezionata_procura = rich_cons_provider.GetById(id_richiesta_consulente);
                procuraBando = richXbandoProvider.Find(id_richiesta, null,  null, null, id_bando_richiesta, null, null, null, null)[0];
            }
            if (richiesta_selezionata != null)
                ucFirmaDocumento.DocumentoFirmatoEvent = ProtocollaDocFirmatoEvent;
            else if (richiesta_selezionata_procura != null)
                ucFirmaDocumento.DocumentoFirmatoEvent = ProtocollaDocFirmatoProcuraEvent;
        }

        protected override void OnPreRender(EventArgs e)
        {
            inizializzaProvider();
            dataBindCampiRicerca();
            popolaCampiNascosti();

            popolaDataGridDomandeIstruttore();
            popolaDataGridVariantiIstruttore();
            popolaDataGridBeneficiario();
            popolaDataGridConsulente();
            popolaDatagridAmministratore();
            popolaDataGridLottiRevisione();
            popolaDataGridIstruttoriaDomandaAiuto();
            popolaDataGridRichiesteAccessoAtti();
            popolaDataGridBandiRup();
            popolaDataGridBandiDefinitiviSenzaDecreto();
            popolaDataGridBandiPubblicatiSenzaProcAttivazione();
            popolaImg();
            popolaDataGridRichiesteConsulente();
            popolaDataGridRichiesteConsulenteProcura();
            popolaDataGridRichiesteProfilazione();

            popolaDataGridRichiesteAssistenza();

            popolaDataGridNews();
            popolaDivRNA();
            base.OnPreRender(e);
        }


        protected void inizializzaProvider()
        {
            cruscotto_domande_provider = new SiarBLL.VcruscottoDomandeCollectionProvider();
            cruscotto_varianti_provider = new SiarBLL.VcruscottoVariantiCollectionProvider();
            cruscotto_domande_beneficiario_provider = new SiarBLL.VcruscottoDomandeBeneficiarioCollectionProvider();
            cruscotto_domande_consulente_provider = new SiarBLL.VcruscottoDomandeConsulenteCollectionProvider();
            progetto_provider = new SiarBLL.ProgettoCollectionProvider();
            bando_provider = new SiarBLL.BandoCollectionProvider();
            errori_pec_provider = new ErroriPecCollectionProvider();
            varianti_provider = new VariantiCollectionProvider();
            riepilogo_domande_provider = new SiarLibrary.NotAutogeneratedClasses.RiepilogoDomandePagamentoCollectionProvider();
            cruscotto_bandi_rup_provider = new VcruscottoBandiRupCollectionProvider();
            cruscotto_domanda_legale_rappresentante_provider = new VcruscottoDomandeRappresentanteLegaleCollectionProvider();
            bandi_provider = new BandoCollectionProvider();
            bando_config_provider = new BandoConfigCollectionProvider();
            pag_rich_fem_provider = new PagamentiRichiestiFemCollectionProvider();
            bandi_proc_att_provider = new VcruscottoBandiProcAttivazioneCollectionProvider();
            rich_cons_provider = new RichiestaConsulenteCollectionProvider();
            richiesta_prof_provider = new RichiestaProfilazioneCollectionProvider();
            news_provider = new NewsCollectionProvider();
            richXbandoProvider = new SiarBLL.RichiestaConsulenteProcuraXBandoCollectionProvider();

            rich_assistenza_provider = new AssistenzaUtentiCollectionProvider();
        }

        protected void dataBindCampiRicerca()
        {
            //BENEFICIARIO
            lstStatoProgettoBeneficiario.DataBind();
            lstStatoProgettoBeneficiario.Items.Clear();
            lstStatoProgettoBeneficiario.Items.Add(new ListItem("", ""));
            lstStatoProgettoConsulente.Items.Clear();
            lstStatoProgettoConsulente.Items.Add(new ListItem("", ""));
            lstTipoDomanda.DataBind();

            //ISTRUTTORE
            lstStatoProgettoIstruttore.Items.Clear();
            lstStatoProgettoIstruttore.Items.Add(new ListItem("", ""));
            lstImpresaProgettoIstruttore.Items.Clear();
            lstImpresaProgettoIstruttore.Items.Add(new ListItem("", ""));
            lstModalitaPagamentoIstruttore.DataBind();
            lstModalitaPagamentoIstruttore.Items.Clear();
            lstModalitaPagamentoIstruttore.Items.Add(new ListItem("", ""));
            lstFirmaPredispostaIstruttore.DataBind();
            lstFirmaPredispostaIstruttore.Items.Clear();
            lstFirmaPredispostaIstruttore.Items.Add(new ListItem("", ""));
            lstAnnullataDomandaPagamentoIstruttore.Items.Add(new ListItem("", ""));
            lstAnnullataDomandaPagamentoIstruttore.Items.Add(new ListItem("Annullata", "1"));
            lstAnnullataDomandaPagamentoIstruttore.Items.Add(new ListItem("Non annullata", "0"));

            //VARIANTI ISTRUTTORE
            lstStatoProgettoVariantiIstruttore.Items.Clear();
            lstStatoProgettoVariantiIstruttore.Items.Add(new ListItem("", ""));
            lstImpresaProgettoVariantiIstruttore.Items.Clear();
            lstImpresaProgettoVariantiIstruttore.Items.Add(new ListItem("", ""));

            //CONSULENTE
            lstImpresaConsulente.Items.Clear();
            lstImpresaConsulente.Items.Add(new ListItem("", ""));

            //ERRORI PEC
            lstStatoErrore.Items.Clear();
            lstStatoErrore.Items.Add(new ListItem("", ""));

            //LEGALE RAPPRESENTANTE
            lstStatoProgettoLegaleRappresentante.DataBind();
            lstImpresaLegaleRappresentante.Items.Clear();
            lstImpresaLegaleRappresentante.Items.Add(new ListItem("", ""));

            //RUP
            lstStatoBandoRup.Items.Clear();
            lstStatoBandoRup.Items.Add(new ListItem("", ""));
            lstStatoBandoRup.Items.Add(new ListItem("In lavorazione", "In lavorazione"));
            lstStatoBandoRup.Items.Add(new ListItem("Pubblicato", "Pubblicato"));
            lstStatoBandoRup.Items.Add(new ListItem("Graduatoria definitiva", "Graduatoria definitiva"));
            lstStatoBandoRup.Items.Add(new ListItem("Concluso", "Concluso"));
            lstStatoProgettoRup.DataBind();
            lstStatoProgettoRup.Items.Clear();
            lstStatoProgettoRup.Items.Add(new ListItem("", ""));

            lstStatoProgettoRup.Items.Add(new ListItem("Ammissibile", "Ammissibile"));
            lstStatoProgettoRup.Items.Add(new ListItem("Non ammissibile", "Non ammissibile"));
            lstStatoProgettoRup.Items.Add(new ListItem("Concluso", "Concluso"));
            lstStatoProgettoRup.Items.Add(new ListItem("Escluso", "Escluso"));
            lstStatoProgettoRup.Items.Add(new ListItem("Finanziabile", "Finanziabile"));
            lstStatoProgettoRup.Items.Add(new ListItem("Graduatoria definitiva", "Graduatoria definitiva"));
            lstStatoProgettoRup.Items.Add(new ListItem("Acquisito", "Acquisito"));
            lstStatoProgettoRup.Items.Add(new ListItem("Rilasciato/Definitivo", "Rilasciato/Definitivo"));
            lstStatoProgettoRup.Items.Add(new ListItem("Non finanziabile", "Non finanziabile"));
            lstStatoProgettoRup.Items.Add(new ListItem("Secondo SAL", "Secondo SAL"));
            lstStatoProgettoRup.Items.Add(new ListItem("Provvisorio", "Provvisorio"));
            lstStatoProgettoRup.Items.Add(new ListItem("Non ricevibile", "Non ricevibile"));
            lstStatoProgettoRup.Items.Add(new ListItem("Rinuncia", "Rinuncia"));
            lstStatoProgettoRup.Items.Add(new ListItem("SAL", "SAL"));
            lstStatoProgettoRup.Items.Add(new ListItem("Rendicontato", "Rendicontato"));
            lstStatoProgettoRup.Items.Add(new ListItem("Avviato", "Avviato"));
            lstStatoProgettoRup.Items.Add(new ListItem("Non rendicontato", "Non rendicontato"));
            lstStatoProgettoRup.Items.Add(new ListItem("Revocato", "Revocato"));

            lstImpresaProgettoRup.Items.Clear();
            lstImpresaProgettoRup.Items.Add(new ListItem("", ""));
            lstModalitaPagamentoRup.DataBind();
            lstModalitaPagamentoRup.Items.Clear();
            lstModalitaPagamentoRup.Items.Add(new ListItem("", ""));
            lstFirmaPredispostaRup.DataBind();
            lstFirmaPredispostaRup.Items.Clear();
            lstFirmaPredispostaRup.Items.Add(new ListItem("", ""));
            lstFirmaPredispostaRup.Items.Add(new ListItem("Firma predisposta", "1"));
            lstFirmaPredispostaRup.Items.Add(new ListItem("Firma NON predisposta", "0"));
            lstIstruttoreProgettoRup.Items.Clear();
            lstIstruttoreProgettoRup.Items.Add(new ListItem("", ""));
            lstIstruttoreProgettoRup.Items.Add(new ListItem("Senza istruttore", "senza_istruttore"));
            lstAnnullataDomandaPagamentoRup.Items.Add(new ListItem("", ""));
            lstAnnullataDomandaPagamentoRup.Items.Add(new ListItem("Annullata", "1"));
            lstAnnullataDomandaPagamentoRup.Items.Add(new ListItem("Non annullata", "0"));
        }

        protected void popolaCampiNascosti()
        {
            int id_progetto;
            if (int.TryParse(hdnIdProgetto.Value, out id_progetto))
            {
                progetto_selezionato = progetto_provider.GetById(id_progetto);
            }

            int id_progetto_legale_rappresentante;
            if (int.TryParse(hdnIdProgettoLegaleRappresentante.Value, out id_progetto_legale_rappresentante))
            {
                progetto_selezionato_legale_rappresentante = progetto_provider.GetById(id_progetto_legale_rappresentante);
            }

            profilo_utente = ((PrivatePage)Page).Operatore.Utente.Profilo;
            hdnVisibileLotti.Value = "true";
        }

        protected void popolaImg()
        {
            imgMostraNewsCruscotto.Attributes.Add("src", PATH_IMAGES + "ArrowUpSolid.png");

            imgMostraLottiRevisioneIstruttore.Attributes.Add("src", PATH_IMAGES + "ArrowUpSolid.png");
            imgMostraConsulenteDomande.Attributes.Add("src", PATH_IMAGES + "ArrowUpSolid.png");
            imgMostraBeneficiarioBandi.Attributes.Add("src", PATH_IMAGES + "ArrowUpSolid.png");
            imgMostraErrori.Attributes.Add("src", PATH_IMAGES + "ArrowUpSolid.png");
            imgMostraVariantiIstruttore.Attributes.Add("src", PATH_IMAGES + "ArrowUpSolid.png");
            imgSupportoVariante.Attributes.Add("src", PATH_IMAGES + "soggetto.ico");
            imgMostraDomandeIstruttore.Attributes.Add("src", PATH_IMAGES + "ArrowUpSolid.png");
            imgIstruttoriaDomandaAiuto.Attributes.Add("src", PATH_IMAGES + "ArrowUpSolid.png");
            imgMostraRichiesteAccessoAtti.Attributes.Add("src", PATH_IMAGES + "ArrowUpSolid.png");
            imgMostraBandiRup.Attributes.Add("src", PATH_IMAGES + "ArrowUpSolid.png");
            imgMostraLegaleRappresentanteDomande.Attributes.Add("src", PATH_IMAGES + "ArrowUpSolid.png");
            imgMostraBandiDefinitiviSenzaDecreto.Attributes.Add("src", PATH_IMAGES + "ArrowUpSolid.png");
            imgMostraBandiPubblicatiSenzaProcAttivazione.Attributes.Add("src", PATH_IMAGES + "ArrowUpSolid.png");
            imgMostraRichCons.Attributes.Add("src", PATH_IMAGES + "ArrowUpSolid.png");
            imgMostraRichConsProc.Attributes.Add("src", PATH_IMAGES + "ArrowUpSolid.png");
            imgMostraRichiesteProfilazione.Attributes.Add("src", PATH_IMAGES + "ArrowUpSolid.png");
            imgMostraRnaPsw.Attributes.Add("src", PATH_IMAGES + "ArrowUpSolid.png");
            imgMostraRichAssistenza.Attributes.Add("src", PATH_IMAGES + "ArrowUpSolid.png");


            imgSearchFilterRup.Attributes.Add("src", PATH_IMAGES + "lente24.png");
            imgSearchFilterIstruttoria.Attributes.Add("src", PATH_IMAGES + "lente24.png");
            imgSearchFilterAccessoAtti.Attributes.Add("src", PATH_IMAGES + "lente24.png");
            imgSearchFilterBeneficiario.Attributes.Add("src", PATH_IMAGES + "lente24.png");
            imgSearchFilterDomandeIstruttore.Attributes.Add("src", PATH_IMAGES + "lente24.png");
            imgSearchFilterVariantiIstruttore.Attributes.Add("src", PATH_IMAGES + "lente24.png");
            imgSearchFilterLotti.Attributes.Add("src", PATH_IMAGES + "lente24.png");
            imgSearchFilterErroriPec.Attributes.Add("src", PATH_IMAGES + "lente24.png");
            imgSearchFilterLegaleRappresentante.Attributes.Add("src", PATH_IMAGES + "lente24.png");
            imgSearchFilterDefinitiviSenzaDecreto.Attributes.Add("src", PATH_IMAGES + "lente24.png");
            imgSearchFilterConsulente.Attributes.Add("src", PATH_IMAGES + "lente24.png");
            imgSearchFilterPubblicatiSenzaProcAttivazione.Attributes.Add("src", PATH_IMAGES + "lente24.png");
        }

        public void SetOperatoreAlias(Utenti u)
        {
            if (u == null)
                throw new Exception("L'operatore selezionato non è valido.");
            Operatore o = new Operatore();
            o.Utente = u;
            Session["OperatoreAlias"] = o;
        }

        #region Button event

        protected void btnPost_Click(object sender, EventArgs e) { }

        protected void btnRicercaDomandeBeneficiario_Click(object sender, EventArgs e) { }

        protected void btnRicercaDomandeIstruttore_Click(object sender, EventArgs e) { }

        protected void btnRispedisciPec_Click(object sender, EventArgs e)
        {
            try
            {
                inizializzaProvider();
                ErroriPec errore = null;

                int id_errore;
                if (int.TryParse(hdnIdErrorePec.Value, out id_errore))
                    errore = errori_pec_provider.GetById(id_errore);

                if (errore != null && errore.Segnatura != null)
                {
                    Protocollo prot = new Protocollo();
                    string messaggio = prot.RispedisciPec(errore);

                    if (messaggio.Equals(""))
                        ((PrivatePage)Page).ShowMessage("Errore PEC corretto.");
                    else
                        ((PrivatePage)Page).ShowError(messaggio);
                }
                else
                    ((PrivatePage)Page).ShowError("Errore PEC non trovato.");
            }
            catch (Exception ex)
            {
                ((PrivatePage)Page).ShowError(ex.Message);
            }
        }

        protected void btnRifiuta_Click(object sender, EventArgs e)
        {
            try
            {
                inizializzaProvider();
                int id_richiesta;
                if (int.TryParse(hdnIdRichiestaCons.Value, out id_richiesta))
                {
                    richiesta_selezionata = rich_cons_provider.GetById(id_richiesta);
                    ((PrivatePage)Page).RegisterClientScriptBlock("mostraPopupTemplate('divMotivazioneRifiuto','divBKGMessaggio');");
                }


            }
            catch (Exception ex)
            {
                ((PrivatePage)Page).ShowError(ex.Message);
            }
        }

        protected void btnRifiutaProcura_Click(object sender, EventArgs e)
        {
            try
            {
                inizializzaProvider();
                int id_richiesta;
                if (int.TryParse(hdnIdRichiestaConsProc.Value, out id_richiesta))
                {
                    richiesta_selezionata_procura = rich_cons_provider.GetById(id_richiesta);
                    ((PrivatePage)Page).RegisterClientScriptBlock("mostraPopupTemplate('divMotivazioneRifiutoProcura','divBKGMessaggio');");
                }


            }
            catch (Exception ex)
            {
                ((PrivatePage)Page).ShowError(ex.Message);
            }
        }

        protected void btnSalvaMotivazioneRifiuto_Click(object sender, EventArgs e)
        {
            try
            {
                inizializzaProvider();
                int id_richiesta;
                if (int.TryParse(hdnIdRichiestaCons.Value, out id_richiesta))
                {
                    richiesta_selezionata = rich_cons_provider.GetById(id_richiesta);
                    richiesta_selezionata.Approvata = false;
                    richiesta_selezionata.Rifiutata = true;
                    richiesta_selezionata.MotivazioneRifiuto = txtMotivazioneRifiuto.Text;
                    rich_cons_provider.Save(richiesta_selezionata);

                    //ricarico la classe
                    richiesta_selezionata = rich_cons_provider.GetById(id_richiesta);
                    //((PrivatePage)Page).RegisterClientScriptBlock("chiudiPopupTemplate();");

                    ucFirmaDocumento.FirmaObbligatoria = false;
                    ucFirmaDocumento.Titolo = "APPROVAZIONE RICHIESTA ABILITAZIONE CONSULENTE PER IMPRESA";
                    ucFirmaDocumento.TipoDocumento = "RICHIESTA_CONS_APPROVA_RIFIUTA";
                    ucFirmaDocumento.DocumentoFirmatoEvent = ProtocollaDocFirmatoEvent;
                    ucFirmaDocumento.loadDocumento(((PrivatePage)Page).Operatore.Utente.CfUtente, richiesta_selezionata.IdRichiestaConsulente);
                }


            }
            catch (Exception ex)
            {
                ((PrivatePage)Page).ShowError(ex.Message);
            }
        }

        protected void btnSalvaMotivazioneRifiutoProcura_Click(object sender, EventArgs e)
        {
            try
            {
                inizializzaProvider();
                int id_richiesta;
                int id_richiesta_consulente;
                int id_bando_richiesta;
                if (int.TryParse(hdnIdRichiestaConsProc.Value, out id_richiesta) && int.TryParse(hdnIdRichiestaConsAssociataProc.Value, out id_richiesta_consulente) && int.TryParse(hdnIdBandoRichiestaConsProc.Value, out id_bando_richiesta))
                {
                    richiesta_selezionata_procura = rich_cons_provider.GetById(id_richiesta_consulente);
                    // solo se la richiesta di consulenza è nuova deve anch'essa essere rifiutata per evitare di rifiutare consulenze per cui sono già attive delle procure
                    if (richiesta_selezionata_procura.SegnaturaIstruttoria == null && richiesta_selezionata_procura.ProcuraSpeciale)
                    {
                        richiesta_selezionata_procura.Istruita = true;
                        richiesta_selezionata_procura.Approvata = false;
                        richiesta_selezionata_procura.Rifiutata = true;
                        richiesta_selezionata_procura.MotivazioneRifiuto = txtMotivazioneRifiutoProcura.Text;
                        rich_cons_provider.Save(richiesta_selezionata_procura);

                        richiesta_selezionata_procura = rich_cons_provider.GetById(id_richiesta_consulente);
                    }
                    procuraBando = richXbandoProvider.Find(id_richiesta, null, null, null, id_bando_richiesta, true, false, null, null)[0];
                    procuraBando.MotivazioneRifiuto = txtMotivazioneRifiutoProcura.Text;
                    procuraBando.Approvata = false;
                    richXbandoProvider.Save(procuraBando);

                    ucFirmaDocumento.FirmaObbligatoria = false;
                    ucFirmaDocumento.Titolo = "APPROVAZIONE RICHIESTA ABILITAZIONE PROCURA SPECIALE CONSULENTE PER IMPRESA";
                    ucFirmaDocumento.TipoDocumento = "RICHIESTA_PROC_APPROVA_RIFIUTA";
                    ucFirmaDocumento.DocumentoFirmatoEvent = ProtocollaDocFirmatoProcuraEvent;
                    ucFirmaDocumento.loadDocumento(((PrivatePage)Page).Operatore.Utente.CfUtente, procuraBando.Id, id_bando_richiesta.ToString());
                }


            }
            catch (Exception ex)
            {
                ((PrivatePage)Page).ShowError(ex.Message);
            }
        }

        protected void btnRifiutaProf_Click(object sender, EventArgs e)
        {
            try
            {
                inizializzaProvider();
                int id_richiesta;
                if (int.TryParse(hdnIdRichiestaProf.Value, out id_richiesta))
                {
                    richiesta_prof_selezionata = richiesta_prof_provider.GetById(id_richiesta);
                    ((PrivatePage)Page).RegisterClientScriptBlock("mostraPopupTemplate('divMotivazioneRifiutoProfilazione','divBKGMessaggio');");
                }


            }
            catch (Exception ex)
            {
                ((PrivatePage)Page).ShowError(ex.Message);
            }
        }

        protected void btnSalvaMotivazioneRifiutoProf_Click(object sender, EventArgs e)
        {
            try
            {
                inizializzaProvider();
                int id_richiesta;
                if (int.TryParse(hdnIdRichiestaProf.Value, out id_richiesta))
                {
                    richiesta_prof_selezionata = richiesta_prof_provider.GetById(id_richiesta);

                    UtentiCollectionProvider u_prov = new UtentiCollectionProvider();
                    var u = u_prov.GetById(richiesta_prof_selezionata.Operatore);
                    if (u.Email == null)
                        throw new Exception("L'utente non ha un indirizzo email configurato correttamente.Impossibile inviare la notifica per email! Contattare l'helpdesk per procedere");

                    richiesta_prof_selezionata.Approvata = false;
                    richiesta_prof_selezionata.DataApprovazione = DateTime.Now;
                    richiesta_prof_selezionata.MotivazioneRifiuto = txtMotivazioneRifiutoProf.Text;
                    richiesta_prof_provider.Save(richiesta_prof_selezionata);

                    //ricarico la classe
                    richiesta_prof_selezionata = richiesta_prof_provider.GetById(id_richiesta);
                    //((PrivatePage)Page).RegisterClientScriptBlock("chiudiPopupTemplate();");

                    SiarLibrary.Email em = new SiarLibrary.Email("Avviso di NON APPROVAZIONE della richiesta di profilazione SIGEF di una nuova procedura di attivazione (ID_RICHIESTA :" + richiesta_prof_selezionata.IdRichiesta + " )",
                                     "<html><body>Si comunica che è stata rifiutata la Richiesta di Profilazione con ID_RICHIESTA  " + richiesta_prof_selezionata.IdRichiesta
                                 + " da " + ((PrivatePage)Page).Operatore.Utente.Nominativo + " con motivazione:"
                                 + "<br>" + richiesta_prof_selezionata.MotivazioneRifiuto
                                 + "<br /><br />Questa è una notifica automatica del sistema " + System.Configuration.ConfigurationManager.AppSettings["APP:NomeCompleto"]
                                 + "<br />Si prega di non rispondere a questa email.</body></html>");
                    em.SetHtmlBodyMessage(true);
                    string[] destinatari = new string[1];
                    //string[] destinatari_cc = new string[2];


                    destinatari[0] = u.Email;
                    em.SendNotification(destinatari, new string[] { });

                    ((PrivatePage)Page).ShowMessage("Richiesta di Profilazione di una nuova procedura di attivazione RIFIUTATA.");
                    //((PrivatePage)Page).RegisterClientScriptBlock("chiudiPopupTemplate();");
                }


            }
            catch (Exception ex)
            {
                ((PrivatePage)Page).ShowError(ex.Message);
                //((PrivatePage)Page).RegisterClientScriptBlock("chiudiPopupTemplate();");
            }
        }

        protected void btnApprova_Click(object sender, EventArgs e)
        {
            try
            {
                inizializzaProvider();
                int id_richiesta;
                if (int.TryParse(hdnIdRichiestaCons.Value, out id_richiesta))
                {
                    richiesta_selezionata = rich_cons_provider.GetById(id_richiesta);
                    richiesta_selezionata.Approvata = true;
                    richiesta_selezionata.Rifiutata = false;
                    richiesta_selezionata.MotivazioneRifiuto = null;
                    rich_cons_provider.Save(richiesta_selezionata);

                    //ricarico la classe
                    richiesta_selezionata = rich_cons_provider.GetById(id_richiesta);

                    ucFirmaDocumento.FirmaObbligatoria = false;
                    ucFirmaDocumento.Titolo = "APPROVAZIONE RICHIESTA ABILITAZIONE CONSULENTE PER IMPRESA";
                    ucFirmaDocumento.TipoDocumento = "RICHIESTA_CONS_APPROVA_RIFIUTA";
                    ucFirmaDocumento.DocumentoFirmatoEvent = ProtocollaDocFirmatoEvent;
                    ucFirmaDocumento.loadDocumento(((PrivatePage)Page).Operatore.Utente.CfUtente, richiesta_selezionata.IdRichiestaConsulente);
                }


            }
            catch (Exception ex)
            {
                ((PrivatePage)Page).ShowError(ex.Message);
            }
        }

        protected void btnApprovaProcura_Click(object sender, EventArgs e)
        {
            try
            {
                inizializzaProvider();
                int id_richiesta;
                int id_richiesta_consulente;
                int id_bando_richiesta;
                if (int.TryParse(hdnIdRichiestaConsProc.Value, out id_richiesta) && int.TryParse(hdnIdRichiestaConsAssociataProc.Value, out id_richiesta_consulente) && int.TryParse(hdnIdBandoRichiestaConsProc.Value, out id_bando_richiesta))
                {
                    richiesta_selezionata_procura = rich_cons_provider.GetById(id_richiesta_consulente);

                    richiesta_selezionata_procura.Approvata = true;
                    richiesta_selezionata_procura.Rifiutata = false;
                    richiesta_selezionata_procura.MotivazioneRifiuto = null;
                    rich_cons_provider.Save(richiesta_selezionata_procura);

                    //ricarico la classe
                    richiesta_selezionata_procura = rich_cons_provider.GetById(id_richiesta_consulente);

                    // qui ci metto l'id_bando e sto apposto
                    procuraBando = richXbandoProvider.Find(id_richiesta, null, null, null, id_bando_richiesta, true, false, null, null)[0];
                    procuraBando.Approvata = true;
                    richXbandoProvider.Save(procuraBando);

                    ucFirmaDocumento.FirmaObbligatoria = false;
                    ucFirmaDocumento.Titolo = "APPROVAZIONE RICHIESTA ABILITAZIONE PROCURA SPECIALE CONSULENTE PER IMPRESA";
                    ucFirmaDocumento.TipoDocumento = "RICHIESTA_PROC_APPROVA_RIFIUTA";
                    ucFirmaDocumento.DocumentoFirmatoEvent = ProtocollaDocFirmatoProcuraEvent;
                    ucFirmaDocumento.loadDocumento(((PrivatePage)Page).Operatore.Utente.CfUtente, procuraBando.Id, id_bando_richiesta.ToString());
                }


            }
            catch (Exception ex)
            {
                ((PrivatePage)Page).ShowError(ex.Message);
            }
        }

        protected void btnApprovaProf_Click(object sender, EventArgs e)
        {
            try
            {
                inizializzaProvider();
                int id_richiesta;
                if (int.TryParse(hdnIdRichiestaProf.Value, out id_richiesta))
                {
                    richiesta_prof_selezionata = richiesta_prof_provider.GetById(id_richiesta);

                    UtentiCollectionProvider u_prov = new UtentiCollectionProvider();
                    var u = u_prov.GetById(richiesta_prof_selezionata.Operatore);
                    if (u.Email == null)
                        throw new Exception("L'utente non ha un indirizzo email configurato correttamente.Impossibile inviare la notifica per email! Contattare l'helpdesk per procedere");

                    richiesta_prof_selezionata.Approvata = true;
                    richiesta_prof_selezionata.DataApprovazione = DateTime.Now;
                    richiesta_prof_selezionata.OperatoreApprovazione = ((PrivatePage)Page).Operatore.Utente.IdUtente;
                    richiesta_prof_selezionata.MotivazioneRifiuto = null;
                    richiesta_prof_provider.Save(richiesta_prof_selezionata);

                    //ricarico la classe
                    richiesta_prof_selezionata = richiesta_prof_provider.GetById(id_richiesta);

                    SiarLibrary.Email em = new SiarLibrary.Email("Avviso di APPROVAZIONE della richiesta di profilazione SIGEF di una nuova procedura di attivazione (ID_RICHIESTA :" + richiesta_prof_selezionata.IdRichiesta + " )",
                                    "<html><body>Si comunica che è stata approvata la Richiesta di Profilazione con ID_RICHIESTA  " + richiesta_prof_selezionata.IdRichiesta
                                + " da " + ((PrivatePage)Page).Operatore.Utente.Nominativo
                                + "<br><b>Si ricorda che per completare la richiesta di profilazione è necessario inviarla al protocollo tramite l'aposito pulsante presente nella pagina </b>"
                                + "<a href='https://sigef.regione.marche.it/web/private/psr/bandi/RichiesteProfilazione.aspx' target=_blank>Clicca qui</a> ricercando la richiesta nella 'Sezione Procedura di Attivazione->Richiesta nuova profilazione'"
                                + "<br /><br />Questa è una notifica automatica del sistema " + System.Configuration.ConfigurationManager.AppSettings["APP:NomeCompleto"]
                                + "<br />Si prega di non rispondere a questa email.</body></html>");
                    em.SetHtmlBodyMessage(true);
                    string[] destinatari = new string[1];
                    //string[] destinatari_cc = new string[2];

                    destinatari[0] = u.Email;
                    em.SendNotification(destinatari, new string[] { });

                    ((PrivatePage)Page).ShowMessage("Richiesta di Profilazione di una nuova procedura di attivazione APPROVATA correttamente.");
                }


            }
            catch (Exception ex)
            {
                ((PrivatePage)Page).ShowError(ex.Message);
            }
        }

        protected void btnRichiediCodiceAttivazione_Click(object sender, EventArgs e)
        {
            try
            {
                inizializzaProvider();
                if ((System.Configuration.ConfigurationManager.AppSettings["APP:TipoInstallazione"] != "Produzione"))
                    throw new Exception("E' possibile richiedere il codice di attivazione solamente in produzione.");

                Bando bando = null;

                int id_bando;
                if (int.TryParse(hdnIdBandoCodiceAttivazione.Value, out id_bando))
                    bando = bando_provider.GetById(id_bando);

                if (bando != null)
                {
                    string igrue_result = "";

                    try
                    {
                        var puc = new PucManager.PucOperazioni();
                        var result = puc.GetCodProceduraAttivazione(id_bando);
                        puc.InsertCodProceduraAttivazione(id_bando, result.IdProceduraAttivazione, result.DataAssegnazione);
                        igrue_result = " Codice Procedura Attivazione IGRUE: " + result.IdProceduraAttivazione;
                    }
                    catch (Exception ex)
                    {
                        igrue_result = " Richiesta Codice Procedura Attivazione IGRUE non riuscita: " + ex.Message;
                    }
                    ((PrivatePage)Page).ShowMessage(igrue_result);
                }
                else
                    ((PrivatePage)Page).ShowError("Bando non trovato.");
            }
            catch (Exception ex)
            {
                ((PrivatePage)Page).ShowError(ex.Message);
            }
        }

        protected void btnRichiediPagamentoCruscotto_Click(object sender, EventArgs e)
        {
            try
            {
                inizializzaProvider();
                int id_progetto;
                if (int.TryParse(hdnIdProgetto.Value, out id_progetto))
                    progetto_selezionato = progetto_provider.GetById(id_progetto);

                if (progetto_selezionato == null || progetto_selezionato.IdProgetto == null)
                    throw new Exception("Nessun progetto selezionato.");

                permessi_operatore = DbStaticProvider.GetPermessiOperatoreSuGestioneLavori(progetto_selezionato.IdProgetto, ((SiarLibrary.Web.PrivatePage)Page).Operatore.Utente.IdUtente, null);
                abilita_inserimento_nuova_domanda = permessi_operatore == 2 && progetto_selezionato.OrdineFase > 3 &&
                    progetto_selezionato.OrdineFase < 9 && progetto_selezionato.OrdineStato == 1;
                if (!abilita_inserimento_nuova_domanda)
                    throw new SiarLibrary.SiarException(SiarLibrary.TextErrorCodes.ModificaDisabilitata);
                if (string.IsNullOrEmpty(hdnTipoPagamento.Value))
                    throw new Exception("Si è verificato un errore sul server si prega di contattare l'helpdesk per segnalare il problema.");

                var domanda = new DomandaDiPagamento();
                domanda.CodTipo = hdnTipoPagamento.Value;
                domanda.IdProgetto = progetto_selezionato.IdProgetto;
                domanda.DataInserimento = DateTime.Now;
                domanda.CfOperatore = ((SiarLibrary.Web.PrivatePage)Page).Operatore.Utente.CfUtente;
                domanda.DataModifica = DateTime.Now;
                domanda.CodEnte = ((SiarLibrary.Web.PrivatePage)Page).Operatore.Utente.CodEnte;
                domanda.FirmaPredisposta = false;
                domanda.FirmaPredispostaRup = false;
                new SiarBLL.DomandaDiPagamentoCollectionProvider().Save(domanda);
                Session["domanda_pagamento"] = domanda;
                ((SiarLibrary.Web.PrivatePage)Page).Redirect(PATH_PPAGAMENTO + "DatiAnagrafici.aspx");
            }
            catch (Exception ex)
            {
                ((SiarLibrary.Web.PrivatePage)Page).ShowError(ex);
            }
        }

        protected void btnAlias_Click(object sender, EventArgs e)
        {
            try
            {
                if (((PrivatePage)Page).Operatore.Utente.CodEnte != "%")
                    throw new SiarException(TextErrorCodes.UtenteSenzaPermessi);
                SiarLibrary.Utenti alias = new UtentiCollectionProvider().GetById(hdnIdUtenteAlias.Value);
                SetOperatoreAlias(alias);
                Session["FUNZIONALITA_OPERATORE"] = null;
                ((PrivatePage)Page).Redirect(PATH_PRIVATE + "welcome.aspx");
            }
            catch (Exception ex)
            {
                ((PrivatePage)Page).ShowError(ex);
            }
        }

        protected void btnVaiComunicazioni_Click(object sender, EventArgs e)
        {
            try
            {
                inizializzaProvider();
                int id_progetto;
                if (int.TryParse(hdnIdProgetto.Value, out id_progetto))
                    progetto_selezionato = progetto_provider.GetById(id_progetto);

                if (progetto_selezionato == null)
                    throw new Exception("Progetto non selezionato per comunicazioni.");

                string page_comunicazioni = PATH_PDOMANDA + "Comunicazioni.aspx?iddom=" + id_progetto;

                ((PrivatePage)Page).Redirect(page_comunicazioni);
            }
            catch (Exception ex)
            {
                ((PrivatePage)Page).ShowError(ex);
            }
        }

        #endregion

        #region popola datagrid
        protected void popolaDataGridDomandeIstruttore()
        {
            if (!(profilo_utente.Equals("Utente singolo") || profilo_utente.Equals("Consulente")))
            {
                int? id_progetto = null;
                int? id_domanda_pagamento = null;
                if (!string.IsNullOrEmpty(txtIdDomandaPagamentoIstruttore.Text))
                    id_domanda_pagamento = int.Parse(txtIdDomandaPagamentoIstruttore.Text);
                if (!string.IsNullOrEmpty(txtIdProgettoIstruttore.Text))
                    id_progetto = int.Parse(txtIdProgettoIstruttore.Text);

                var cruscotto_domande_collection = cruscotto_domande_provider.FindDomandeIstruttore(((SiarLibrary.Web.PrivatePage)Page).Operatore.Utente.IdUtente, null, null, null);
                if (cruscotto_domande_collection.Count > 0)
                {
                    lblNrRecordDomandeIstruttore.Text = string.Format("Visualizzate {0} righe", cruscotto_domande_collection.Count.ToString());

                    dgDomandeIstruttore.DataSource = cruscotto_domande_collection;
                    dgDomandeIstruttore.ItemDataBound += new System.Web.UI.WebControls.DataGridItemEventHandler(dgDomandeIstruttore_ItemDataBound);
                    dgDomandeIstruttore.DataBind();
                }
                else
                {
                    divRicercaDomandeIstruttore.Visible = false;
                    lblNrRecordDomandeIstruttore.Text = "Nessuna domanda trovata.";
                }

                divDomandeIstruttore.Visible = true;
            }
        }

        protected void popolaDataGridVariantiIstruttore()
        {
            if (!(profilo_utente.Equals("Utente singolo") || profilo_utente.Equals("Consulente")))
            {
                var cruscotto_varianti_collection = cruscotto_varianti_provider.GetByIdUtente(((SiarLibrary.Web.PrivatePage)Page).Operatore.Utente.IdUtente);
                if (cruscotto_varianti_collection.Count > 0)
                {
                    lblNrRecordVariantiIstruttore.Text = string.Format("Visualizzate {0} righe", cruscotto_varianti_collection.Count.ToString());

                    dgVariantiIstruttore.DataSource = cruscotto_varianti_collection;
                    dgVariantiIstruttore.ItemDataBound += new System.Web.UI.WebControls.DataGridItemEventHandler(dgVarianti_ItemDataBound);
                    dgVariantiIstruttore.DataBind();
                }
                else
                {
                    divRicercaVariantiIstruttore.Visible = false;
                    lblNrRecordVariantiIstruttore.Text = "Nessuna variante trovata.";
                    divSupportoVariante.Visible = false;
                }

                divVariantiIstruttore.Visible = true;
            }
        }

        protected void popolaDataGridLottiRevisione()
        {
            if (!(profilo_utente.Equals("Utente singolo") || profilo_utente.Equals("Consulente")))
            {
                var cf = ((SiarLibrary.Web.PrivatePage)Page).Operatore.Utente.CfUtente;
                VcruscottoLottiRevisioneCollection lottiRevisioneCollection = new VcruscottoLottiRevisioneCollection();
                VcruscottoLottiRevisioneCollectionProvider lottiRevisioneCollectionProvider = new VcruscottoLottiRevisioneCollectionProvider();
                lottiRevisioneCollection = lottiRevisioneCollectionProvider.FindLotti(null, null, cf);
                if (lottiRevisioneCollection.Count > 0)
                {
                    divRicercaLottiValidazione.Visible = true;
                    dgLottiRevisioneIstruttore.DataSource = lottiRevisioneCollection;
                    dgLottiRevisioneIstruttore.ItemDataBound += new System.Web.UI.WebControls.DataGridItemEventHandler(dgLottiRevisioneIstruttore_ItemDataBound);
                    dgLottiRevisioneIstruttore.DataBind();
                    lblLottiRevisioneIstruttore.Text = string.Format("Visualizzate {0} righe", lottiRevisioneCollection.Count.ToString());
                }
                else
                {
                    divRicercaLottiValidazione.Visible = false;
                    lblLottiRevisioneIstruttore.Text = "Nessun lotto da validare.";
                    divLottiRevisioneIstruttore.Visible = false;
                }

                lstStatoLotti.Items.Add(new ListItem());
                lstStatoLotti.Items.Add(new ListItem("In Corso"));
                lstStatoLotti.Items.Add(new ListItem("Verifica Completamento Lotto"));
                divLottiRevisioneIstruttore.Visible = true;
            }
        }

        protected void popolaDataGridBeneficiario()
        {
            if (profilo_utente.Equals("Utente singolo"))
            {
                var cruscotto_bandi_beneficiario_collection = new VcruscottoDomandeBeneficiarioCollection();
                int id_progetto;
                if (int.TryParse(hdnIdProgetto.Value, out id_progetto))
                {
                    cruscotto_bandi_beneficiario_collection = cruscotto_domande_beneficiario_provider.FindBandiOperatore(
                        ((PrivatePage)Page).Operatore.Utente.IdUtente,
                        null,
                        null,
                        true,
                        null,
                        id_progetto,
                        null,
                        null,
                        null,
                        null,
                        null);

                    popolaDataGridDettaglioProgetto();
                    mostra_dettaglio = 1;
                }
                else
                {
                    cruscotto_bandi_beneficiario_collection = cruscotto_domande_beneficiario_provider.FindBandiOperatore(
                        ((PrivatePage)Page).Operatore.Utente.IdUtente,
                        null,
                        null,
                        true,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null);

                    mostra_dettaglio = 0;
                }

                if (cruscotto_bandi_beneficiario_collection.Count > 0)
                {
                    lblNrRecordBandiBeneficiario.Text = string.Format("Visualizzate {0} righe", cruscotto_bandi_beneficiario_collection.Count.ToString());

                    dgBandiBeneficiario.DataSource = cruscotto_bandi_beneficiario_collection;
                    dgBandiBeneficiario.ItemDataBound += new DataGridItemEventHandler(dgBandiBeneficiario_ItemDataBound);
                    dgBandiBeneficiario.DataBind();
                }
                else
                {
                    divRicercaDomandeBeneficiario.Visible = false;
                    lblNrRecordBandiBeneficiario.Text = "Nessuna domanda trovata.";
                }

                divBeneficiarioBandi.Visible = true;
                popolaDataGridLegaleRappresentante();
            }
        }

        protected void popolaDataGridConsulente()
        {
            if (profilo_utente.Equals("Consulente"))
            {
                var cruscotto_bandi_consulente_collection = new SiarLibrary.VcruscottoDomandeConsulenteCollection();
                int id_progetto;
                if (int.TryParse(hdnIdProgetto.Value, out id_progetto))
                {
                    cruscotto_bandi_consulente_collection = cruscotto_domande_consulente_provider.FindProgettiConsulente(
                        null,
                        id_progetto,
                        null,
                        null,
                        ((PrivatePage)Page).Operatore.Utente.IdUtente);

                    popolaDataGridDettaglioProgetto();
                    mostra_dettaglio = 1;
                }
                else
                {
                    cruscotto_bandi_consulente_collection = cruscotto_domande_consulente_provider.FindProgettiConsulente(
                        null,
                        null,
                        null,
                        null,
                        ((PrivatePage)Page).Operatore.Utente.IdUtente);

                    mostra_dettaglio = 0;
                }

                if (cruscotto_bandi_consulente_collection.Count > 0)
                {
                    lblNrRecordBandiConsulente.Text = string.Format("Visualizzate {0} righe", cruscotto_bandi_consulente_collection.Count.ToString());

                    dgBandiConsulente.DataSource = cruscotto_bandi_consulente_collection;
                    dgBandiConsulente.ItemDataBound += new System.Web.UI.WebControls.DataGridItemEventHandler(dgBandiConsulente_ItemDataBound);
                    dgBandiConsulente.DataBind();
                }
                else
                {
                    divRicercaDomandeConsulente.Visible = false;
                    lblNrRecordBandiConsulente.Text = "Nessuna domanda trovata.";
                }

                divConsulenteDomande.Visible = true;
                popolaDataGridLegaleRappresentante();
            }
        }

        protected void popolaDataGridLegaleRappresentante()
        {

            var cruscotto_domande_legale_rappresentante_collection = new SiarLibrary.VcruscottoDomandeRappresentanteLegaleCollection();
            int id_progetto;
            if (int.TryParse(hdnIdProgettoLegaleRappresentante.Value, out id_progetto))
            {
                cruscotto_domande_legale_rappresentante_collection = cruscotto_domanda_legale_rappresentante_provider.FindDomandeRappresentanteLegale(
                    null,
                    id_progetto,
                    null,
                    ((PrivatePage)Page).Operatore.Utente.IdUtente);

                popolaDataGridDettaglioProgettoLegaleRappresentante();
                mostra_dettaglio_legale_rappresentante = 1;
            }
            else
            {
                cruscotto_domande_legale_rappresentante_collection = cruscotto_domanda_legale_rappresentante_provider.FindDomandeRappresentanteLegale(
                    null,
                    null,
                    null,
                    ((PrivatePage)Page).Operatore.Utente.IdUtente);

                mostra_dettaglio_legale_rappresentante = 0;
            }

            if (cruscotto_domande_legale_rappresentante_collection.Count > 0)
            {
                lblNrRecordLegaleRappresentanteDomande.Text = string.Format("Visualizzate {0} righe", cruscotto_domande_legale_rappresentante_collection.Count.ToString());

                dgLegaleRappresentanteDomande.DataSource = cruscotto_domande_legale_rappresentante_collection;
                dgLegaleRappresentanteDomande.ItemDataBound += new System.Web.UI.WebControls.DataGridItemEventHandler(dgLegaleRappresentanteDomande_ItemDataBound);
                dgLegaleRappresentanteDomande.DataBind();
            }
            else
            {
                divRicercaLegaleRappresentanteDomande.Visible = false;
                lblNrRecordLegaleRappresentanteDomande.Text = "Nessuna domanda trovata.";
            }

            divLegaleRappresentanteDomande.Visible = true;
        }

        protected void popolaDataGridDettaglioProgetto()
        {
            ucGestioneLavori.Progetto = progetto_selezionato;

            divDettaglioProgetto.Visible = true;
        }

        protected void popolaDataGridDettaglioProgettoLegaleRappresentante()
        {
            var domande_pagamento = riepilogo_domande_provider.Find(progetto_selezionato_legale_rappresentante.IdProgetto);

            permessi_operatore = DbStaticProvider.GetPermessiOperatoreSuGestioneLavori(progetto_selezionato_legale_rappresentante.IdProgetto, ((PrivatePage)Page).Operatore.Utente.IdUtente, null);
            if (permessi_operatore < 1)
                ((PrivatePage)Page).Redirect(PATH_PDOMANDA + "RicercaDomanda.aspx", "L`utente non è abilitato alla prosecuzione dei lavori della domanda di aiuto selezionata.", true);
            else
            {
                var varianti = varianti_provider.Find(null, progetto_selezionato_legale_rappresentante.IdProgetto, null);
                //domande_pagamento = riepilogo_domande_provider.Find(progetto_selezionato_legale_rappresentante.IdProgetto);

                #region  elaboro la collection per le modalita' di pagamento con molteplicita > 1 o domande annullate
                var domande_plurime = new SiarLibrary.NotAutogeneratedClasses.RiepilogoDomandePagamentoCollection();
                int tipi_gia_contati = 0;
                object[] tipi_da_duplicare = new object[domande_pagamento.Count + 1];
                for (int i = 0; i < domande_pagamento.Count; i++)
                {
                    if (domande_pagamento[i].IdDomandaPagamento != null)
                    {   //domande annullate
                        if (domande_pagamento[i].Annullata || (domande_pagamento[i].Approvata != null && !domande_pagamento[i].Approvata))
                        {
                            if (tipi_da_duplicare[i] != null && ((SiarLibrary.NotAutogeneratedClasses.RiepilogoDomandePagamento)tipi_da_duplicare[i])
                                .CodTipo == domande_pagamento[i].CodTipo) tipi_da_duplicare[i] = null;
                            tipi_da_duplicare[i + 1] = domande_pagamento[i];
                        }
                        else
                        {
                            //molteplicita' >1 
                            if (domande_pagamento[i].Numero > 1)
                            {
                                if (tipi_da_duplicare[i] != null)
                                {
                                    if (((SiarLibrary.NotAutogeneratedClasses.RiepilogoDomandePagamento)tipi_da_duplicare[i]).CodTipo ==
                                        domande_pagamento[i].CodTipo) tipi_da_duplicare[i] = null;
                                    else tipi_gia_contati = -1;
                                }
                                if (tipi_gia_contati < domande_pagamento[i].Numero - 1)
                                    tipi_da_duplicare[i + 1] = domande_pagamento[i];
                                tipi_gia_contati++;
                            }
                            else if (tipi_da_duplicare[i] != null)
                                if (((SiarLibrary.NotAutogeneratedClasses.RiepilogoDomandePagamento)tipi_da_duplicare[i]).CodTipo == domande_pagamento[i].CodTipo)
                                    tipi_da_duplicare[i] = null;
                        }
                    }
                }

                int contatore_inserimenti = 0;
                for (int j = 0; j < tipi_da_duplicare.Length; j++)
                {
                    if (tipi_da_duplicare[j] != null)
                    {
                        //inserisco nella collection all'indice i+contatore_inserimenti
                        SiarLibrary.NotAutogeneratedClasses.RiepilogoDomandePagamento tipo_da_duplicare,
                            nuovo_tipo = new SiarLibrary.NotAutogeneratedClasses.RiepilogoDomandePagamento();
                        tipo_da_duplicare = (SiarLibrary.NotAutogeneratedClasses.RiepilogoDomandePagamento)tipi_da_duplicare[j];
                        //se e' un saldo non lo duplico, ce ne puo' essere uno solo
                        if (tipo_da_duplicare.CodTipo == "SLD" && !tipo_da_duplicare.Annullata) continue;
                        nuovo_tipo.CodTipo = tipo_da_duplicare.CodTipo;
                        nuovo_tipo.Descrizione = tipo_da_duplicare.Descrizione;
                        nuovo_tipo.Numero = tipo_da_duplicare.Numero;
                        nuovo_tipo.QuotaMax = tipo_da_duplicare.QuotaMax;
                        nuovo_tipo.QuotaMin = tipo_da_duplicare.QuotaMin;
                        nuovo_tipo.ImportoMax = tipo_da_duplicare.ImportoMax;
                        nuovo_tipo.ImportoMin = tipo_da_duplicare.ImportoMin;
                        nuovo_tipo.CodFase = tipo_da_duplicare.CodFase;
                        nuovo_tipo.Fase = tipo_da_duplicare.Fase;
                        nuovo_tipo.Ordine = tipo_da_duplicare.Ordine;
                        domande_pagamento.Insert(j + contatore_inserimenti++, nuovo_tipo);
                    }
                }
                #endregion

                #region abilita nuova domanda pagamento
                // IMPORTANTE: IMPOSTARE LA MODIFICA DELLE PAGINE IN PROFILO X FUNZIONI SOLO PER GLI UTENTI DI INSERIMENTO (CAA, CONSULENTI)

                //controllo se ho varianti ancora da istruire
                foreach (SiarLibrary.Varianti v in varianti)
                {
                    if ((v.Segnatura != null && (v.Annullata == false) && v.SegnaturaApprovazione == null) || v.Segnatura == null)
                        variante_inserita_non_istruita = true;
                }

                pratiche_in_istruttoria = varianti.FiltroGenerale(null, null, null, "VI", true, true, null, null).Count > 0 ||
                    domande_pagamento.FiltroInLavorazione().Count > 0;
                abilita_inserimento_nuova_domanda = permessi_operatore == 2 && progetto_selezionato_legale_rappresentante.OrdineFase > 3 &&
                    progetto_selezionato_legale_rappresentante.OrdineFase < 9 && progetto_selezionato_legale_rappresentante.OrdineStato == 1;
                //stati_progetto = new ProgettoStoricoCollectionProvider().Find(progetto_selezionato.IdProgetto, null, null);
                if (abilita_inserimento_nuova_domanda)
                {
                    int count = 0;
                    bool SelezionaDomandeSuccessive = false;
                    foreach (SiarLibrary.NotAutogeneratedClasses.RiepilogoDomandePagamento d in domande_pagamento)
                    {
                        if (d.IdDomandaPagamento == null)
                        {
                            count++;
                            if (SelezionaDomandeSuccessive)
                                list_abilita_inserimento.Add(d.Ordine);
                        }
                        //mi segno l'ordine dell'ultima domanda inserita
                        //Senza istruttoria conlusa
                        if (d.IdDomandaPagamento != null && (d.Approvata == null || d.Approvata))
                        {
                            if (d.Segnatura == null)
                            {
                                list_abilita_inserimento.Clear();
                                break;
                            }
                            else
                            {
                                if (d.CodTipo == "SLD" && !d.Annullata)
                                    list_abilita_inserimento.Clear();
                                SelezionaDomandeSuccessive = true;
                            }
                        }
                    }
                    if (count == domande_pagamento.Count)
                        prima_domanda = true;
                }
                #endregion
            }

            dgDomandeProgettoLegaleRappresentante.DataSource = domande_pagamento;
            dgDomandeProgettoLegaleRappresentante.ItemDataBound += new System.Web.UI.WebControls.DataGridItemEventHandler(dgDomandeProgetto_ItemDataBound);
            dgDomandeProgettoLegaleRappresentante.ShowFooter = true;
            dgDomandeProgettoLegaleRappresentante.FooterStyle.CssClass = "TotaliFooter";
            dgDomandeProgettoLegaleRappresentante.DataBind();

            divDettaglioProgettoLegaleRappresentante.Visible = true;
        }

        protected void popolaDatagridAmministratore()
        {
            popolaDatagridErroriPec();
            mostraAlias();
        }

        protected void popolaDatagridErroriPec()
        {
            if (profilo_utente.Equals("Amministratore"))
            {
                var errori_pec_collection = errori_pec_provider.FindErroriPecNonCorretti(null, 0, null, null);

                if (errori_pec_collection.Count > 0)
                {
                    lblNrRecordErroriPec.Text = string.Format("Visualizzate {0} righe", errori_pec_collection.Count.ToString());

                    dgErroriPec.DataSource = errori_pec_collection;
                    dgErroriPec.ItemDataBound += new System.Web.UI.WebControls.DataGridItemEventHandler(dgErroriPec_ItemDataBound);
                    dgErroriPec.DataBind();
                }
                else
                {
                    divRicercaErroriPec.Visible = false;
                    lblNrRecordErroriPec.Text = "Nessun errore trovato.";
                }

                divErroriPec.Visible = true;
            }
        }

        protected void mostraAlias()
        {
            if (profilo_utente.Equals("Amministratore"))
            {
                divOperatoreAlias.Visible = true;
                txtOperatoreAlias.AddJSAttribute("onkeydown", "SNCVolatileZoom(this,event,'SNCVZCercaUtenti');");
            }
        }

        protected void popolaDataGridIstruttoriaDomandaAiuto()
        {
            if (!(profilo_utente.Equals("Utente singolo") || profilo_utente.Equals("Consulente")))
            {
                var id_utente = ((SiarLibrary.Web.PrivatePage)Page).Operatore.Utente.IdUtente;
                VistruttoriaDomandeAiutoCollectionProvider domandeAiutoCollectionProvider = new VistruttoriaDomandeAiutoCollectionProvider();
                VistruttoriaDomandeAiutoCollection domandeAiutoCollection = new VistruttoriaDomandeAiutoCollection();
                VistruttoriaDomandeAiutoCollection domandeAiutoCollectionRicev = new VistruttoriaDomandeAiutoCollection();

                domandeAiutoCollection = domandeAiutoCollectionProvider.FindDomandeIstruttoria(null, null, id_utente, "I");
                domandeAiutoCollectionRicev = domandeAiutoCollectionProvider.FindDomandeIstruttoria(null, null, id_utente, "L");
                domandeAiutoCollection.AddCollection(domandeAiutoCollectionRicev);
                lstStatoDomandaIstruttoria.Items.Add(new ListItem("", ""));

                if (domandeAiutoCollection.Count > 0)
                {
                    divIstruttoriaDomandaAiuto.Visible = true;
                    dgIstruttoriaDomandaAiuto.DataSource = domandeAiutoCollection;
                    dgIstruttoriaDomandaAiuto.ItemDataBound += new System.Web.UI.WebControls.DataGridItemEventHandler(dgIstruttoriaDomandaAiuto_ItemDataBound);
                    dgIstruttoriaDomandaAiuto.DataBind();
                    lblIstruttoriaDomandaAiuto.Text = string.Format("Visualizzate {0} righe", domandeAiutoCollection.Count.ToString());
                }
                else
                {
                    divRicercaIstruttoriaDomandaAiuto.Visible = false;
                    lblIstruttoriaDomandaAiuto.Text = "Nessuna domanda da visualizzare";
                    divIstruttoriaDomandaAiuto.Visible = false;
                }

                divIstruttoriaDomandaAiuto.Visible = true;
            }
        }

        protected void popolaDataGridRichiesteAccessoAtti()
        {
            if (!(profilo_utente.Equals("Utente singolo") || profilo_utente.Equals("Consulente")))
            {
                var id_utente = ((SiarLibrary.Web.PrivatePage)Page).Operatore.Utente.IdUtente;
                ProgettoComunicazioneCollectionProvider comunicazioniProvider = new ProgettoComunicazioneCollectionProvider();
                ProgettoComunicazioneCollection comunicazioniCollection = new ProgettoComunicazioneCollection();

                comunicazioniCollection = comunicazioniProvider.FindRichiesteAccessoAtti(id_utente);

                if (comunicazioniCollection.Count > 0)
                {
                    divRichiesteAccessoAtti.Visible = true;
                    dgRichiesteAccessoAtti.DataSource = comunicazioniCollection;
                    dgRichiesteAccessoAtti.ItemDataBound += new System.Web.UI.WebControls.DataGridItemEventHandler(dgRichiesteAccessoAtti_ItemDataBound);
                    dgRichiesteAccessoAtti.DataBind();
                    lblRichiesteAccessoAtti.Text = string.Format("Visualizzate {0} righe", comunicazioniCollection.Count.ToString());
                }
                else
                {
                    //divRicercaIstruttoriaDomandaAiuto.Visible = false;
                    lblRichiesteAccessoAtti.Text = "Nessuna domanda da visualizzare";
                    divRichiesteAccessoAtti.Visible = false;
                }

                divRichiesteAccessoAtti.Visible = true;
            }
        }

        void dgRichiesteAccessoAtti_ItemDataBound(object sender, System.Web.UI.WebControls.DataGridItemEventArgs e)
        {
            DataGridItem dgi = (DataGridItem)e.Item;

            if (e.Item.ItemType == ListItemType.Item || e.Item.ItemType == ListItemType.AlternatingItem)
            {
                SiarLibrary.ProgettoComunicazione c = (SiarLibrary.ProgettoComunicazione)dgi.DataItem;
                e.Item.Cells[0].Text = c.AdditionalAttributes["ID_BANDO"].ToString();
                e.Item.Cells[1].Text = c.AdditionalAttributes["DESCRIZIONE_BANDO"].ToString();
            }

        }

        protected void btnAccettaRichieste_Click(object sender, EventArgs e)
        {
            SiarBLL.ProgettoComunicazioneCollectionProvider comunicazione_provider = new ProgettoComunicazioneCollectionProvider();
            SiarBLL.ProgettoComunicazioneAllegatoCollectionProvider allegato_provider = new ProgettoComunicazioneAllegatoCollectionProvider(comunicazione_provider.DbProviderObj);
            SiarBLL.BandoCollectionProvider bando_provider = new BandoCollectionProvider(comunicazione_provider.DbProviderObj);
            SiarBLL.ProgettoCollectionProvider progetto_provider = new ProgettoCollectionProvider(comunicazione_provider.DbProviderObj);
            SiarBLL.AllegatiProtocollatiCollectionProvider allegatiProtocollatiProvider = new SiarBLL.AllegatiProtocollatiCollectionProvider(comunicazione_provider.DbProviderObj);

            string error = "";
            List<int> comunicazioniInEccezione = new List<int>();
            List<int> eccezioniProtocollo = new List<int>();
            try
            {
                comunicazione_provider.DbProviderObj.BeginTran();

                string[] domande_selezionate = ((SiarLibrary.Web.CheckColumn)dgRichiesteAccessoAtti.Columns[7]).GetSelected();

                if (domande_selezionate.Count() == 0) throw new Exception("Selezionare almeno una domanda dalla lista.");

                List<int> nuoveComunicazioni = new List<int>();
                int idComunicazioneEccezione = -1;
                int idFileValutazione = 0;

                foreach (string id in domande_selezionate)
                {
                    try
                    {
                        error = id;
                        SiarLibrary.ProgettoComunicazione comunicazione_principale = comunicazione_provider.GetById(id);
                        SiarLibrary.ProgettoComunicazione c = new ProgettoComunicazione();
                        SiarLibrary.Progetto p = progetto_provider.GetById(comunicazione_principale.IdProgetto);
                        SiarLibrary.Bando b = bando_provider.GetById(p.IdBando);

                        c.IdComunicazioneRef = comunicazione_principale.IdComunicazione;
                        c.IdNote = null;
                        c.IdProgetto = comunicazione_principale.IdProgetto;
                        c.InEntrata = false;
                        c.Oggetto = "Permesso di accesso alla scheda di valutazione";
                        c.Operatore = ((PrivatePage)Page).Operatore.Utente.IdUtente;
                        c.CodTipo = "PAR";
                        c.PredispostaAllaFirma = false;
                        c.SegnaturaEsterna = false;
                        c.Testo = "La sua richiesta di accesso alla scheda di valutazione è stata accolta.";
                        c.TestoNote = null;
                        comunicazione_provider.Save(c);

                        SiarLibrary.AllegatiProtocollati ap = new SiarLibrary.AllegatiProtocollati();
                        ap.IdVariante = DBNull.Value;
                        ap.IdProgetto = DBNull.Value;
                        ap.IdComunicazione = c.IdComunicazione;
                        ap.IdIntegrazione = DBNull.Value;
                        idFileValutazione = new SiarBLL.ProgettoValutazioneCollectionProvider().Find(comunicazione_principale.IdProgetto, null, true, null, false)[0].IdFile;
                        ap.IdFile = idFileValutazione;
                        ap.Protocollato = false;
                        allegatiProtocollatiProvider.Save(ap);

                        idComunicazioneEccezione = c.IdComunicazione;

                        nuoveComunicazioni.Add(c.IdComunicazione);
                    }
                    catch (Exception ex)
                    {
                        error += id + " ";
                        if (idComunicazioneEccezione != -1 && !comunicazioniInEccezione.Contains(idComunicazioneEccezione))
                            comunicazioniInEccezione.Add(idComunicazioneEccezione);
                    }
                }
                comunicazione_provider.DbProviderObj.Commit();

                int idEccezioneProtocollo = -1;
                string segnatura = "";
                comunicazione_provider.DbProviderObj.BeginTran();
                foreach (int id in nuoveComunicazioni)
                {
                    try
                    {
                        SiarLibrary.ProgettoComunicazione comunicazione = comunicazione_provider.GetById(id);
                        SiarLibrary.Progetto p = progetto_provider.GetById(comunicazione.IdProgetto);
                        SiarLibrary.Bando b = bando_provider.GetById(p.IdBando);

                        SiarLibrary.ProgettoComunicazioneAllegato a = new ProgettoComunicazioneAllegato();
                        a.IdComunicazione = id;
                        a.IdFile = new SiarBLL.ProgettoValutazioneCollectionProvider().Find(comunicazione.IdProgetto, null, true, null, false)[0].IdFile; ;
                        a.IdProgetto = comunicazione.IdProgetto;
                        a.Descrizione = "Schede di valutazione del progetto: " + comunicazione.IdProgetto.ToString();

                        allegato_provider.Save(a);

                        // carico gli allegati su paleo
                        System.Collections.ArrayList allegatiProtocollo = new System.Collections.ArrayList();

                        SiarLibrary.ArchivioFile f = new SiarBLL.ArchivioFileCollectionProvider(comunicazione_provider.DbProviderObj).GetById(a.IdFile);

                        // carico il token di cohesion come allegato alla domanda
                        object sessione_cohesion = Session["COHESION_TOKEN"];
                        /*
                        if (sessione_cohesion == null || string.IsNullOrEmpty(sessione_cohesion.ToString()))
                            throw new Exception("Non è stata trovata nessuna informazione sull'operatore di rilascio, impossibile continuare.");

                        //p.addAllegato("Autenticazione_Operatore.xml", System.Text.Encoding.Unicode.GetBytes(sessione_cohesion.ToString()), "xml");

                        SiarBLL.paleoWebService.Allegato tokenAll = new SiarBLL.paleoWebService.Allegato();

                        tokenAll.Descrizione = "Autenticazione_Operatore.xml";
                        tokenAll.Documento = new SiarBLL.paleoWebService.File();
                        tokenAll.Documento.Nome = "Autenticazione_Operatore.xml";
                        tokenAll.Documento.Stream = System.Text.Encoding.Unicode.GetBytes(sessione_cohesion.ToString());
                        //a.Documento.Estensione = estensione;
                        //a.NumeroPagine = 1;
                        System.Collections.Generic.Dictionary<string, object> allegatoProtocolloToken = new System.Collections.Generic.Dictionary<string, object>();
                        allegatoProtocolloToken.Add("allegato", tokenAll);
                        allegatoProtocolloToken.Add("id_file", -1);
                        allegatoProtocolloToken.Add("tipo_origine", "comunicazione");
                        allegatoProtocolloToken.Add("id_origine", id);
                        allegatiProtocollo.Add(allegatoProtocolloToken);
                        */

                        //protocollo.addAllegato(f.NomeFile + "." + f.Tipo, f.Contenuto, f.Tipo);
                        SiarBLL.paleoWebService.Allegato all = new SiarBLL.paleoWebService.Allegato();
                        all.Descrizione = f.NomeCompleto;
                        all.Documento = new SiarBLL.paleoWebService.File();
                        all.Documento.NomeFile = f.NomeFile;

                        System.Collections.Generic.Dictionary<string, object> allegatoProtocollo = new System.Collections.Generic.Dictionary<string, object>();
                        allegatoProtocollo.Add("allegato", all);
                        allegatoProtocollo.Add("id_file", f.Id);
                        allegatoProtocollo.Add("tipo_origine", "comunicazione");
                        allegatoProtocollo.Add("id_origine", id);
                        allegatiProtocollo.Add(allegatoProtocollo);

                        try
                        {
                            segnatura = protocollaComunicazione(id, p, b, f, allegatiProtocollo);
                        }
                        catch (Exception ex)
                        {
                            idEccezioneProtocollo = id;
                        }
                        comunicazione.Segnatura = segnatura;

                        comunicazione_provider.Save(comunicazione);

                        sendMailAccessoAtti(comunicazione);
                    }
                    catch (Exception ex)
                    {
                        eccezioniProtocollo.Add(idEccezioneProtocollo);
                    }
                }
                comunicazione_provider.DbProviderObj.Commit();

                ((SiarLibrary.Web.PrivatePage)Page).ShowMessage("Schede di valutazione inviate correttamente agli utenti");
            }
            catch (Exception ex)
            {
                comunicazione_provider.DbProviderObj.Rollback();
                comunicazione_provider.DbProviderObj.BeginTran();
                foreach (int i in comunicazioniInEccezione)
                {
                    allegato_provider.DeleteCollection(allegato_provider.Find(i, null, null));
                    allegatiProtocollatiProvider.DeleteCollection(allegatiProtocollatiProvider.Find(null, null, null, null, i, null, null, null));
                    comunicazione_provider.Delete(i);
                }
                foreach (int i in eccezioniProtocollo)
                {
                    allegato_provider.DeleteCollection(allegato_provider.Find(i, null, null));
                    allegatiProtocollatiProvider.DeleteCollection(allegatiProtocollatiProvider.Find(null, null, null, null, i, null, null, null));
                    comunicazione_provider.Delete(i);
                }
                comunicazione_provider.DbProviderObj.Commit();
                ((SiarLibrary.Web.PrivatePage)Page).ShowError("La comunicazione per i progetti " + error + "ha generato un errore, riprovare.");
            }
        }

        private string protocollaComunicazione(int idComunicazione, Progetto p, Bando b, SiarLibrary.ArchivioFile f, ArrayList allegatiProtocollo)
        {
            string identificativo_paleo = "";

            SiarLibrary.Protocollo protocollo = new SiarLibrary.Protocollo(b.CodEnte);

            SiarLibrary.Impresa i = new SiarBLL.ImpresaCollectionProvider().GetById(p.IdImpresa);

            protocollo.setCorrispondente(i, p.IdProgetto, "destinatario");

            Session["evita_controllo_date_sessione"] = "true";
            SiarLibrary.ModelloDomandaCollection cc = new SiarBLL.ModelloDomandaCollectionProvider().Find(null, b.IdBando, null);

            protocollo.setDocumento("comunicazione_progetto_" + p.IdProgetto + ".pdf", GetDocumentoSingoloFromServer(p.IdProgetto, idComunicazione));

            string[] ss = new SiarBLL.BandoCollectionProvider().GetDatiXProtocollazione(b.IdBando, p.ProvinciaDiPresentazione);
            string oggetto = "COMUNICAZIONI per il bando: " + ss[0] + " del " + ss[1] + "\n" + ss[3] + "\nAnno: " + DateTime.Now.Year
                + "\n Partita IVA: " + i.Cuaa
                + "\n Ragione sociale: " + i.RagioneSociale
                + "\n N° Domanda SIGEF: " + p.IdProgetto;

            try
            {
                //se hash è null lo calcolo e lo salvo
                if (f.HashCode == null)
                {
                    // genero l'hash
                    HashAlgorithm alg = HashAlgorithm.Create("SHA256");
                    byte[] fileHashValue = alg.ComputeHash(f.Contenuto);
                    string hash_code = BinaryToHex(fileHashValue);
                    SiarBLL.ArchivioFileCollectionProvider file_provider = new SiarBLL.ArchivioFileCollectionProvider();
                    f.HashCode = hash_code;
                    file_provider.Save(f);
                    f = file_provider.GetById(f.Id);
                }

                protocollo.addAllegato(f.NomeFile, f.HashCode);
            }
            catch (Exception ex) { }

            identificativo_paleo = protocollo.ProtocolloUscita(oggetto, ss[4], false);

            protocollo.addAllegatiProtocollo(allegatiProtocollo, identificativo_paleo);

            return identificativo_paleo;
        }

        private string BinaryToHex(byte[] data)
        {
            char[] hex = new char[data.Length * 2];

            for (int iter = 0; iter < data.Length; iter++)
            {
                byte hexChar = ((byte)(data[iter] >> 4));
                hex[iter * 2] = (char)(hexChar > 9 ? hexChar + 0x37 : hexChar + 0x30);
                hexChar = ((byte)(data[iter] & 0xF));
                hex[(iter * 2) + 1] = (char)(hexChar > 9 ? hexChar + 0x37 : hexChar + 0x30);
            }
            return new string(hex);
        }

        protected byte[] GetDocumentoSingoloFromServer(int idProgetto, int idComunicazione)
        {
            SiarLibrary.Web.ReportTemplates rt = new SiarLibrary.Web.ReportTemplates();
            string[] tmp_parametri = new string[] { "IdProgetto=" + idProgetto, "IdComunicazione=" + idComunicazione };
            string nome_file = "";
            var report = rt.getReportByName("rptComunicazionGenerica", tmp_parametri);
            rt.Dispose();
            string nome_documento = "COMUNICAZIONE-";
            nome_file = nome_documento + String.Join("-", tmp_parametri).Replace('=', '_');

            return report;
        }

        protected void sendMailAccessoAtti(SiarLibrary.ProgettoComunicazione comunicazione)
        {
            try
            {
                // invio la notifica del rilascio all'email della sede legale dell'azienda  
                SiarLibrary.Progetto progetto = new SiarBLL.ProgettoCollectionProvider().GetById(comunicazione.IdProgetto);
                SiarLibrary.Impresa impresa = new SiarBLL.ImpresaCollectionProvider().GetById(progetto.IdImpresa);
                SiarLibrary.Indirizzario indirizzarioImpresaSedeLegaleUltimo = new SiarBLL.IndirizzarioCollectionProvider().GetById(impresa.IdSedelegaleUltimo);

                if (indirizzarioImpresaSedeLegaleUltimo != null && indirizzarioImpresaSedeLegaleUltimo.Email != null)
                {
                    SiarBLL.BandoCollectionProvider bandoProvider = new SiarBLL.BandoCollectionProvider();
                    SiarLibrary.Bando b = bandoProvider.GetById(progetto.IdBando);
                    SiarLibrary.Email em = new SiarLibrary.Email("Avviso di ricezione Comunicazione di " + comunicazione.Descrizione + " (Progetto: " + comunicazione.IdProgetto + ")",
                        "<html><body>Si comunica che è stata ricevuta la Comunicazione di " + comunicazione.Descrizione
                    + " per il Progetto ID: " + comunicazione.IdProgetto + "."
                    + "<br /><ul><li style='width:650px'>Bando: " + b.Descrizione + "</li><li>Scadenza: " + b.DataScadenza + "</li><br />"
                    + "<li>CF/P.Iva: " + impresa.CodiceFiscale + "</li><li style='width:650px'>Ragione sociale: "
                    + impresa.RagioneSociale + "</li></ul>"
                    + "<br />Tale comunicazione è consultabile all'indirizzo <a href='" + Request.Url.GetLeftPart(UriPartial.Authority) + Request.ApplicationPath + "' target=_blank>Clicca qui</a> ricercando la propria domanda nella sezione Ricerca e navigando nella sezione comunicazione"
                    + "<br /><br />Questa è una notifica automatica del sistema " + System.Configuration.ConfigurationManager.AppSettings["APP:NomeCompleto"]
                    + "<br />Si prega di non rispondere a questa email.</body></html>");
                    em.SetHtmlBodyMessage(true);
                    em.SendNotification(indirizzarioImpresaSedeLegaleUltimo.Email, new string[] { });
                }
            }
            catch (Exception exy)
            {
                ((SiarLibrary.Web.PrivatePage)Page).ShowError(exy.ToString());
            }
        }

        protected void popolaDataGridBandiRup()
        {
            if (profilo_utente.Contains("Responsabile di misura")
                || profilo_utente.Contains("Amministratore"))
            {
                divBandiRup.Visible = true;

                if (IsPostBack)
                {
                    string CtrlID = string.Empty;

                    if (Request.Form[hidSourceID.UniqueID] != null &&
                        Request.Form[hidSourceID.UniqueID] != string.Empty)
                        CtrlID = Request.Form[hidSourceID.UniqueID].Replace('_', '$');

                    if (CtrlID != null && CtrlID != string.Empty)
                    {
                        if (CtrlID == btnFilterBandiRup.UniqueID)
                        {
                            IntNT idBando = txtIdBandoRup.Text;
                            StringNT statoBando = lstStatoBandoRup.SelectedValue != "" ? lstStatoBandoRup.SelectedValue : null;

                            IntNT idProgetto = txtIdProgettoRup.Text;
                            StringNT statoProgetto = lstStatoProgettoRup.SelectedValue != "" ? lstStatoProgettoRup.SelectedValue : null;
                            IntNT idImpresa = lstImpresaProgettoRup.SelectedValue;
                            IntNT idIstruttore = lstIstruttoreProgettoRup.SelectedValue;

                            IntNT idDomandaPagamento = txtIdDomandaPagamentoRup.Text;
                            StringNT modalitaPagamento = lstModalitaPagamentoRup.SelectedValue != "" ? lstModalitaPagamentoRup.SelectedValue : null;
                            BoolNT annullata, firmaPredisposta;
                            string annullataString = lstAnnullataDomandaPagamentoRup.SelectedValue;
                            string firmaPredispostaString = lstFirmaPredispostaRup.SelectedValue;
                            if (annullataString == null || annullataString == "")
                                annullata = null;
                            else if (annullataString == "1")
                                annullata = true;
                            else if (annullataString == "0")
                                annullata = false;
                            else
                                throw new Exception("Errore nella selezione del valore per la domanda annullata");
                            if (firmaPredispostaString == null || firmaPredispostaString == "")
                                firmaPredisposta = null;
                            else if (firmaPredispostaString == "1")
                                firmaPredisposta = true;
                            else if (firmaPredispostaString == "0")
                                firmaPredisposta = false;
                            else
                                throw new Exception("Errore nella selezione del valore per la firma predisposta");

                            //var cruscotto_bandi_rup_collection = cruscotto_bandi_rup_provider.FindDomande(((PrivatePage)Page).Operatore.Utente.IdUtente);
                            var cruscotto_bandi_rup_collection = cruscotto_bandi_rup_provider.FindDomandeNew(
                                ((PrivatePage)Page).Operatore.Utente.IdUtente,
                                idBando,
                                statoBando,
                                idProgetto,
                                statoProgetto,
                                idImpresa,
                                idIstruttore,
                                idDomandaPagamento,
                                modalitaPagamento,
                                annullata,
                                firmaPredisposta
                                );
                            if (cruscotto_bandi_rup_collection.Count > 0)
                            {
                                lblNrRecordBandiRup.Text = string.Format("Visualizzate {0} righe", cruscotto_bandi_rup_collection.Count.ToString());

                                dgBandiRup.DataSource = cruscotto_bandi_rup_collection;
                                dgBandiRup.ItemDataBound += new DataGridItemEventHandler(dgBandiRup_ItemDataBound);
                                dgBandiRup.DataBind();
                            }
                            else
                            {
                                //divRicercaBandiRup.Visible = false;
                                lblNrRecordBandiRup.Text = "Nessun bando trovato.";
                            }

                            PagePrivate.RegisterClientScriptBlock("EmpySource();");
                        }
                        else
                            lblNrRecordBandiRup.Text = "Effettuare una ricerca per vedere le domande dei propri bandi.";
                    }
                    else
                        lblNrRecordBandiRup.Text = "Effettuare una ricerca per vedere le domande dei propri bandi.";
                }
                else
                    lblNrRecordBandiRup.Text = "Effettuare una ricerca per vedere le domande dei propri bandi.";
            }
        }

        protected void popolaDataGridBandiDefinitiviSenzaDecreto()
        {
            if (profilo_utente.Contains("Responsabile di misura")
                || profilo_utente.Contains("Amministratore"))
            {
                var bandi_collection = bandi_provider.getBandiDefinitiviSenzaDecreto(((PrivatePage)Page).Operatore.Utente.IdUtente);
                if (bandi_collection.Count > 0)
                {
                    lblNrRecordBandiDefinitiviSenzaDecreto.Text = string.Format("Visualizzate {0} righe", bandi_collection.Count.ToString());

                    dgBandiDefinitiviSenzaDecreto.DataSource = bandi_collection;
                    dgBandiDefinitiviSenzaDecreto.ItemDataBound += new System.Web.UI.WebControls.DataGridItemEventHandler(dgBandiDefinitiviSenzaDecreto_ItemDataBound);
                    dgBandiDefinitiviSenzaDecreto.DataBind();
                }
                else
                {
                    divRicercaBandiDefinitiviSenzaDecreto.Visible = false;
                    lblNrRecordBandiDefinitiviSenzaDecreto.Text = "Nessun bando trovato.";
                }

                divBandiDefinitiviSenzaDecreto.Visible = true;
            }
        }

        protected void popolaDataGridBandiPubblicatiSenzaProcAttivazione()
        {
            if (profilo_utente.Contains("Responsabile di misura"))
            {
                var bandi_collection = bandi_proc_att_provider.Find(null, ((PrivatePage)Page).Operatore.Utente.IdUtente);
                if (bandi_collection.Count > 0)
                {
                    lblNrRecordBandiPubblicatiSenzaProcAttivazione.Text = string.Format("Visualizzate {0} righe", bandi_collection.Count.ToString());

                    dgBandiPubblicatiSenzaProcAttivazione.DataSource = bandi_collection;
                    dgBandiPubblicatiSenzaProcAttivazione.ItemDataBound += new System.Web.UI.WebControls.DataGridItemEventHandler(dgBandiPubblicatiSenzaProcAttivazione_ItemDataBound);
                    dgBandiPubblicatiSenzaProcAttivazione.DataBind();
                }
                else
                {
                    divRicercaBandiPubblicatiSenzaProcAttivazione.Visible = false;
                    lblNrRecordBandiPubblicatiSenzaProcAttivazione.Text = "Nessun bando trovato.";
                }

                divBandiPubblicatiSenzaProcAttivazione.Visible = true;
            }
        }
        protected void popolaDataGridRichiesteProfilazione()
        {
            if (profilo_utente.Equals("Amministratore") || ((PrivatePage)Page).Operatore.Utente.CfUtente == "PLLNDR66P11E783M" || ((PrivatePage)Page).Operatore.Utente.CfUtente == "CRTSNL63P66C770Y")
            {
                SiarLibrary.RichiestaProfilazioneCollection richieste_prof = richiesta_prof_provider.FindDomandeDaApprovare(null);
                SiarLibrary.RichiestaProfilazioneCollection richieste_prof2 = new SiarLibrary.RichiestaProfilazioneCollection();
                if (profilo_utente.Equals("Amministratore"))
                    richieste_prof2 = richieste_prof;
                else
                {
                    foreach (SiarLibrary.RichiestaProfilazione richiesta in richieste_prof)
                    {
                        if ((richiesta.FondiFesr || richiesta.FondiFesr == null) && ((PrivatePage)Page).Operatore.Utente.CfUtente == "PLLNDR66P11E783M")
                            richieste_prof2.Add(richiesta);
                        if ((!richiesta.FondiFesr && richiesta.FondiFesr != null) && ((PrivatePage)Page).Operatore.Utente.CfUtente == "CRTSNL63P66C770Y")
                            richieste_prof2.Add(richiesta);
                    }
                }
                if (richieste_prof2.Count > 0)
                {
                    dgRichiesteProfilazione.DataSource = richieste_prof2;
                    dgRichiesteProfilazione.ItemDataBound += new System.Web.UI.WebControls.DataGridItemEventHandler(dgRichiesteProfilazione_ItemDataBound);
                    dgRichiesteProfilazione.DataBind();
                    divRichiesteProfilazione.Visible = true;
                }
            }
            else
                divRichiesteProfilazione.Visible = false;
        }

        protected void popolaDataGridRichiesteConsulente()
        {
            if (profilo_utente.Equals("Amministratore"))
            {
                ucFirmaDocumento.DocumentoFirmatoEvent = ProtocollaDocFirmatoEvent;

                var richieste_collection = rich_cons_provider.Find(null, null, null, true, false, null, null, false);

                if (richieste_collection.Count > 0)
                {
                    dgRichiesteConsulente.DataSource = richieste_collection;
                    dgRichiesteConsulente.ItemDataBound += new System.Web.UI.WebControls.DataGridItemEventHandler(dgRichiesteConsulente_ItemDataBound);
                    dgRichiesteConsulente.DataBind();
                    divRichCons.Visible = true;
                }
            }
        }

        protected void popolaDataGridRichiesteAssistenza()
        {
            if (profilo_utente.Equals("Amministratore"))
            {

                var richieste_collection = rich_assistenza_provider.Find(null, null, null, null, false, null, null, null);

                if (richieste_collection.Count > 0)
                {
                    dgRichiesteAssistenza.DataSource = richieste_collection;
                    dgRichiesteAssistenza.ItemDataBound += new System.Web.UI.WebControls.DataGridItemEventHandler(dgRichiesteAssistenza_ItemDataBound);
                    dgRichiesteAssistenza.DataBind();
                    divRichAssistenza.Visible = true;
                }
            }
        }

        protected void popolaDataGridRichiesteConsulenteProcura()
        {
            if (profilo_utente.Equals("Responsabile di misura"))
            {
                ucFirmaDocumento.DocumentoFirmatoEvent = ProtocollaDocFirmatoProcuraEvent;

                var richieste_collection = rich_cons_provider.GetrRichistaConsulenteProcuraByRup(((PrivatePage)Page).Operatore.Utente.IdUtente);

                if (richieste_collection.Count > 0)
                {
                    dgRichiesteConsulenteProcura.DataSource = richieste_collection;
                    dgRichiesteConsulenteProcura.ItemDataBound += new System.Web.UI.WebControls.DataGridItemEventHandler(dgRichiesteConsulenteProcura_ItemDataBound);
                    dgRichiesteConsulenteProcura.DataBind();
                    divRichConsProc.Visible = true;
                }
            }
        }

        protected void popolaDataGridNews()
        {
            labelNews.Text = "Vengono visualizzate le 5 notizie più recenti. <a href=" + PATH_PUBLIC + "newscomunicazioni.aspx>Cliccare qui per vederle tutte</a>";

            var news_coll = news_provider.GetUltimeNews(5);
            dgNewsCruscotto.DataSource = news_coll;
            dgNewsCruscotto.ItemDataBound += new System.Web.UI.WebControls.DataGridItemEventHandler(dgNewsCruscotto_ItemDataBound);
            dgNewsCruscotto.DataBind();
        }

        protected void popolaDivRNA()
        {
            RnaEntiCollectionProvider rnaEntiCollectionProvider = new RnaEntiCollectionProvider();
            bool pswInScadenza = false;
            bool operatoreRNA = false;
            UtentiStoricoCollectionProvider storico_provider = new UtentiStoricoCollectionProvider();
            UtentiStoricoCollection u_coll = storico_provider.Find(((SiarLibrary.Web.PrivatePage)Page).Operatore.Utente.IdUtente, null, null, true);
            if (u_coll.Count > 0)
            {
                foreach (SiarLibrary.UtentiStorico us in u_coll)
                    if (us.Profilo == "Operatore RNA")
                        operatoreRNA = true;
            }
            if (operatoreRNA)
            {
                var account_disponibili = rnaEntiCollectionProvider.Select(null, ((SiarLibrary.Web.PrivatePage)Page).Operatore.Utente.CodEnte, null, null, 1, null, null, null, null);
                foreach (RnaEnti account in account_disponibili)
                {
                    if (account.DataPassword != null)
                    {
                        int giorniAllaScadenza = (DateTime.Now.Date - account.DataPassword).Days;
                        giorniAllaScadenza = 183 - giorniAllaScadenza; //183 sono in media i giorni in 6 mesi, 
                        if (giorniAllaScadenza <= 8 && giorniAllaScadenza > -2)//invece che 7 giorni precisi, per stare larghi
                        {
                            lblRnaAccount.Text += "-" + account.DescrizioneAccount + "<br />";
                            pswInScadenza = true;
                        }
                    }
                }
                if (pswInScadenza)
                    divRnaPsw.Visible = true;
            }
        }

        #endregion

        #region ItemDataBound

        void dgNewsCruscotto_ItemDataBound(object sender, System.Web.UI.WebControls.DataGridItemEventArgs e)
        {
            int col_DataNews = 0,
                col_DescrizioneNews = 1,
                col_InterruzioneNews = 2,
                col_DataInizioInterruzione = 3,
                col_DataFineInterruzione = 4;

            DataGridItem dgi = (DataGridItem)e.Item;

            if (e.Item.ItemType == ListItemType.Item || e.Item.ItemType == ListItemType.AlternatingItem)
            {
                var news = (News)dgi.DataItem;

                dgi.Cells[col_DescrizioneNews].Text = "<b>" + news.Titolo + "</b> <br/><br/> " + news.Testo + " <br/>";

                if (news.InterruzioneSistema != null && news.InterruzioneSistema)
                {
                    dgi.Cells[col_InterruzioneNews].Text = dgi.Cells[col_InterruzioneNews].Text.Replace("input ", "input checked ");
                    dgi.Cells[col_DataInizioInterruzione].Text = news.DataInizio.ToString("dd/MM/yyyy HH:mm");
                    dgi.Cells[col_DataFineInterruzione].Text = news.DataFine.ToString("dd/MM/yyyy HH:mm");
                }
                else
                    dgi.Cells[col_InterruzioneNews].Text = dgi.Cells[col_InterruzioneNews].Text.Replace("checked", "");
            }
        }

        void dgDomandeIstruttore_ItemDataBound(object sender, System.Web.UI.WebControls.DataGridItemEventArgs e)
        {
            int col_Idbando = 0,
                col_DescrizioneBando = 1,
                col_DataScadenzaBando = 2,
                col_IdProgetto = 3,
                col_Stato = 4,
                col_Impresa = 5,
                col_Comunicazioni = 6,
                col_IdDomandaPagamento = 7,
                col_FaseDomandaPagamento = 8,
                col_Annullata = 9,
                col_ImportoRichiesto = 10,
                col_ContributoRichiesto = 11,
                col_SegnaturaDomandaPagamento = 12,
                col_visualizzaDomanda = 13,
                col_firma_predisposta = 14,
                col_istruttoria = 15;

            DataGridItem dgi = (DataGridItem)e.Item;

            if (dgi.ItemType == ListItemType.Header)
            {
                dgi.CssClass = "TESTA1";
                dgi.Cells[0].ColumnSpan = 3;
                dgi.Cells[0].HorizontalAlign = HorizontalAlign.Center;
                dgi.Cells[0].Text = "Bando di gara</td><td colspan=4 align=center>Dati domanda</td><td colspan=7 align=center>Domanda di pagamento</td><td colspan=2 align=center>Sezione istruttoria</td></tr><tr class='TESTA'><td>Id";
            }
            else if (e.Item.ItemType == ListItemType.Item || e.Item.ItemType == ListItemType.AlternatingItem)
            {
                VcruscottoDomande cruscotto = (VcruscottoDomande)dgi.DataItem;
                permessi_operatore = DbStaticProvider.GetPermessiOperatoreSuGestioneLavori(cruscotto.IdProgetto, ((SiarLibrary.Web.PrivatePage)Page).Operatore.Utente.IdUtente, null);
                bool in_istruttoria = !cruscotto.Annullata && cruscotto.Approvata == null;

                dgi.Cells[col_visualizzaDomanda].Text = "<input type=button onclick=\"location='" + PATH_PPAGAMENTO + "DatiAnagrafici.aspx?idpag="
                        + cruscotto.IdDomandaPagamento + "'\" value='Visualizza la domanda' style='width:150px' class='ButtonGrid'/>";

                if (cruscotto.SegnaturaDomandaPagamento != null)
                {
                    //dgi.Cells[col_SegnaturaDomandaPagamento].Text = "<img src='" + PATH_IMAGES + "print_ico.gif' alt='Domanda'  onclick=\"sncAjaxCallVisualizzaProtocollo('" + cruscotto.SegnaturaDomandaPagamento + "');\" style='cursor: pointer;'>";
                    dgi.Cells[col_SegnaturaDomandaPagamento].Text = "<img src='" + PATH_IMAGES + "print_ico.gif' alt='Domanda'  onclick=\"MostraProtocolloNewCruscotto('" + cruscotto.SegnaturaDomandaPagamento + "');\" style='cursor: pointer;'>";

                    var utAppalto = bando_config_provider.GetBandoConfig_TpAppaltoDescrizione(cruscotto.IdBando);
                    if (utAppalto != null && utAppalto == "Strumenti finanziari")
                        strumenti_finanziari = true;
                    else
                        strumenti_finanziari = false;

                    if (strumenti_finanziari)
                    {
                        var richiesto = pag_rich_fem_provider
                            .Find(null, null, null, null, cruscotto.IdDomandaPagamento, null)
                            .ToArrayList<PagamentiRichiestiFem>()
                            .Sum(p => p.ImportoRichiesto);

                        dgi.Cells[col_ImportoRichiesto].Text = richiesto + " €";
                        dgi.Cells[col_ContributoRichiesto].Text = richiesto + " €";
                    }
                }

                if (cruscotto.FirmaPredispostaRup != null && cruscotto.FirmaPredispostaRup)
                {
                    dgi.Cells[col_firma_predisposta].Text = "Firma predisposta";
                    var firma_item = new ListItem("Firma predisposta", cruscotto.FirmaPredispostaRup);
                    if (!lstFirmaPredispostaIstruttore.Items.Contains(firma_item))
                        lstFirmaPredispostaIstruttore.Items.Add(firma_item);
                }
                else
                {
                    dgi.Cells[col_firma_predisposta].Text = "Firma NON predisposta";
                    var firma_item = new ListItem("Firma NON predisposta", cruscotto.FirmaPredispostaRup);
                    if (!lstFirmaPredispostaIstruttore.Items.Contains(firma_item))
                        lstFirmaPredispostaIstruttore.Items.Add(firma_item);
                }

                if (cruscotto.Annullata == null || !cruscotto.Annullata)
                    dgi.Cells[col_Annullata].Text = dgi.Cells[col_Annullata].Text.Replace("checked", "");
                else
                    dgi.Cells[col_Annullata].Text = dgi.Cells[col_Annullata].Text.Replace("input ", "input checked ");

                if (permessi_operatore > 2)
                {
                    string testo = "Visualizza istruttoria";
                    if (permessi_operatore == 3 && in_istruttoria)
                        testo = "Istruisci la pratica";
                    else if (permessi_operatore == 4 && cruscotto.FirmaPredispostaRup)
                        testo = "Firma la pratica";
                    dgi.Cells[col_istruttoria].Text = "<input type=button onclick=\"location='" + PATH_IPAGAMENTO + "CheckListPagamento.aspx?idpag="
                        + cruscotto.IdDomandaPagamento + "'\" value='" + testo + "' style='width:150px' class='ButtonGrid'/>";
                }

                var stato_progetto_item = new ListItem(cruscotto.Stato, cruscotto.CodStatoProgetto);
                if (!lstStatoProgettoIstruttore.Items.Contains(stato_progetto_item))
                    lstStatoProgettoIstruttore.Items.Add(stato_progetto_item);

                var imp_item = new ListItem(cruscotto.Impresa, cruscotto.IdImpresa);
                if (!lstImpresaProgettoIstruttore.Items.Contains(imp_item))
                    lstImpresaProgettoIstruttore.Items.Add(imp_item);

                var modalita_pagamento_item = new ListItem(cruscotto.FaseDomandaPagamento, cruscotto.FaseDomandaPagamento);
                if (!lstModalitaPagamentoIstruttore.Items.Contains(modalita_pagamento_item))
                    lstModalitaPagamentoIstruttore.Items.Add(modalita_pagamento_item);
            }
        }

        void dgBandiRup_ItemDataBound(object sender, System.Web.UI.WebControls.DataGridItemEventArgs e)
        {
            int col_IdBando = 0,
                col_DescrizioneBando = 1,
                col_StatoBando = 2,
                col_DataScadenzaBando = 3,
                col_IdProgetto = 4,
                col_Stato = 5,
                col_Impresa = 6,
                col_Istruttore = 7,
                col_Comunicazioni = 8,
                col_IdDomandaPagamento = 9,
                col_FaseDomandaPagamento = 10,
                col_Annullata = 11,
                col_ImportoRichiesto = 12,
                col_ContributoRichiesto = 13,
                col_firma_predisposta = 14,
                col_visualizzaDomanda = 15,
                col_azione = 16;

            DataGridItem dgi = (DataGridItem)e.Item;

            if (dgi.ItemType == ListItemType.Header)
            {
                dgi.CssClass = "TESTA1";
                dgi.Cells[0].ColumnSpan = 4;
                dgi.Cells[0].HorizontalAlign = HorizontalAlign.Center;
                dgi.Cells[0].Text = "Bando di gara</td><td colspan=5 align=center>Domanda di aiuto</td><td colspan=7 align=center>Domanda di pagamento</td><td align=center>Azione</td></tr><tr class='TESTA'><td>Id";
            }
            else if (e.Item.ItemType == ListItemType.Item || e.Item.ItemType == ListItemType.AlternatingItem)
            {
                VcruscottoBandiRup cruscotto = (VcruscottoBandiRup)dgi.DataItem;

                bool in_istruttoria = false;
                if (cruscotto.IdProgetto != null)
                {
                    permessi_operatore = DbStaticProvider.GetPermessiOperatoreSuGestioneLavori(cruscotto.IdProgetto, ((SiarLibrary.Web.PrivatePage)Page).Operatore.Utente.IdUtente, null);

                    if (cruscotto.IdDomandaPagamento != null) 
                    {
                        in_istruttoria = !cruscotto.Annullata && cruscotto.Approvata == null;

                        if (cruscotto.SegnaturaDomandaPagamento != null)
                        {
                            dgi.Cells[col_visualizzaDomanda].Text = "<input type=button onclick=\"location='" + PATH_PPAGAMENTO + "DatiAnagrafici.aspx?idpag="
                                + cruscotto.IdDomandaPagamento + "'\" value='Visualizza la domanda' style='width:150px' class='ButtonGrid'/>";

                            if (cruscotto.FirmaPredispostaRup != null && cruscotto.FirmaPredispostaRup)
                                dgi.Cells[col_firma_predisposta].Text = "Firma predisposta";
                            else
                                dgi.Cells[col_firma_predisposta].Text = "Firma NON predisposta";

                            if (permessi_operatore > 2)
                            {
                                string testo = "Visualizza istruttoria";
                                if (permessi_operatore == 3 && in_istruttoria)
                                {
                                    testo = "Istruisci la pratica";
                                    dgi.Cells[col_visualizzaDomanda].Text = null;
                                }
                                else if (permessi_operatore == 4 && cruscotto.FirmaPredispostaRup)
                                {
                                    testo = "Firma la pratica";
                                    dgi.Cells[col_visualizzaDomanda].Text = null;
                                }
                                dgi.Cells[col_azione].Text = "<input type=button onclick=\"location='" + PATH_IPAGAMENTO + "CheckListPagamento.aspx?idpag="
                                    + cruscotto.IdDomandaPagamento + "'\" value='" + testo + "' style='width:150px' class='ButtonGrid'/>";
                            }
                            var modalita_pagamento_item = new ListItem(cruscotto.FaseDomandaPagamento, cruscotto.FaseDomandaPagamento);
                            if (!lstModalitaPagamentoRup.Items.Contains(modalita_pagamento_item))
                                lstModalitaPagamentoRup.Items.Add(modalita_pagamento_item);

                            var utAppalto = bando_config_provider.GetBandoConfig_TpAppaltoDescrizione(cruscotto.IdBando);
                            if (utAppalto != null && utAppalto == "Strumenti finanziari")
                                strumenti_finanziari = true;
                            else
                                strumenti_finanziari = false;

                            if (strumenti_finanziari)
                            {
                                var richiesto = pag_rich_fem_provider
                                    .Find(null, null, null, null, cruscotto.IdDomandaPagamento, null)
                                    .ToArrayList<PagamentiRichiestiFem>()
                                    .Sum(p => p.ImportoRichiesto);

                                dgi.Cells[col_ImportoRichiesto].Text = richiesto + " €";
                                dgi.Cells[col_ContributoRichiesto].Text = richiesto + " €";
                            }

                            if (cruscotto.Annullata == null || !cruscotto.Annullata)
                                dgi.Cells[col_Annullata].Text = dgi.Cells[col_Annullata].Text.Replace("checked", "");
                            else
                                dgi.Cells[col_Annullata].Text = dgi.Cells[col_Annullata].Text.Replace("input ", "input checked ");
                        }
                        else
                        {
                            dgi.Cells[col_visualizzaDomanda].Text = "";
                            dgi.Cells[col_firma_predisposta].Text = "";
                            dgi.Cells[col_azione].Text = "Domanda pagamento non rilasciata";
                            dgi.Cells[col_Annullata].Text = dgi.Cells[col_Annullata].Text.Replace("checked", "");
                        }
                    }
                    else if (cruscotto.StatoProgetto.Equals("Provvisorio"))
                    {
                        dgi.Cells[col_visualizzaDomanda].Text = "";
                        dgi.Cells[col_firma_predisposta].Text = "";
                        dgi.Cells[col_azione].Text = "Domanda non rilasciata";
                        dgi.Cells[col_Comunicazioni].Text = "";
                        dgi.Cells[col_Annullata].Text = dgi.Cells[col_Annullata].Text.Replace("checked", "");
                    }
                    else
                    {
                        dgi.Cells[col_visualizzaDomanda].Text = "";
                        dgi.Cells[col_firma_predisposta].Text = "";
                        dgi.Cells[col_azione].Text = "Domande pagamento non presentate";
                        dgi.Cells[col_Annullata].Text = dgi.Cells[col_Annullata].Text.Replace("checked", "");
                    }

                    var stato_prog_item = new ListItem(cruscotto.StatoProgetto, cruscotto.StatoProgetto);
                    if (!lstStatoProgettoRup.Items.Contains(stato_prog_item))
                        lstStatoProgettoRup.Items.Add(stato_prog_item);

                    if (cruscotto.IdIstruttoreProgetto != null)
                    {
                        //var istr_item = new ListItem(cruscotto.IstruttoreProgetto, cruscotto.IdIstruttoreProgetto);
                        //if (!lstIstruttoreProgettoRup.Items.Contains(istr_item))
                        //    lstIstruttoreProgettoRup.Items.Add(istr_item);
                    }
                    else if (cruscotto.StatoProgetto.Equals("Rilasciato/Definitivo"))
                    {
                        string url = PATH_ISTRUTTORIA + "AssegnazioneDomande.aspx?idb=" + cruscotto.IdBando;
                        dgi.Cells[col_azione].Text = "<input type=button onclick=\"location='" + url + "'\"' value ='Assegna istruttore' style='width:100%' class='ButtonGrid'/>";
                    }
                }
                else if (cruscotto.StatoBando.Equals("In lavorazione"))
                {
                    dgi.Cells[col_visualizzaDomanda].Text = "";
                    dgi.Cells[col_firma_predisposta].Text = "";
                    dgi.Cells[col_azione].Text = "";
                    dgi.Cells[col_Comunicazioni].Text = "";

                    string url = PATH_PSR_BANDI + "dettaglio.aspx?idb=" + cruscotto.IdBando;
                    dgi.Cells[col_azione].Text = "<input type=button onclick=\"location='" + url + "'\"' value ='Sezione dettaglio' style='width:100%' class='ButtonGrid'/>";
                }
                else
                {
                    dgi.Cells[col_visualizzaDomanda].Text = "";
                    dgi.Cells[col_firma_predisposta].Text = "";
                    dgi.Cells[col_azione].Text = "Nessuna partecipazione al bando";
                    dgi.Cells[col_Comunicazioni].Text = "";
                }
            }
        }

        void dgBandiDefinitiviSenzaDecreto_ItemDataBound(object sender, System.Web.UI.WebControls.DataGridItemEventArgs e)
        {
            DataGridItem dgi = (DataGridItem)e.Item;

            if (dgi.ItemType == ListItemType.Header)
            {
                dgi.CssClass = "TESTA1";
                dgi.Cells[0].ColumnSpan = 4;
                dgi.Cells[0].HorizontalAlign = HorizontalAlign.Center;
                dgi.Cells[0].Text = "Bando di gara</td><td align=center>Azione</td></tr><tr class='TESTA'><td>";
            }
            else if (e.Item.ItemType == ListItemType.Item || e.Item.ItemType == ListItemType.AlternatingItem)
            {
                var cruscotto = (Bando)dgi.DataItem;

                int col_info = 0,
                    col_IdBando = 1,
                    col_DescrizioneBando = 2,
                    col_DataScadenzaBando = 3,
                    col_azione = 4;

                dgi.Cells[col_info].Text =
                   " <a id='linkBando" + cruscotto.IdBando + "' href='javascript:mostraPopupDocumentiBando(" + cruscotto.IdBando + ")'> <img title='Info sul bando' src='" + PATH_IMAGES + "info.ico' /> </a> ";

                string url = PATH_ISTRUTTORIA + "Graduatoria.aspx?idb=" + cruscotto.IdBando;
                dgi.Cells[col_azione].Text = "<input type=button onclick=\"location='" + url + "'\"' value ='Vai alla graduatoria' style='width:100%' class='ButtonGrid'/>";

            }
        }

        void dgBandiPubblicatiSenzaProcAttivazione_ItemDataBound(object sender, System.Web.UI.WebControls.DataGridItemEventArgs e)
        {
            DataGridItem dgi = (DataGridItem)e.Item;

            if (dgi.ItemType == ListItemType.Header)
            {
                dgi.CssClass = "TESTA1";
                dgi.Cells[0].ColumnSpan = 4;
                dgi.Cells[0].HorizontalAlign = HorizontalAlign.Center;
                dgi.Cells[0].Text = "Bando di gara</td><td align=center>Azione</td></tr><tr class='TESTA'><td>";
            }
            else if (e.Item.ItemType == ListItemType.Item || e.Item.ItemType == ListItemType.AlternatingItem)
            {
                var cruscotto = (VcruscottoBandiProcAttivazione)dgi.DataItem;

                int col_info = 0,
                    col_IdBando = 1,
                    col_DescrizioneBando = 2,
                    col_DataScadenzaBando = 3,
                    col_azione = 4;

                dgi.Cells[col_info].Text =
                   " <a id='linkBando" + cruscotto.IdBando + "' href='javascript:mostraPopupDocumentiBando(" + cruscotto.IdBando + ")'> <img title='Info sul bando' src='" + PATH_IMAGES + "info.ico' /> </a> ";

                //string url = PATH_ISTRUTTORIA + "Graduatoria.aspx?idb=" + cruscotto.IdBando;
                //dgi.Cells[col_azione].Text = "<input type=button onclick=\"location='" + url + "'\"' value ='Vai alla graduatoria' style='width:100%' class='ButtonGrid'/>";

            }
        }

        void dgVarianti_ItemDataBound(object sender, System.Web.UI.WebControls.DataGridItemEventArgs e)
        {
            DataGridItem dgi = (DataGridItem)e.Item;

            if (dgi.ItemType == ListItemType.Header)
            {
                dgi.CssClass = "TESTA1";
                dgi.Cells[0].ColumnSpan = 3;
                dgi.Cells[0].HorizontalAlign = HorizontalAlign.Center;
                dgi.Cells[0].Text = "Bando di gara</td><td colspan=3 align=center>Dati domanda</td><td colspan=4 align=center>Varianti/A.T.</td><td colspan=3 align=center>Riepilogo istruttoria</td><td colspan=2 align=center>Sezione Istruttoria</td></tr><tr class='TESTA'><td>Id";
            }
            else if (e.Item.ItemType == ListItemType.Item || e.Item.ItemType == ListItemType.AlternatingItem)
            {
                VcruscottoVarianti cruscotto = (VcruscottoVarianti)dgi.DataItem;
                var varianti_provider = new VariantiCollectionProvider();
                var v = varianti_provider.GetById(cruscotto.IdVariante);

                int col_Idbando = 0,
                    col_DescrizioneBando = 1,
                    col_DataScadenzaBando = 2,
                    col_IdProgetto = 3,
                    col_StatoProgetto = 4,
                    col_Impresa = 5,
                    col_VariazioneBeneficiario = 6,
                    col_DataVariante = 7,
                    col_Modalita = 8,
                    col_OperatoreVariante = 9,
                    col_Istruita = 10,
                    col_Approvata = 11,
                    col_OperatoreIstruttoria = 12,
                    col_firma_predisposta = 13,
                    col_ButtonLink = 14;

                if (v.CuaaEntrante != null)
                    dgi.Cells[col_VariazioneBeneficiario].Text = "<img src='" + PATH_IMAGES + "soggetto.ico' alt='Variante con richiesta di cambio beneficiario' />";

                //if (v.Annullata)
                //{
                //    dgi.Cells[11].Text = "ANNULLATA DAL RICHIEDENTE";
                //    for (int i = col_DataVariante; i < col_Istruita; i++)
                //        dgi.Cells[i].Style.Add("text-decoration", "line-through");
                //}

                if (v.CodTipo.FindValueIn("VI", "AR"))
                    dgi.Cells[col_Modalita].Text = "<b>" + v.TipoVariante + "</b>";
                else
                    dgi.Cells[col_Modalita].Text = "<b>" + v.TipoVariante + ": </b>"
                        + (v.Descrizione == null ? "" : (v.Descrizione.Value.Length > 120 ?
                            v.Descrizione.Value.Substring(0, 117) + "..." : v.Descrizione.Value));

                dgi.Cells[col_OperatoreVariante].Text = "Nominativo: <b>" + v.Nominativo + "</b><br />Ruolo: <b>" + v.Profilo + "</b><br />Ente: <b>" + v.Ente + "</b>";

                if (v.SegnaturaApprovazione != null || (v.CodTipo == "VI" && v.Approvata != null))
                    dgi.Cells[col_Istruita].Text = "<input type='checkbox' disabled=true checked />";
                else
                {
                    dgi.Cells[col_Istruita].Text = "<input type='checkbox' disabled=true />";
                    dgi.Cells[col_Approvata].Text = "";
                    dgi.Cells[col_OperatoreIstruttoria].Text = "";
                }

                if (cruscotto.FirmaPredispostaRup != null && cruscotto.FirmaPredispostaRup)
                    dgi.Cells[col_firma_predisposta].Text = "Firma predisposta";
                else
                    dgi.Cells[col_firma_predisposta].Text = "Firma NON predisposta";


                int tipo_modifica = DbStaticProvider.GetPermessiOperatoreSuVariante(v.IdVariante,
                    ((PrivatePage)Page).Operatore.Utente.IdUtente, varianti_provider.DbProviderObj);
                if (tipo_modifica > 0)
                {
                    string testo, url;
                    AllegatiProtocollatiCollectionProvider allegatiProvider = new AllegatiProtocollatiCollectionProvider();
                    AllegatiProtocollatiCollection ff = allegatiProvider.Find(null, null, v.IdVariante, null, null, null, null, null);
                    int numeroAllegati = ff.Count;
                    //bool documentiVarianteOk = checkAllegatiProtocollatiVariante(v, numeroAllegati);
                    bool documentiVarianteOk = allegatiProvider.CheckAllegatiProtocollati(AllegatiProtocollatiCollectionProvider.TipoCheck.Variante, v.IdVariante, v.Segnatura);
                    switch (tipo_modifica)
                    {
                        case 4:
                            if (documentiVarianteOk)
                            {
                                if (!cruscotto.FirmaPredispostaRup)
                                    testo = "Visualizza istruttoria";
                                else
                                    testo = "Firma istruttoria";
                                url = PATH_IVARIANTE + "Riepilogo.aspx?idvar=" + v.IdVariante;
                            }
                            else
                            {
                                testo = "Protocolla gli allegati";
                                url = PATH_PVARIANTE + "FirmaRichiesta.aspx?idvar=" + v.IdVariante;
                            }
                            break;
                        case 3:
                            if (v.CodTipo.FindValueIn("VI", "AR"))
                            {
                                testo = "Modifica la variazione";
                                url = PATH_IVARIANTE + "Riepilogo.aspx?idvar=" + v.IdVariante;
                            }
                            else if (documentiVarianteOk)
                            {
                                testo = "Istruisci la richiesta";
                                url = PATH_IVARIANTE + "Riepilogo.aspx?idvar=" + v.IdVariante;
                            }
                            else
                            {
                                testo = "Protocolla gli allegati";
                                url = PATH_PVARIANTE + "FirmaRichiesta.aspx?idvar=" + v.IdVariante;
                            }
                            break;
                        case 2:
                            testo = "Modifica la richiesta";
                            url = PATH_PVARIANTE + "Riepilogo.aspx?idvar=" + v.IdVariante;
                            break;
                        default:
                            testo = "Visualizza";
                            bool in_lavorazione = v.CodTipo.FindValueIn("AT", "VA") && v.Segnatura == null;
                            bool in_attesa_protocollazione_documenti = v.CodTipo.FindValueIn("AT", "VA") && v.Segnatura != null && !documentiVarianteOk;
                            bool istruttoria = !in_attesa_protocollazione_documenti && !in_lavorazione && (v.CodTipo == "VI" ? v.Approvata == null : v.SegnaturaApprovazione == null);
                            if (istruttoria)
                            {
                                if (v.CodTipo.FindValueIn("VI", "AR")) dgi.Cells[8].Text = "istruttoria in corso";
                                else dgi.Cells[12].Text = "<table class='news' style='margin:5px' cellpadding=0 cellspacing=0><tr><td class='newsHeader'>ISTRUTTORIA IN CORSO</td></tr><tr><td class=news style='height:30px;width:150px;text-align:center;color:black;border-top:none;border-bottom:solid 1px black' onclick=\"sncAjaxCallVisualizzaProtocollo('"
                                    + v.Segnatura + "');\">Visualizza documento firmato</td></tr><tr><td class=news style='height:30px;width:150px;text-align:center;color:black;border-top:none' onclick=\"SNCVisualizzaReport('rptRicevutaProtocollazioneVariante',1,'IdVariante="
                                    + v.IdVariante + "');\">Stampa la ricevuta di protocollazione</td></tr></table>";
                                return;
                            }
                            else if (in_attesa_protocollazione_documenti)
                            {
                                testo = "Protocolla gli allegati";
                                url = PATH_PVARIANTE + "FirmaRichiesta.aspx?idvar=" + v.IdVariante;
                            }
                            else
                                url = PATH_PVARIANTE + "Riepilogo.aspx?idvar=" + v.IdVariante;
                            break;
                    }
                    dgi.Cells[col_ButtonLink].Text = "<input type=button onclick=\"location='" + url + "'\" value='" + testo
                        + "' style='width:130px' class='ButtonGrid'/>";
                }

                var stato_progetto_item = new ListItem(cruscotto.Stato, cruscotto.Stato);
                if (!lstStatoProgettoVariantiIstruttore.Items.Contains(stato_progetto_item))
                    lstStatoProgettoVariantiIstruttore.Items.Add(stato_progetto_item);

                var imp_item = new ListItem(cruscotto.Impresa, cruscotto.IdImpresa);
                if (!lstImpresaProgettoVariantiIstruttore.Items.Contains(imp_item))
                    lstImpresaProgettoVariantiIstruttore.Items.Add(imp_item);
            }
        }

        void dgBandiBeneficiario_ItemDataBound(object sender, System.Web.UI.WebControls.DataGridItemEventArgs e)
        {
            DataGridItem dgi = (DataGridItem)e.Item;

            int col_InfoBando = 0,
                    col_IdBando = 1,
                    col_DescrizioneBando = 2,
                    col_DataScadenzaBando = 3,
                    col_IdProgetto = 4,
                    col_StatoProgetto = 5,
                    col_Impresa = 6,
                    col_VaiA = 7,
                    col_DettaglioProgetto = 8;

            if (dgi.ItemType == ListItemType.Header)
            {
                dgi.CssClass = "TESTA1";
                dgi.Cells[0].ColumnSpan = 4;
                dgi.Cells[0].HorizontalAlign = HorizontalAlign.Center;
                dgi.Cells[0].Text = "Bando di gara</td><td colspan=4 align=center>Dati domanda</td><td></td></tr><tr class='TESTA'><td>";
            }
            else if (e.Item.ItemType == ListItemType.Item || e.Item.ItemType == ListItemType.AlternatingItem)
            {
                VcruscottoDomandeBeneficiario cruscotto = (VcruscottoDomandeBeneficiario)dgi.DataItem;
                var p = progetto_provider.GetById(cruscotto.IdProgetto);
                var b = bando_provider.GetById(cruscotto.IdBando);

                dgi.Cells[col_InfoBando].Text =
                    " <a id='linkBando" + cruscotto.IdBando + "' href='javascript:mostraPopupDocumentiBando(" + cruscotto.IdBando + ")'> <img title='Info sul bando' src='" + PATH_IMAGES + "info.ico' /> </a> ";

                dgi.Cells[col_VaiA].Text =
                    " <a href='" + PATH_PDOMANDA + "DatiGenerali.aspx?iddom=" + cruscotto.IdProgetto + "'> <img title='Dati generali' src='" + PATH_IMAGES + "domande.ico' /> </a> " +
                    " <a href='" + PATH_PDOMANDA + "Anagrafica.aspx?iddom=" + cruscotto.IdProgetto + "'> <img title='Dati anagrafici dell`impresa' src='" + PATH_IMAGES + "codicefiscale.gif' /> </a> " +
                    " <a href='" + PATH_PDOMANDA + "RequisitiDomanda.aspx?iddom=" + cruscotto.IdProgetto + "'> <img title='Requisiti soggettivi' src='" + PATH_IMAGES + "soggetto.ico' /> </a> ";
                if (b.Aggregazione)
                    dgi.Cells[col_VaiA].Text += " <a href='" + PATH_PDOMANDA + "RequisitiImpresa.aspx?iddom=" + cruscotto.IdProgetto + "'> <img title='Requisiti impresa' src='" + PATH_IMAGES + "collaboratori.ico' /> </a> ";

                dgi.Cells[col_VaiA].Text +=
                    " <a href='" + PATH_PDOMANDA + "RelazioneTecnica.aspx?iddom=" + cruscotto.IdProgetto + "'> <img title='Descrizione dell`iniziativa progettuale' src='" + PATH_IMAGES + "RelazioneTecnica.ico' /> </a> " +
                    " <a href='" + PATH_PDOMANDA + "BusinessPlan.aspx?iddom=" + cruscotto.IdProgetto + "'> <img title='Business plan' src='" + PATH_IMAGES + "euro.gif' /> </a> " +
                    " <a href='" + PATH_PDOMANDA + "RiepilogoDomanda.aspx?iddom=" + cruscotto.IdProgetto + "'> <img title='Pagina di presentazione' src='" + PATH_IMAGES + "timbro.gif' /> </a> " +
                    " <a href='" + PATH_PDOMANDA + "Comunicazioni.aspx?iddom=" + cruscotto.IdProgetto + "'> <img title='Comunicazioni con il beneficiario' src='" + PATH_IMAGES + "comunicazioni.gif' /> </a> ";

                if (!(p.OrdineFase != null && p.OrdineFase > 3 && p.CodStato != "N"))
                    dgi.Cells[col_DettaglioProgetto].Text = "";
                else if (mostra_dettaglio == 1)
                    dgi.Cells[col_DettaglioProgetto].Text = dgi.Cells[col_DettaglioProgetto].Text.Replace("Mostra", "Nascondi");

                var stato_progetto_item = new ListItem(cruscotto.StatoProgetto, cruscotto.StatoProgetto);
                if (!lstStatoProgettoBeneficiario.Items.Contains(stato_progetto_item))
                    lstStatoProgettoBeneficiario.Items.Add(stato_progetto_item);
            }
        }

        void dgBandiConsulente_ItemDataBound(object sender, System.Web.UI.WebControls.DataGridItemEventArgs e)
        {
            DataGridItem dgi = (DataGridItem)e.Item;

            if (dgi.ItemType == ListItemType.Header)
            {
                dgi.CssClass = "TESTA1";
                dgi.Cells[0].ColumnSpan = 4;
                dgi.Cells[0].HorizontalAlign = HorizontalAlign.Center;
                dgi.Cells[0].Text = "Bando di gara</td><td colspan=4 align=center>Dati domanda</td><td></td></tr><tr class='TESTA'><td>";
            }
            else if (e.Item.ItemType == ListItemType.Item || e.Item.ItemType == ListItemType.AlternatingItem)
            {
                VcruscottoDomandeConsulente cruscotto = (VcruscottoDomandeConsulente)dgi.DataItem;
                var p = progetto_provider.GetById(cruscotto.IdProgetto);
                var b = bando_provider.GetById(cruscotto.IdBando);

                int col_InfoBando = 0,
                    col_IdBando = 1,
                    col_DescrizioneBando = 2,
                    col_DataScadenzaBando = 3,
                    col_IdProgetto = 4,
                    col_StatoProgetto = 5,
                    col_Impresa = 6,
                    col_VaiA = 7,
                    col_DettaglioProgetto = 8;

                dgi.Cells[col_InfoBando].Text =
                    " <a id='linkBando" + cruscotto.IdBando + "' href='javascript:mostraPopupDocumentiBando(" + cruscotto.IdBando + ")'> <img title='Info sul bando' src='" + PATH_IMAGES + "info.ico' /> </a> ";
                dgi.Cells[col_VaiA].Text =
                    " <a href='" + PATH_PDOMANDA + "DatiGenerali.aspx?iddom=" + cruscotto.IdProgetto + "'> <img title='Dati generali' src='" + PATH_IMAGES + "domande.ico' /> </a> " +
                    " <a href='" + PATH_PDOMANDA + "Anagrafica.aspx?iddom=" + cruscotto.IdProgetto + "'> <img title='Dati anagrafici dell`impresa' src='" + PATH_IMAGES + "codicefiscale.gif' /> </a> " +
                    " <a href='" + PATH_PDOMANDA + "RequisitiDomanda.aspx?iddom=" + cruscotto.IdProgetto + "'> <img title='Requisiti soggettivi' src='" + PATH_IMAGES + "soggetto.ico' /> </a> ";
                if (b.Aggregazione)
                    dgi.Cells[col_VaiA].Text += " <a href='" + PATH_PDOMANDA + "RequisitiImpresa.aspx?iddom=" + cruscotto.IdProgetto + "'> <img title='Requisiti impresa' src='" + PATH_IMAGES + "collaboratori.ico' /> </a> ";

                dgi.Cells[col_VaiA].Text +=
                    " <a href='" + PATH_PDOMANDA + "RelazioneTecnica.aspx?iddom=" + cruscotto.IdProgetto + "'> <img title='Descrizione dell`iniziativa progettuale' src='" + PATH_IMAGES + "RelazioneTecnica.ico' /> </a> " +
                    " <a href='" + PATH_PDOMANDA + "BusinessPlan.aspx?iddom=" + cruscotto.IdProgetto + "'> <img title='Business plan' src='" + PATH_IMAGES + "euro.gif' /> </a> " +
                    " <a href='" + PATH_PDOMANDA + "RiepilogoDomanda.aspx?iddom=" + cruscotto.IdProgetto + "'> <img title='Pagina di presentazione' src='" + PATH_IMAGES + "timbro.gif' /> </a> " +
                    " <a href='" + PATH_PDOMANDA + "Comunicazioni.aspx?iddom=" + cruscotto.IdProgetto + "'> <img title='Comunicazioni con il beneficiario' src='" + PATH_IMAGES + "comunicazioni.gif' /> </a> ";

                if (!(p.OrdineFase != null && p.OrdineFase > 3 && p.CodStato != "N"))
                    dgi.Cells[col_DettaglioProgetto].Text = "";
                else if (mostra_dettaglio == 1)
                    dgi.Cells[col_DettaglioProgetto].Text = dgi.Cells[col_DettaglioProgetto].Text.Replace("Mostra", "Nascondi");

                var stato_prog_item = new ListItem(cruscotto.StatoProgetto, cruscotto.CodStatoProgetto);
                if (!lstStatoProgettoConsulente.Items.Contains(stato_prog_item))
                    lstStatoProgettoConsulente.Items.Add(stato_prog_item);

                var imp_item = new ListItem(cruscotto.RagioneSocialeImpresa, cruscotto.IdImpresa);
                if (!lstImpresaConsulente.Items.Contains(imp_item))
                    lstImpresaConsulente.Items.Add(imp_item);
            }
        }

        void dgDomandeProgetto_ItemDataBound(object sender, DataGridItemEventArgs e)
        {
            DataGridItem dgi = (DataGridItem)e.Item;

            int col_InfoBando = 0,
                col_IdDomandaPagamento = 1,
                col_ModalitaPagamento = 2,
                col_InfoDomanda = 3,
                col_ImportoRichiesto = 4,
                col_ContributoRichiesto = 5,
                col_Segnatura = 6,
                col_Istruita = 7,
                col_InfoDomandaIstruttore = 8,
                col_ImportoAmmesso = 9,
                col_ContributoAmmesso = 10;

            if (dgi.ItemType == ListItemType.Header)
            {
                dgi.CssClass = "TESTA1";
                dgi.Cells[col_InfoBando].ColumnSpan = 7;
                dgi.Cells[col_InfoBando].HorizontalAlign = HorizontalAlign.Center;
                dgi.Cells[col_InfoBando].Text = "DOMANDE DI PAGAMENTO</td><td colspan=4 align=center>RIEPILOGO ISTRUTTORIA</td></tr><tr class='TESTA'><td>Richiesta";
            }
            else if (dgi.ItemType == ListItemType.Footer)
            {
                dgi.Cells[col_ImportoRichiesto].Text = string.Format("{0:c}", importo_richiesto);
                dgi.Cells[col_ContributoRichiesto].Text = string.Format("{0:c}", contributo_richiesto);
                dgi.Cells[col_ImportoAmmesso].Text = string.Format("{0:c}", importo_ammesso);
                dgi.Cells[col_ContributoAmmesso].Text = string.Format("{0:c}", contributo_ammesso);
            }
            else
            {
                SiarLibrary.NotAutogeneratedClasses.RiepilogoDomandePagamento domanda = (SiarLibrary.NotAutogeneratedClasses.RiepilogoDomandePagamento)dgi.DataItem;

                if (domanda.IdDomandaPagamento == null)
                {
                    dgi.Cells[col_InfoBando].Text = "<input type='checkbox' disabled=true />";
                    dgi.Cells[col_Istruita].Text = "<input type='checkbox' disabled=true />";
                    if (prima_domanda || (abilita_inserimento_nuova_domanda &&
                        list_abilita_inserimento.Contains(domanda.Ordine)))
                    {
                        if (prima_domanda || (abilita_inserimento_nuova_domanda &&
                        list_abilita_inserimento.Contains(domanda.Ordine)))
                        {
                            if (variante_inserita_non_istruita)
                                dgi.Cells[col_InfoDomanda].Text = "<b>Variante/Variazione finanziaria<br>in corso</b>";
                            else
                                dgi.Cells[col_InfoDomanda].Text = "<input type=button onclick=\"RichiediPagamentoCruscotto('" + domanda.CodTipo
                                + "')\" value='Richiedi pagamento' style='width:130px' class='ButtonGrid'/>";
                        }
                    }
                }
                else
                {
                    dgi.Cells[col_InfoBando].Text = "<input type='checkbox' disabled=true checked />";
                    if (permessi_operatore < 4 || ((PrivatePage)Page).Operatore.Utente.CodTipoEnte == "%")
                        dgi.Cells[col_InfoDomanda].Text = "<input type=button onclick=\"location='" + PATH_PPAGAMENTO + "DatiAnagrafici.aspx?idpag="
                            + domanda.IdDomandaPagamento + "'\" value='Visualizza la domanda' style='width:150px' class='ButtonGrid'/>";
                    dgi.Cells[col_Istruita].Text = "<input type='checkbox' disabled=true />";
                    if (domanda.CodTipo == "ANT")
                    {
                        dgi.Cells[col_ImportoRichiesto].Text = "--"; dgi.Cells[col_ImportoRichiesto].Style.Add("text-align", "center");
                        dgi.Cells[col_ImportoAmmesso].Text = "--"; dgi.Cells[col_ImportoAmmesso].Style.Add("text-align", "center");
                    }
                    if (domanda.Segnatura != null)
                    {
                        AllegatiProtocollatiCollectionProvider allegatiProvider = new AllegatiProtocollatiCollectionProvider();
                        //AllegatiProtocollatiCollection ff = allegatiProvider.Find(null, domanda.IdDomandaPagamento, null, null, null, null, null, null);
                        //int numeroAllegati = ff.Count;

                        //bool allegatiProtocollatiOk = checkAllegatiProtocollati(domanda, numeroAllegati);
                        bool allegatiProtocollatiOk = allegatiProvider.CheckAllegatiProtocollati(AllegatiProtocollatiCollectionProvider.TipoCheck.DomandaDiPagamento, domanda.IdDomandaPagamento, domanda.Segnatura);

                        if (!allegatiProtocollatiOk)
                        {
                            dgi.Cells[col_InfoDomanda].Text = "<input type=button onclick=\"location='" + PATH_PPAGAMENTO + "FirmaRichiesta.aspx?idpag="
                                + domanda.IdDomandaPagamento + "'\" value='Protocolla gli allegati' style='width:150px' class='ButtonGrid'/>";
                        }
                        else
                        {
                            //dgi.Cells[col_Segnatura].Text = "<img src='" + PATH_IMAGES + "print_ico.gif' alt='Domanda'  onclick=\"sncAjaxCallVisualizzaProtocollo('" + domanda.Segnatura + "');\" style='cursor: pointer;'>";
                            dgi.Cells[col_Segnatura].Text = "<img src='" + PATH_IMAGES + "print_ico.gif' alt='Domanda'  onclick=\"MostraProtocolloNewCruscotto('" + domanda.Segnatura + "');\" style='cursor: pointer;'>";
                            bool in_istruttoria = !domanda.Annullata
                                && (domanda.Approvata == null || domanda.SegnaturaApprovazione == null);
                            if (in_istruttoria)
                            {
                                if (permessi_operatore > 2) dgi.Cells[2].Text = "<b>istruttoria in corso</b>";
                                else
                                {
                                    var integrazione_provider = new IntegrazioniPerDomandaDiPagamentoCollectionProvider();
                                    var integrazioni_collection = integrazione_provider.Find(null, domanda.IdDomandaPagamento, false, null);
                                    if (integrazioni_collection.Count > 0)
                                    {
                                        var integrazione_domanda = integrazioni_collection[0];
                                        if (integrazione_domanda.SegnaturaIstruttore != null && !integrazione_domanda.SegnaturaIstruttore.Equals(""))
                                        {
                                            var integrazioni_singole_provider = new IntegrazioneSingolaDiDomandaCollectionProvider();
                                            var integrazioni_singole_collection = integrazioni_singole_provider.Find(null, integrazione_domanda.IdIntegrazioneDomandaDiPagamento, null, null, null, null);
                                            string testo_cella = "<table class='news' style='margin:5px' cellpadding=0 cellspacing=0><tr><td class='newsHeader'>INTEGRATIVE RICHIESTE</td></tr><tr><td class=news style='height:30px;width:180px;text-align:center;color:black;border-top:none' onclick=\"parent.location='" + PATH_PPAGAMENTO + "IntegrazioniDomandaPagamento.aspx?idpag="
                                                + domanda.IdDomandaPagamento + "'\">Visualizza le integrazioni richieste</td></tr><br /></table>";
                                            dgi.Cells[col_InfoDomanda].Text = testo_cella;
                                        }
                                        else
                                        {
                                            dgi.Cells[col_InfoDomanda].Text = "<table class='news' style='margin:5px' cellpadding=0 cellspacing=0><tr><td class='newsHeader'>ISTRUTTORIA IN CORSO</td></tr><tr><td class=news style='height:30px;width:180px;text-align:center;color:black;border-top:none' onclick=\"SNCVisualizzaReport('rptRicevutaProtocollazioneDomandaPagamento',1,'IdDomandaPagamento="
                                            + domanda.IdDomandaPagamento + "');\">Stampa la ricevuta di protocollazione</td></tr></table>";
                                        }
                                    }
                                    else
                                    {
                                        dgi.Cells[col_InfoDomanda].Text = "<table class='news' style='margin:5px' cellpadding=0 cellspacing=0><tr><td class='newsHeader'>ISTRUTTORIA IN CORSO</td></tr><tr><td class=news style='height:30px;width:180px;text-align:center;color:black;border-top:none' onclick=\"SNCVisualizzaReport('rptRicevutaProtocollazioneDomandaPagamento',1,'IdDomandaPagamento="
                                            + domanda.IdDomandaPagamento + "');\">Stampa la ricevuta di protocollazione</td></tr></table>";
                                    }
                                }
                                domanda.ImportoAmmesso = null;
                                domanda.ContributoAmmesso = null;
                                dgi.Cells[col_ImportoAmmesso].Text = "";
                                dgi.Cells[col_ContributoAmmesso].Text = "";
                            }
                            else if (!domanda.Annullata)
                            {
                                dgi.Cells[col_Istruita].Text = "<input type='checkbox' disabled=true checked />";
                                if (domanda.Approvata != null && !domanda.Approvata)
                                {
                                    for (int i = col_ModalitaPagamento; i < 11; i++)
                                    {
                                        dgi.Cells[i].Style.Add("text-decoration", "line-through");
                                        dgi.Cells[i].Style.Add("color", "#bc3333");
                                    }
                                }
                            }

                            if (permessi_operatore > 2)
                            {
                                string testo = "Visualizza l`istruttoria";
                                if (permessi_operatore == 3 && in_istruttoria) testo = "Istruisci la pratica";
                                dgi.Cells[col_InfoDomandaIstruttore].Text = "<input type=button onclick=\"location='" + PATH_IPAGAMENTO + "CheckListPagamento.aspx?idpag="
                                    + domanda.IdDomandaPagamento + "'\" value='" + testo + "' style='width:150px' class='ButtonGrid'/>";
                            }
                        }
                    }
                    else if (((PrivatePage)Page).AbilitaModifica && domanda.CfOperatore == ((PrivatePage)Page).Operatore.Utente.CfUtente)
                        dgi.Cells[col_InfoDomanda].Text = "<input type=button onclick=\"location='" + PATH_PPAGAMENTO + "DatiAnagrafici.aspx?idpag="
                            + domanda.IdDomandaPagamento + "'\" value='Modifica la richiesta' style='width:150px' class='ButtonGrid'/>";

                    if (!domanda.Annullata)
                    {
                        var utAppalto = bando_config_provider.GetBandoConfig_TpAppaltoDescrizione(progetto_provider.GetById(domanda.IdProgetto).IdBando);
                        if (utAppalto != null && utAppalto == "Strumenti finanziari")
                            strumenti_finanziari = true;
                        else
                            strumenti_finanziari = false;

                        if (!strumenti_finanziari)
                        {
                            if (domanda.ImportoRichiesto != null)
                                importo_richiesto += domanda.ImportoRichiesto;
                            if (domanda.ContributoRichiesto != null)
                                contributo_richiesto += domanda.ContributoRichiesto;

                            if (domanda.Approvata != null && domanda.Approvata)
                            {
                                if (domanda.ImportoAmmesso != null) importo_ammesso += domanda.ImportoAmmesso;
                                if (domanda.ContributoAmmesso != null) contributo_ammesso += domanda.ContributoAmmesso;
                            }
                        }
                        else
                        {
                            var pag_rich_fem_list = pag_rich_fem_provider
                                .Find(null, null, null, domanda.IdProgetto, domanda.IdDomandaPagamento, null)
                                .ToArrayList<PagamentiRichiestiFem>();

                            var richiesto = pag_rich_fem_list.Sum(p => p.ImportoRichiesto);
                            dgi.Cells[col_ImportoRichiesto].Text = richiesto + " €";
                            dgi.Cells[col_ContributoRichiesto].Text = richiesto + " €";
                            importo_richiesto += richiesto;
                            contributo_richiesto += richiesto;

                            if (domanda.Approvata != null && domanda.Approvata)
                            {
                                var ammesso = pag_rich_fem_list.Sum(p => p.ImportoAmmesso);
                                dgi.Cells[col_ImportoAmmesso].Text = ammesso + " €";
                                dgi.Cells[col_ContributoAmmesso].Text = ammesso + " €";
                                importo_ammesso += ammesso;
                                contributo_ammesso += ammesso;
                            }
                        }
                    }
                    else
                    {
                        dgi.Cells[col_InfoDomandaIstruttore].Text = "ANNULLATA DAL RICHIEDENTE";
                        dgi.Cells[col_ImportoAmmesso].Text = "";
                        dgi.Cells[col_ContributoAmmesso].Text = "";
                        for (int i = col_ModalitaPagamento; i < col_Istruita; i++)
                        {
                            dgi.Cells[i].Style.Add("color", "grey");
                            dgi.Cells[i].Style.Add("text-decoration", "line-through");
                        }
                    }
                }
            }
        }

        void dgErroriPec_ItemDataBound(object sender, System.Web.UI.WebControls.DataGridItemEventArgs e)
        {
            DataGridItem dgi = (DataGridItem)e.Item;

            if (e.Item.ItemType == ListItemType.Item || e.Item.ItemType == ListItemType.AlternatingItem)
            {
                ErroriPec errore = (ErroriPec)dgi.DataItem;

                if (errore.IdStato > 1)
                    dgi.Cells[5].Text = dgi.Cells[5].Text.Replace("<input ", "<input disabled=\"true\"");

                var imp_item = new ListItem(errore.Stato, errore.IdStato);
                if (!lstStatoErrore.Items.Contains(imp_item))
                    lstStatoErrore.Items.Add(imp_item);
            }
        }

        void dgLottiRevisioneIstruttore_ItemDataBound(object sender, System.Web.UI.WebControls.DataGridItemEventArgs e)
        {
            int indexIdbando = 0;
            int indexStatoLotto = 5;
            int indexIdDomandaAiuto = 6;
            int indexStatoDomandaAiuto = 7;
            int indexButtonValidazioneLotti = 8;

            DataGridItem dgi = (DataGridItem)e.Item;

            if (dgi.ItemType == ListItemType.Header)
            {
                dgi.CssClass = "TESTA1";
                dgi.Cells[0].ColumnSpan = 3;
                dgi.Cells[0].HorizontalAlign = HorizontalAlign.Center;
                dgi.Cells[0].Text = "Bando di gara</td><td colspan=3 align=center>Lotto di revisione</td><td colspan=2 align=center>Domanda da validare</td><td></td></tr><tr class='TESTA'><td>Id";
            }
            else if (e.Item.ItemType == ListItemType.Item || e.Item.ItemType == ListItemType.AlternatingItem)
            {
                VcruscottoLottiRevisione l = (VcruscottoLottiRevisione)dgi.DataItem;

                //RevisioneDomandaPagamentoCollectionProvider revisioneDomandaPagamentoCollectionProvider = new RevisioneDomandaPagamentoCollectionProvider();
                //RevisioneDomandaPagamentoCollection revisioneDomandaPagamentoCollection =
                //    revisioneDomandaPagamentoCollectionProvider.FindByLottoApprovata(l.IdLotto, true);
                //if (revisioneDomandaPagamentoCollection.Count == 0)
                //{
                //    dgi.Cells[indexIdDomandaAiuto].Width = 30;
                //    dgi.Cells[indexStatoLotto].Text = "Verifica Completamento Lotto";
                //}
                //else
                //{
                //    dgi.Cells[indexStatoLotto].Text = "In Corso";
                //    foreach (RevisioneDomandaPagamento r in revisioneDomandaPagamentoCollection)
                //    {
                //        if (string.IsNullOrEmpty(dgi.Cells[indexIdDomandaAiuto].Text))
                //        {
                //            dgi.Cells[indexIdDomandaAiuto].Text = string.Format("{0}", r.IdProgetto);
                //            dgi.Cells[indexStatoDomandaAiuto].Text = string.Format("{0}", r.TipoDomandaPagamento);
                //        }
                //        else
                //        {
                //            dgi.Cells[indexIdDomandaAiuto].Text += string.Format("<br>{0}", r.IdProgetto);
                //            dgi.Cells[indexStatoDomandaAiuto].Text += string.Format("<br>{0}", r.TipoDomandaPagamento);
                //        }
                //    }
                //}

                var testata_provider = new TestataValidazioneCollectionProvider();
                var testate_coll = testata_provider.FindByLottoApprovata(l.IdLotto, true);
                if (testate_coll.Count == 0)
                {
                    dgi.Cells[indexIdDomandaAiuto].Width = 30;
                    dgi.Cells[indexStatoLotto].Text = "Verifica Completamento Lotto";
                }
                else
                {
                    dgi.Cells[indexStatoLotto].Text = "In Corso";
                    foreach (TestataValidazione r in testate_coll)
                    {
                        if (string.IsNullOrEmpty(dgi.Cells[indexIdDomandaAiuto].Text))
                        {
                            dgi.Cells[indexIdDomandaAiuto].Text = string.Format("{0}", r.IdProgetto);
                            dgi.Cells[indexStatoDomandaAiuto].Text = string.Format("{0}", r.TipoDomandaPagamento);
                        }
                        else
                        {
                            dgi.Cells[indexIdDomandaAiuto].Text += string.Format("<br>{0}", r.IdProgetto);
                            dgi.Cells[indexStatoDomandaAiuto].Text += string.Format("<br>{0}", r.TipoDomandaPagamento);
                        }
                    }
                }

                string buttonValidazioneLotti = "<input type=button onclick=\"location='" + PATH_VALIDAZIONELOTTI + "ValidazioneLotti.aspx?idb=" + l.IdBando.ToString() + "'\" Value='Validazione Lotti' style='width:130px' class='ButtonGrid'/>";
                dgi.Cells[indexButtonValidazioneLotti].Text = buttonValidazioneLotti;
            }
        }

        void dgIstruttoriaDomandaAiuto_ItemDataBound(object sender, System.Web.UI.WebControls.DataGridItemEventArgs e)
        {
            int indexImpresa = 6;
            int indexButtonImpresa = 7;
            DataGridItem dgi = (DataGridItem)e.Item;

            if (dgi.ItemType == ListItemType.Header)
            {
                dgi.CssClass = "TESTA1";
                dgi.Cells[0].ColumnSpan = 3;
                dgi.Cells[0].HorizontalAlign = HorizontalAlign.Center;
                dgi.Cells[0].Text = "Bando di gara</td><td colspan=4 align=center>Dati domanda</td><td></td></tr><tr class='TESTA'><td>Id";
            }
            else if (e.Item.ItemType == ListItemType.Item || e.Item.ItemType == ListItemType.AlternatingItem)
            {
                string stringbuttonValidazioneLotti;
                VistruttoriaDomandeAiuto i = (VistruttoriaDomandeAiuto)dgi.DataItem;

                dgi.Cells[indexImpresa].Text = string.Format("{0} - {1}", i.CodiceFiscale, i.RagioneSociale);

                if (i.CodStato == "L")
                    stringbuttonValidazioneLotti = "<input type=button onclick=\"location='" + PATH_ISTRUTTORIA + "ChecklistRicevibilita.aspx?iddom=" + i.IdProgetto.ToString() + "&idb=" + i.IdBando.ToString() + "'\" Value='Checklist Ricevibilità' style='width:150px' class='ButtonGrid'/>";
                else if (i.CodStato == "I")
                    stringbuttonValidazioneLotti = "<input type=button onclick=\"location='" + PATH_ISTRUTTORIA + "ChecklistAmmissibilita.aspx?iddom=" + i.IdProgetto.ToString() + "&idb=" + i.IdBando.ToString() + "'\" Value='Checklist Ammissibilità' style='width:150px' class='ButtonGrid'/>";
                else
                    stringbuttonValidazioneLotti = ""; //Questo caso non deve essere replicabile
                dgi.Cells[indexButtonImpresa].Text = stringbuttonValidazioneLotti;

                var statoAttuale = new ListItem(i.Stato, i.Stato);
                if (!lstStatoDomandaIstruttoria.Items.Contains(statoAttuale))
                    lstStatoDomandaIstruttoria.Items.Add(statoAttuale);
            }

        }

        void dgLegaleRappresentanteDomande_ItemDataBound(object sender, System.Web.UI.WebControls.DataGridItemEventArgs e)
        {
            DataGridItem dgi = (DataGridItem)e.Item;

            if (dgi.ItemType == ListItemType.Header)
            {
                dgi.CssClass = "TESTA1";
                dgi.Cells[0].ColumnSpan = 4;
                dgi.Cells[0].HorizontalAlign = HorizontalAlign.Center;
                dgi.Cells[0].Text = "Bando di gara</td><td colspan=4 align=center>Dati domanda di aiuto</td><td></td></tr><tr class='TESTA'><td>";
            }
            else if (e.Item.ItemType == ListItemType.Item || e.Item.ItemType == ListItemType.AlternatingItem)
            {
                VcruscottoDomandeRappresentanteLegale cruscotto = (VcruscottoDomandeRappresentanteLegale)dgi.DataItem;
                var p = progetto_provider.GetById(cruscotto.IdProgetto);
                var b = bando_provider.GetById(cruscotto.IdBando);

                int col_InfoBando = 0,
                    col_IdBando = 1,
                    col_DescrizioneBando = 2,
                    col_DataScadenzaBando = 3,
                    col_IdProgetto = 4,
                    col_StatoProgetto = 5,
                    col_Impresa = 6,
                    col_VaiA = 7,
                    col_DettaglioProgetto = 8;

                dgi.Cells[col_InfoBando].Text =
                    " <a id='linkBando" + cruscotto.IdBando + "' href='javascript:mostraPopupDocumentiBando(" + cruscotto.IdBando + ")'> <img title='Info sul bando' src='" + PATH_IMAGES + "info.ico' /> </a> ";

                dgi.Cells[col_VaiA].Text =
                    " <a href='" + PATH_PDOMANDA + "DatiGenerali.aspx?iddom=" + cruscotto.IdProgetto + "'> <img title='Dati generali' src='" + PATH_IMAGES + "domande.ico' /> </a> " +
                    " <a href='" + PATH_PDOMANDA + "Anagrafica.aspx?iddom=" + cruscotto.IdProgetto + "'> <img title='Dati anagrafici dell`impresa' src='" + PATH_IMAGES + "codicefiscale.gif' /> </a> " +
                    " <a href='" + PATH_PDOMANDA + "RequisitiDomanda.aspx?iddom=" + cruscotto.IdProgetto + "'> <img title='Requisiti soggettivi' src='" + PATH_IMAGES + "soggetto.ico' /> </a> ";
                if (b.Aggregazione)
                    dgi.Cells[col_VaiA].Text += " <a href='" + PATH_PDOMANDA + "RequisitiImpresa.aspx?iddom=" + cruscotto.IdProgetto + "'> <img title='Requisiti impresa' src='" + PATH_IMAGES + "collaboratori.ico' /> </a> ";

                dgi.Cells[col_VaiA].Text +=
                    " <a href='" + PATH_PDOMANDA + "RelazioneTecnica.aspx?iddom=" + cruscotto.IdProgetto + "'> <img title='Descrizione dell`iniziativa progettuale' src='" + PATH_IMAGES + "RelazioneTecnica.ico' /> </a> " +
                    " <a href='" + PATH_PDOMANDA + "BusinessPlan.aspx?iddom=" + cruscotto.IdProgetto + "'> <img title='Business plan' src='" + PATH_IMAGES + "euro.gif' /> </a> " +
                    " <a href='" + PATH_PDOMANDA + "RiepilogoDomanda.aspx?iddom=" + cruscotto.IdProgetto + "'> <img title='Pagina di presentazione' src='" + PATH_IMAGES + "timbro.gif' /> </a> " +
                    " <a href='" + PATH_PDOMANDA + "Comunicazioni.aspx?iddom=" + cruscotto.IdProgetto + "'> <img title='Comunicazioni con il beneficiario' src='" + PATH_IMAGES + "comunicazioni.gif' /> </a> ";

                if (!(p.OrdineFase != null && p.OrdineFase > 3 && p.CodStato != "N"))
                    dgi.Cells[col_DettaglioProgetto].Text = "";
                else if (mostra_dettaglio_legale_rappresentante == 1)
                    dgi.Cells[col_DettaglioProgetto].Text = dgi.Cells[col_DettaglioProgetto].Text.Replace("Mostra", "Nascondi");

                var imp_item = new ListItem(cruscotto.Impresa, cruscotto.IdImpresa);
                if (!lstImpresaLegaleRappresentante.Items.Contains(imp_item))
                    lstImpresaLegaleRappresentante.Items.Add(imp_item);
            }
        }


        void dgRichiesteConsulente_ItemDataBound(object sender, System.Web.UI.WebControls.DataGridItemEventArgs e)
        {
            DataGridItem dgi = (DataGridItem)e.Item;

            if (e.Item.ItemType == ListItemType.Item || e.Item.ItemType == ListItemType.AlternatingItem)
            {
                int col_iva = 0,
                    col_RagSoc = 1,
                    col_Rappr = 2,
                    col_CfRappr = 3,
                    col_Cons = 4,
                    col_CfCons = 5,
                    col_Inizio = 6,
                    col_Fine = 7,
                    col_Segnatura = 8,
                    col_ImgSegnatura = 9,
                    col_Approva = 10,
                    col_Rifiuta = 11;


                RichiestaConsulente r = (RichiestaConsulente)dgi.DataItem;
                dgi.Cells[col_Approva].Text = "<input type='Button' class='ButtonGrid' value='Approva' onclick='ApprovaRichiestaConsulente(" + r.IdRichiestaConsulente + ");' />";
                dgi.Cells[col_Rifiuta].Text = "<input type='Button' class='ButtonGrid' value='Rifiuta' onclick='RifiutaRichiesteConsulente(" + r.IdRichiestaConsulente + ");' />";
                dgi.Cells[col_ImgSegnatura].Text = "<img src='" + PATH_IMAGES + "lente.png' style='width:24px;height:24px;cursor:pointer' alt='Visualizza Protocollo' onclick=\"javascript:sncAjaxCallVisualizzaProtocollo('" + r.Segnatura + "');\" />";
            }
        }


        void dgRichiesteAssistenza_ItemDataBound(object sender, System.Web.UI.WebControls.DataGridItemEventArgs e)
        {
            DataGridItem dgi = (DataGridItem)e.Item;
            
            if (e.Item.ItemType != ListItemType.Header && e.Item.ItemType != ListItemType.Footer)            
            {
                SiarLibrary.AssistenzaUtenti assistenza = (SiarLibrary.AssistenzaUtenti)dgi.DataItem;
                if (assistenza.IdAllegato == null)
                {
                    e.Item.Cells[8].Text = "";
                }

                e.Item.Cells[9].Text = " <a href=' " + PATH_ADMIN + "GestioneAssistenze.aspx'> <img title='Assistenza utenti' src='" + PATH_IMAGES + "help-desk.png' /> </a> ";
            }
        }        

        void dgRichiesteConsulenteProcura_ItemDataBound(object sender, System.Web.UI.WebControls.DataGridItemEventArgs e)
        {
            DataGridItem dgi = (DataGridItem)e.Item;

            if (e.Item.ItemType == ListItemType.Item || e.Item.ItemType == ListItemType.AlternatingItem)
            {
                int col_iva = 0,
                    col_RagSoc = 1,
                    col_Rappr = 2,
                    col_CfRappr = 3,
                    col_Cons = 4,
                    col_CfCons = 5,
                    col_Inizio = 6,
                    col_Fine = 7,
                    col_Segnatura = 8,
                    col_ImgSegnatura = 9,
                    col_Bando = 10,
                    col_Rup = 11,
                    col_SegnaturaProcura = 12,
                    col_ImgSegnaturaProcura = 13,
                    col_Approva = 14,
                    col_Rifiuta = 15;


                RichiestaConsulente r = (RichiestaConsulente)dgi.DataItem;
                //dgi.Cells[col_Bando].Text = new SiarBLL.BandoCollectionProvider().GetById(r.AdditionalAttributes["ID_BANDO"].ToString()).Descrizione;
                dgi.Cells[col_Bando].Text = r.AdditionalAttributes["ID_BANDO"].ToString();
                dgi.Cells[col_Rup].Text = new SiarBLL.UtentiCollectionProvider().GetById(r.AdditionalAttributes["ID_RUP"].ToString()).Nominativo;

                dgi.Cells[col_SegnaturaProcura].Text = r.AdditionalAttributes["SEGNATURA_PROCURA"].ToString();

                if (r.SegnaturaIstruttoria == null)
                    dgi.Cells[col_Segnatura].Text = r.Segnatura;
                else
                    dgi.Cells[col_Segnatura].Text = r.SegnaturaIstruttoria;

                dgi.Cells[col_Approva].Text = "<input type='Button' class='ButtonGrid' value='Approva' onclick='ApprovaRichiestaConsulenteProcura(" + r.AdditionalAttributes["ID"] + ", " + r.IdRichiestaConsulente + ", " + r.AdditionalAttributes["ID_BANDO"] + ");' />";
                dgi.Cells[col_Rifiuta].Text = "<input type='Button' class='ButtonGrid' value='Rifiuta' onclick='RifiutaRichiesteConsulenteProcura(" + r.AdditionalAttributes["ID"] + ", " + r.IdRichiestaConsulente + ", " + r.AdditionalAttributes["ID_BANDO"] + ");' />";
                if (r.SegnaturaIstruttoria == null && r.Segnatura != "N.D.")
                    //dgi.Cells[col_ImgSegnatura].Text = "<img src='" + PATH_IMAGES + "lente.png' style='width:24px;height:24px;cursor:pointer' alt='Visualizza Protocollo' onclick=\"javascript:sncAjaxCallVisualizzaProtocollo('" + r.Segnatura + "');\" />";
                    dgi.Cells[col_ImgSegnatura].Text = "<img src='" + PATH_IMAGES + "lente.png' style='width:24px;height:24px;cursor:pointer' alt='Visualizza Protocollo' onclick=\"javascript:MostraProtocolloNewCruscotto('" + r.Segnatura + "');\" />";
                else if (r.SegnaturaIstruttoria != null && r.SegnaturaIstruttoria != "N.D.")
                    //dgi.Cells[col_ImgSegnatura].Text = "<img src='" + PATH_IMAGES + "lente.png' style='width:24px;height:24px;cursor:pointer' alt='Visualizza Protocollo' onclick=\"javascript:sncAjaxCallVisualizzaProtocollo('" + r.SegnaturaIstruttoria + "');\" />";
                    dgi.Cells[col_ImgSegnatura].Text = "<img src='" + PATH_IMAGES + "lente.png' style='width:24px;height:24px;cursor:pointer' alt='Visualizza Protocollo' onclick=\"javascript:MostraProtocolloNewCruscotto('" + r.SegnaturaIstruttoria + "');\" />";
                dgi.Cells[col_ImgSegnaturaProcura].Text = "<img src='" + PATH_IMAGES + "lente.png' style='width:24px;height:24px;cursor:pointer' alt='Visualizza Protocollo' onclick=\"javascript:sncAjaxCallVisualizzaProtocollo('" + r.AdditionalAttributes["SEGNATURA_PROCURA"].ToString() + "');\" />";
            }
        }

        void dgRichiesteProfilazione_ItemDataBound(object sender, System.Web.UI.WebControls.DataGridItemEventArgs e)
        {
            DataGridItem dgi = (DataGridItem)e.Item;

            if (e.Item.ItemType == ListItemType.Item || e.Item.ItemType == ListItemType.AlternatingItem)
            {
                int col_rup = 0,
                    col_asse = 1,
                    col_azione = 2,
                    col_oggetto = 3,
                    col_importo = 4,
                    col_data = 5,
                    col_documento = 6,
                    col_Approva = 7,
                    col_Rifiuta = 8;


                RichiestaProfilazione r = (RichiestaProfilazione)dgi.DataItem;
                dgi.Cells[col_Approva].Text = "<input type='Button' class='ButtonGrid' value='Approva' onclick='ApprovaRichiestaProfilazione(" + r.IdRichiesta + ");' />";
                dgi.Cells[col_Rifiuta].Text = "<input type='Button' class='ButtonGrid' value='Rifiuta' onclick='RifiutaRichiesteProfilazione(" + r.IdRichiesta + ");' />";
                dgi.Cells[col_documento].Text = "<img src='" + PATH_IMAGES + "lente.png' style='width:24px;height:24px;cursor:pointer' alt='Visualizza Protocollo' onclick=\"javascript:SNCVisualizzaReport('rptRichiestaProfilazione',1,'IdRichiesta=" + r.IdRichiesta + "');\" />";
            }
        }


        #endregion


        protected void ProtocollaDocFirmatoEvent(object sender, EventArgs e)
        {
            try
            {
                SiarLibrary.Protocollo protocollo = new SiarLibrary.Protocollo("RM_INF");

                SiarLibrary.Impresa i = new SiarBLL.ImpresaCollectionProvider().GetById(richiesta_selezionata.IdImpresa);
                protocollo.setCorrispondente(i, null, "destinatario");
                protocollo.setDocumento("IstruttoriaAbilitazioneConsulente.pdf", Convert.FromBase64String(ucFirmaDocumento.FileFirmato));
                if (richiesta_selezionata.Approvata)
                {
                    string oggetto = "Approvazione richiesta consulente impresa";
                    string segnatura;
                    segnatura = protocollo.ProtocolloUscita(oggetto, System.Configuration.ConfigurationManager.AppSettings["FascicoloRichiesteProfilazione"], true);

                    richiesta_selezionata.Istruita = true;
                    richiesta_selezionata.SegnaturaIstruttoria = segnatura;
                    rich_cons_provider.Save(richiesta_selezionata);

                    SiarLibrary.Utenti u = null;
                    SiarLibrary.UtentiStorico us = null;
                    SiarBLL.UtentiCollectionProvider utenti_provider = new UtentiCollectionProvider();
                    SiarBLL.UtentiStoricoCollectionProvider storico_utenti_provider = new UtentiStoricoCollectionProvider();
                    SiarBLL.MandatiImpresaCollectionProvider mandati_provider = new MandatiImpresaCollectionProvider();

                    SiarLibrary.UtentiCollection uu = utenti_provider.Find(null, richiesta_selezionata.IdConsulente, null, null, null, null, null);

                    //verifico se esiste l utente
                    if (uu.Count == 0)
                    {
                        u = new SiarLibrary.Utenti();
                        u.IdPersonaFisica = richiesta_selezionata.IdConsulente;
                        utenti_provider.Save(u);
                    }
                    else
                        u = uu[0];

                    //controllo se l'utente ha il profilo consulente
                    int _idProfiloConsulete = int.Parse(System.Configuration.ConfigurationManager.AppSettings["Profilo_Consulente"]);
                    SiarLibrary.UtentiStoricoCollection usrConsulente = storico_utenti_provider.Find(u.IdUtente, null, _idProfiloConsulete, true);
                    if (usrConsulente.Count == 0)
                    {
                        us = new SiarLibrary.UtentiStorico();
                        us.IdUtente = u.IdUtente;
                        us.IdProfilo = _idProfiloConsulete;
                        us.CodEnte = null;
                        us.Provincia = null;
                        us.Attivo = true;
                        us.Operatore = ((SiarLibrary.Web.PrivatePage)Page).Operatore.Utente.IdUtente;
                        us.Data = DateTime.Today;
                        storico_utenti_provider.Save(us);
                    }
                    else
                        us = usrConsulente[0];

                    u.IdStoricoUltimo = us.Id;
                    utenti_provider.Save(u);


                    SiarLibrary.MandatiImpresaCollection mandati_coll = mandati_provider.Find(richiesta_selezionata.IdImpresa, null, null, null, u.IdUtente, null, null, "PSR", true);
                    if (mandati_coll.Count > 0)
                    {
                        SiarLibrary.MandatiImpresa mandato_storico = mandati_coll[0];
                        mandato_storico.Attivo = false;
                        mandato_storico.DataFineValidita = DateTime.Now;
                        mandato_storico.IdOperatoreFine = ((SiarLibrary.Web.PrivatePage)Page).Operatore.Utente.IdUtente;
                        mandati_provider.Save(mandato_storico);
                    }

                    SiarLibrary.MandatiImpresa mandato = new SiarLibrary.MandatiImpresa();
                    mandato.IdImpresa = richiesta_selezionata.IdImpresa;
                    mandato.IdUtenteAbilitato = u.IdUtente;
                    mandato.TipoMandato = "PSR";
                    mandato.Attivo = true;
                    mandato.DataInizioValidita = richiesta_selezionata.DataInizioAbilitazione;
                    mandato.DataFineValidita = richiesta_selezionata.DataFineAbilitazione;
                    mandato.IdOperatoreInizio = ((SiarLibrary.Web.PrivatePage)Page).Operatore.Utente.IdUtente;
                    mandati_provider.Save(mandato);

                    ((SiarLibrary.Web.PrivatePage)Page).Redirect(Request.Url.AbsolutePath, "Richiesta di consulenza approvata!", false);
                    //((SiarLibrary.Web.PrivatePage)Page).ShowMessage("Mandato aziendale registrato correttamente.");

                }
                else
                {
                    string oggetto = "Rifiuto richiesta consulente impresa";

                    string segnatura;
                    segnatura = protocollo.ProtocolloUscita(oggetto, System.Configuration.ConfigurationManager.AppSettings["FascicoloRichiesteProfilazione"], true);

                    richiesta_selezionata.Istruita = true;
                    richiesta_selezionata.SegnaturaIstruttoria = segnatura;
                    rich_cons_provider.Save(richiesta_selezionata);


                    ((SiarLibrary.Web.PrivatePage)Page).Redirect(Request.Url.AbsolutePath, "Richiesta di consulenza rifiutata!", false);
                    //((SiarLibrary.Web.PrivatePage)Page).RegisterClientScriptBlock("chiudiPopupTemplate();");

                    //((SiarLibrary.Web.PrivatePage)Page).ShowMessage("Richiesta di consulenza rifiutata!");
                }

            }
            catch (Exception ex) { ((SiarLibrary.Web.PrivatePage)Page).ShowError(ex); }
        }


        protected void ProtocollaDocFirmatoProcuraEvent(object sender, EventArgs e)
        {
            try
            {
                RichiestaConsulenteProcuraXBando p = richXbandoProvider.GetById(procuraBando.Id);
                Bando bandoProcura = new SiarBLL.BandoCollectionProvider().GetById(p.IdBando);
                SiarLibrary.Protocollo protocollo = new SiarLibrary.Protocollo(bandoProcura.CodEnte);

                SiarLibrary.Impresa i = new SiarBLL.ImpresaCollectionProvider().GetById(richiesta_selezionata_procura.IdImpresa);
                protocollo.setCorrispondente(i, null, "destinatario");
                protocollo.setDocumento("IstruttoriaAbilitazioneConsulente.pdf", Convert.FromBase64String(ucFirmaDocumento.FileFirmato));
                // si tratta di una nuova richiesta di consulenza e procura insieme che sto approvando
                if (richiesta_selezionata_procura.SegnaturaIstruttoria == null && procuraBando.Approvata)
                {
                    string oggetto = "Approvazione richiesta consulente con procura speciale impresa";
                    string segnatura;
                    string fascicolo = fascicolo = new SiarBLL.BandoCollectionProvider().GetFascicolo(p.IdBando)[1];
                    segnatura = protocollo.ProtocolloUscita(oggetto, fascicolo, true);

                    richiesta_selezionata_procura.Istruita = true;
                    richiesta_selezionata_procura.SegnaturaIstruttoria = segnatura;
                    rich_cons_provider.Save(richiesta_selezionata_procura);

                    SiarLibrary.Utenti u = null;
                    SiarLibrary.UtentiStorico us = null;
                    SiarBLL.UtentiCollectionProvider utenti_provider = new UtentiCollectionProvider();
                    SiarBLL.UtentiStoricoCollectionProvider storico_utenti_provider = new UtentiStoricoCollectionProvider();
                    SiarBLL.MandatiImpresaCollectionProvider mandati_provider = new MandatiImpresaCollectionProvider();

                    SiarLibrary.UtentiCollection uu = utenti_provider.Find(null, richiesta_selezionata_procura.IdConsulente, null, null, null, null, null);

                    //verifico se esiste l utente
                    if (uu.Count == 0)
                    {
                        u = new SiarLibrary.Utenti();
                        u.IdPersonaFisica = richiesta_selezionata_procura.IdConsulente;
                        utenti_provider.Save(u);
                    }
                    else
                        u = uu[0];

                    //controllo se l'utente ha il profilo consulente
                    int _idProfiloConsulete = int.Parse(System.Configuration.ConfigurationManager.AppSettings["Profilo_Consulente"]);
                    SiarLibrary.UtentiStoricoCollection usrConsulente = storico_utenti_provider.Find(u.IdUtente, null, _idProfiloConsulete, true);
                    if (usrConsulente.Count == 0)
                    {
                        us = new SiarLibrary.UtentiStorico();
                        us.IdUtente = u.IdUtente;
                        us.IdProfilo = _idProfiloConsulete;
                        us.CodEnte = null;
                        us.Provincia = null;
                        us.Attivo = true;
                        us.Operatore = ((SiarLibrary.Web.PrivatePage)Page).Operatore.Utente.IdUtente;
                        us.Data = DateTime.Today;
                        storico_utenti_provider.Save(us);
                    }
                    else
                        us = usrConsulente[0];

                    u.IdStoricoUltimo = us.Id;
                    utenti_provider.Save(u);


                    SiarLibrary.MandatiImpresaCollection mandati_coll = mandati_provider.Find(richiesta_selezionata_procura.IdImpresa, null, null, null, u.IdUtente, null, null, "PSR", true);
                    if (mandati_coll.Count > 0)
                    {
                        SiarLibrary.MandatiImpresa mandato_storico = mandati_coll[0];
                        mandato_storico.Attivo = false;
                        mandato_storico.DataFineValidita = DateTime.Now;
                        mandato_storico.IdOperatoreFine = ((SiarLibrary.Web.PrivatePage)Page).Operatore.Utente.IdUtente;
                        mandati_provider.Save(mandato_storico);
                    }

                    SiarLibrary.MandatiImpresa mandato = new SiarLibrary.MandatiImpresa();
                    mandato.IdImpresa = richiesta_selezionata_procura.IdImpresa;
                    mandato.IdUtenteAbilitato = u.IdUtente;
                    mandato.TipoMandato = "PSR";
                    mandato.Attivo = true;
                    mandato.DataInizioValidita = richiesta_selezionata_procura.DataInizioAbilitazione;
                    mandato.DataFineValidita = richiesta_selezionata_procura.DataFineAbilitazione;
                    mandato.IdOperatoreInizio = ((SiarLibrary.Web.PrivatePage)Page).Operatore.Utente.IdUtente;
                    mandati_provider.Save(mandato);

                    UpdateProcura(richiesta_selezionata_procura, procuraBando, true, segnatura, p.IdBando, mandati_provider.DbProviderObj);

                    ((SiarLibrary.Web.PrivatePage)Page).Redirect(Request.Url.AbsolutePath, "Richiesta di consulenza approvata!", false);
                    //((SiarLibrary.Web.PrivatePage)Page).ShowMessage("Mandato aziendale registrato correttamente.");

                }
                // si tratta di una nuova richiesta di consulenza e procura insieme che sto negando
                else if (richiesta_selezionata_procura.SegnaturaIstruttoria == null && !procuraBando.Approvata)
                {
                    string oggetto = "Rifiuto richiesta consulente con procura speciale impresa";

                    string segnatura;
                    string fascicolo = fascicolo = new SiarBLL.BandoCollectionProvider().GetFascicolo(p.IdBando)[1];
                    segnatura = protocollo.ProtocolloUscita(oggetto, fascicolo, true);

                    richiesta_selezionata_procura.Istruita = true;
                    richiesta_selezionata_procura.SegnaturaIstruttoria = segnatura;
                    rich_cons_provider.Save(richiesta_selezionata_procura);

                    UpdateProcura(richiesta_selezionata_procura, procuraBando, false, segnatura, p.IdBando, rich_cons_provider.DbProviderObj);

                    ((SiarLibrary.Web.PrivatePage)Page).Redirect(Request.Url.AbsolutePath, "Richiesta di consulenza con procura speciale rifiutata!", false);
                    //((SiarLibrary.Web.PrivatePage)Page).RegisterClientScriptBlock("chiudiPopupTemplate();");

                    //((SiarLibrary.Web.PrivatePage)Page).ShowMessage("Richiesta di consulenza rifiutata!");
                    //((SiarLibrary.Web.PrivatePage)Page).Redirect(Request.Url.AbsolutePath, "Richiesta di consulenza approvata!", false);
                }
                else if (richiesta_selezionata_procura.SegnaturaIstruttoria != null)
                {
                    if (procuraBando != null && procuraBando.Approvata)
                    {
                        string oggetto = "Approvazione richiesta consulente con procura speciale impresa";
                        string segnatura;
                        string fascicolo = fascicolo = new SiarBLL.BandoCollectionProvider().GetFascicolo(p.IdBando)[1];
                        segnatura = protocollo.ProtocolloUscita(oggetto, fascicolo, true);

                        procuraBando.OperatoreIstruttoria = ((SiarLibrary.Web.PrivatePage)Page).Operatore.Utente.IdUtente;
                        procuraBando.DataIstruttoria = DateTime.Now;
                        procuraBando.DataInizio = DateTime.Now;
                        procuraBando.DataFine = richiesta_selezionata_procura.DataFineAbilitazione;
                        procuraBando.Attivo = true;
                        procuraBando.Istruita = true;
                        procuraBando.Approvata = true;
                        procuraBando.SegnaturaIstruttoria = segnatura;
                        richXbandoProvider.Save(procuraBando);
                        ((SiarLibrary.Web.PrivatePage)Page).Redirect(Request.Url.AbsolutePath, "Richiesta di consulenza approvata!", false);
                    }
                    else
                    {
                        string oggetto = "Rifiuto richiesta consulente con procura speciale impresa";

                        string segnatura;
                        string fascicolo = fascicolo = new SiarBLL.BandoCollectionProvider().GetFascicolo(p.IdBando)[1];
                        segnatura = protocollo.ProtocolloUscita(oggetto, fascicolo, true);

                        procuraBando.OperatoreIstruttoria = ((SiarLibrary.Web.PrivatePage)Page).Operatore.Utente.IdUtente;
                        procuraBando.DataIstruttoria = DateTime.Now;
                        procuraBando.SegnaturaIstruttoria = segnatura;
                        procuraBando.Istruita = true;
                        procuraBando.Approvata = false;
                        richXbandoProvider.Save(procuraBando);
                        ((SiarLibrary.Web.PrivatePage)Page).Redirect(Request.Url.AbsolutePath, "Richiesta di consulenza con procura speciale rifiutata!", false);
                    }
                }

            }
            catch (Exception ex) { ((SiarLibrary.Web.PrivatePage)Page).ShowError(ex); }
        }

        private void UpdateProcura(RichiestaConsulente r, RichiestaConsulenteProcuraXBando procuraBando, bool approvata, string segnatura, int idBando, DbProvider dbProviderObj = null)
        {
            SiarBLL.RichiestaConsulenteProcuraXBandoCollectionProvider richXbandoProvider = new SiarBLL.RichiestaConsulenteProcuraXBandoCollectionProvider(dbProviderObj);

            procuraBando.OperatoreIstruttoria = ((SiarLibrary.Web.PrivatePage)Page).Operatore.Utente.IdUtente;
            procuraBando.DataIstruttoria = DateTime.Now;
            if (approvata)
            {
                procuraBando.DataInizio = DateTime.Now;
                procuraBando.DataFine = r.DataFineAbilitazione;
                procuraBando.Istruita = true;
                procuraBando.Approvata = true;
                procuraBando.Attivo = true;
            }
            else
            {
                procuraBando.MotivazioneRifiuto = r.MotivazioneRifiuto;
                procuraBando.Istruita = true;
                procuraBando.Approvata = false;
            }
            procuraBando.SegnaturaIstruttoria = segnatura;
            richXbandoProvider.Save(procuraBando);
        }

        protected void btnMostraProtocolloCruscotto_Click(object sender, EventArgs e)
        {
            try
            {
                string segnatura = hdnSegnaturaCruscotto.Value;
                if (string.IsNullOrEmpty(segnatura) || segnatura == "undefined")
                    throw new Exception("Segnatura vuota");

                modaleMostraProtocollo.Segnatura = segnatura;
                ((PrivatePage)Page).RegisterClientScriptBlock(modaleMostraProtocollo.Mostra);
            }
            catch (Exception ex)
            {
                ((PrivatePage)Page).RegisterClientScriptBlock("chiudiPopupTemplate();");
                ((PrivatePage)Page).ShowError(ex.Message);
            }
        }
    }
}