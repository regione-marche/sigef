using SiarBLL;
using SiarLibrary;
using SiarLibrary.Extensions;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web.UI.WebControls;

namespace web.Private.PPagamento
{
    public partial class GestioneLavori : SiarLibrary.Web.PrivatePage
    {
        public SiarLibrary.Progetto Progetto
        {
            get { return (Progetto)Session["_progetto"]; }
            set { Session["_progetto"] = value; }
        }

        public SiarLibrary.Bando Bando
        {
            get
            {
                if (Session["_bando"] == null) return null;
                else return (SiarLibrary.Bando)Session["_bando"];
            }
            set { Session["_bando"] = value; }
        }

        private bool strumenti_finanziari = false;

        protected override void OnPreInit(EventArgs e)
        {
            FunzioneMenu = "progetto_gestione";
            if (Operatore != null && Operatore.Utente.CodTipoEnte.FindValueIn("RM", "AdC", "%"))
                FunzioneMenu = "igestione_lavori";
            base.OnPreInit(e);
        }

        bool abilita_inserimento_nuova_domanda = false, pratiche_in_istruttoria = false, variante_inserita_non_istruita = false;
        int ordine_minimo_inserimento = 0, permessi_operatore = 0; bool prima_domanda = false;
        List<int> list_abilita_inserimento = new List<int>();
        ProgettoStoricoCollection stati_progetto;
        VariantiCollection varianti;
        VariantiCollectionProvider varianti_provider = new VariantiCollectionProvider();
        SiarLibrary.NotAutogeneratedClasses.RiepilogoDomandePagamentoCollection domande_pagamento;

        SiarLibrary.NotAutogeneratedClasses.RiepilogoDomandePagamentoCollectionProvider pagamento_provider =
            new SiarLibrary.NotAutogeneratedClasses.RiepilogoDomandePagamentoCollectionProvider();

        ProgettoAttiAffidamentoCollectionProvider attiAff_prov = new ProgettoAttiAffidamentoCollectionProvider();
        ProgettoAttiAffidamento attoAffidamento_selezionato = null;

        ProgettoAttiAffidamentoAllegatiCollectionProvider attiAffAllegato_prov = new ProgettoAttiAffidamentoAllegatiCollectionProvider();
        ProgettoAttiAffidamentoAllegati attoAffidamentoAllegato_selezionato = null;

        CertspTestaCollectionProvider certspTestaCollectionProvider = new CertspTestaCollectionProvider();

        decimal importo_richiesto = 0, contributo_richiesto = 0, importo_ammesso = 0, contributo_ammesso = 0;

        protected void Page_Load(object sender, EventArgs e)
        {
            int id_progetto;
            if (int.TryParse(Request.QueryString["iddom"], out id_progetto))
                Progetto = new SiarBLL.ProgettoCollectionProvider().GetById(id_progetto);
            if (Progetto == null)
                Redirect("../PDomanda/RicercaDomanda.aspx", "Per proseguire è necessario selezionare la domanda.", true);
            //se progetto strumenti finanziari non faccio entrare
            else if (new SiarBLL.ProgettoSoggettoGestoreCollectionProvider().FindProgettiSoggettoGestore(null, null, null, null, null, Progetto.IdBando, Progetto.IdProgetto).Count > 0)
                Redirect("../PDomanda/RicercaDomanda.aspx", "La sezione degli strumenti finanziari è accessibile solo dalle voci di menù appositve.", true);
            else if (Progetto.CodStato.FindValueIn("P", "N") || Progetto.OrdineFase < 4 /* || Progetto.CodStato == "R"*/)
                Redirect("../PDomanda/RicercaDomanda.aspx", "La domanda non è nello stato procedurale corretto per la visualizzazione della pagina selezionata.", true);
            else
            {
                ucInfoDomanda.Progetto = Progetto;
                if (Bando == null || Bando.IdBando != Progetto.IdBando) Bando = new SiarBLL.BandoCollectionProvider().GetById(Progetto.IdBando);
                permessi_operatore = SiarLibrary.DbStaticProvider.GetPermessiOperatoreSuGestioneLavori(Progetto.IdProgetto, Operatore.Utente.IdUtente, null);
                if (permessi_operatore < 1) Redirect("../PDomanda/RicercaDomanda.aspx", "L`utente non è abilitato alla prosecuzione dei lavori della domanda di aiuto selezionata.", true);
                else
                {
                    varianti = varianti_provider.Find(null, Progetto.IdProgetto, null);
                    domande_pagamento = pagamento_provider.Find(Progetto.IdProgetto);

                    #region elaboro la collection per le modalita' di pagamento con molteplicita >1 o domande annullate

                    SiarLibrary.NotAutogeneratedClasses.RiepilogoDomandePagamentoCollection domande_plurime =
                        new SiarLibrary.NotAutogeneratedClasses.RiepilogoDomandePagamentoCollection();
                    int tipi_gia_contati = 0;
                    object[] tipi_da_duplicare = new object[domande_pagamento.Count + 1];
                    for (int i = 0; i < domande_pagamento.Count; i++)
                    {
                        if (domande_pagamento[i].IdDomandaPagamento != null)
                        {   //domande annullate
                            if (domande_pagamento[i].Annullata || (domande_pagamento[i].Approvata != null && !domande_pagamento[i].Approvata))
                            {
                                if (tipi_da_duplicare[i] != null && ((SiarLibrary.NotAutogeneratedClasses.RiepilogoDomandePagamento)tipi_da_duplicare[i])
                                    .CodTipo == domande_pagamento[i].CodTipo) tipi_da_duplicare[i] = null;
                                tipi_da_duplicare[i + 1] = domande_pagamento[i];
                            }
                            else
                            {
                                //molteplicita' >1
                                if (domande_pagamento[i].Numero > 1)
                                {
                                    if (tipi_da_duplicare[i] != null)
                                    {
                                        if (((SiarLibrary.NotAutogeneratedClasses.RiepilogoDomandePagamento)tipi_da_duplicare[i]).CodTipo ==
                                            domande_pagamento[i].CodTipo) tipi_da_duplicare[i] = null;
                                        else tipi_gia_contati = -1;
                                    }
                                    if (tipi_gia_contati < domande_pagamento[i].Numero - 1)
                                        tipi_da_duplicare[i + 1] = domande_pagamento[i];
                                    tipi_gia_contati++;
                                }
                                else if (tipi_da_duplicare[i] != null)
                                    if (((SiarLibrary.NotAutogeneratedClasses.RiepilogoDomandePagamento)tipi_da_duplicare[i]).CodTipo == domande_pagamento[i].CodTipo)
                                        tipi_da_duplicare[i] = null;
                            }
                        }
                    }

                    int contatore_inserimenti = 0;
                    for (int j = 0; j < tipi_da_duplicare.Length; j++)
                    {
                        if (tipi_da_duplicare[j] != null)
                        {
                            //inserisco nella collection all'indice i+contatore_inserimenti
                            SiarLibrary.NotAutogeneratedClasses.RiepilogoDomandePagamento tipo_da_duplicare,
                                nuovo_tipo = new SiarLibrary.NotAutogeneratedClasses.RiepilogoDomandePagamento();
                            tipo_da_duplicare = (SiarLibrary.NotAutogeneratedClasses.RiepilogoDomandePagamento)tipi_da_duplicare[j];
                            //se e' un saldo non lo duplico, ce ne puo' essere uno solo
                            if (tipo_da_duplicare.CodTipo == "SLD" && !tipo_da_duplicare.Annullata) continue;
                            nuovo_tipo.CodTipo = tipo_da_duplicare.CodTipo;
                            nuovo_tipo.Descrizione = tipo_da_duplicare.Descrizione;
                            nuovo_tipo.Numero = tipo_da_duplicare.Numero;
                            nuovo_tipo.QuotaMax = tipo_da_duplicare.QuotaMax;
                            nuovo_tipo.QuotaMin = tipo_da_duplicare.QuotaMin;
                            nuovo_tipo.ImportoMax = tipo_da_duplicare.ImportoMax;
                            nuovo_tipo.ImportoMin = tipo_da_duplicare.ImportoMin;
                            nuovo_tipo.CodFase = tipo_da_duplicare.CodFase;
                            nuovo_tipo.Fase = tipo_da_duplicare.Fase;
                            nuovo_tipo.Ordine = tipo_da_duplicare.Ordine;
                            domande_pagamento.Insert(j + contatore_inserimenti++, nuovo_tipo);
                        }
                    }

                    #endregion elaboro la collection per le modalita' di pagamento con molteplicita >1 o domande annullate

                    #region abilita nuova domanda pagamento

                    // IMPORTANTE: IMPOSTARE LA MODIFICA DELLE PAGINE IN PROFILO X FUNZIONI SOLO PER GLI UTENTI DI INSERIMENTO (CAA, CONSULENTI)

                    //controllo se ho varianti ancora da istruire
                    foreach (SiarLibrary.Varianti v in varianti)
                    {
                        if ((v.Segnatura != null && (v.Annullata == false) && v.SegnaturaApprovazione == null) || v.Segnatura == null)
                            variante_inserita_non_istruita = true;
                    }

                    pratiche_in_istruttoria = varianti.FiltroGenerale(null, null, null, "VI", true, true, null, null).Count > 0 ||
                        domande_pagamento.FiltroInLavorazione().Count > 0;
                    abilita_inserimento_nuova_domanda = AbilitaModifica && permessi_operatore == 2 && Progetto.OrdineFase > 3 &&
                        Progetto.OrdineFase < 9 && Progetto.OrdineStato == 1;
                    stati_progetto = new SiarBLL.ProgettoStoricoCollectionProvider().Find(Progetto.IdProgetto, null, null);
                    if (abilita_inserimento_nuova_domanda)
                    {
                        int count = 0;
                        bool SelezionaDomandeSuccessive = false;
                        foreach (SiarLibrary.NotAutogeneratedClasses.RiepilogoDomandePagamento d in domande_pagamento)
                        {
                            if (d.IdDomandaPagamento == null)
                            {
                                count++;
                                if (SelezionaDomandeSuccessive)
                                    list_abilita_inserimento.Add(d.Ordine);
                            }
                            //mi segno l'ordine dell'ultima domanda inserita
                            //Senza istruttoria conlusa
                            if (d.IdDomandaPagamento != null && (d.Approvata == null || d.Approvata))
                            {
                                if (d.Segnatura == null)
                                {
                                    list_abilita_inserimento.Clear();
                                    break;
                                }
                                else
                                {
                                    if (d.CodTipo == "SLD" && !d.Annullata)
                                        list_abilita_inserimento.Clear();
                                    SelezionaDomandeSuccessive = true;
                                }
                                //Con istruttoria conclusa
                                //if (d.IdDomandaPagamento != null && (d.Approvata == null || d.Approvata))
                                //{
                                //    if (d.Segnatura == null || (d.Segnatura!= null && d.Approvata!= true && d.Annullata== false))
                                //    {
                                //        list_abilita_inserimento.Clear();
                                //        break;
                                //    }
                                //    else
                                //    {
                                //        if (d.Approvata == true || d.Annullata == true)
                                //        {
                                //            if (d.CodTipo == "SLD" && !d.Annullata)
                                //                list_abilita_inserimento.Clear();
                                //            SelezionaDomandeSuccessive = true;
                                //        }
                                //    }

                                //SiarLibrary.ProgettoStoricoCollection stato = stati_progetto.FiltroFase(d.CodFase);
                                //if (stato.Count == 0 || stato[0].Segnatura == null)
                                //{// controllo che lo stato della domanda di aiuto sia cambiato ovvero che l'istruttore abbia istruito il pagamento
                                //    abilita_inserimento_nuova_domanda = false;
                                //    break;
                                //}
                            }
                        }
                        if (count == domande_pagamento.Count)
                            prima_domanda = true;
                    }

                    #endregion abilita nuova domanda pagamento

                    RicercaDomandeInControlliInLoco();
                    RicercaDomandaInCertificazione();
                    CaricaStoricoModifiche();
                    CaricaDecertificazioni();
                }
            }

            var utAppalto = new SiarBLL.BandoConfigCollectionProvider().GetBandoConfig_TpAppaltoDescrizione(Progetto.IdBando);
            if (utAppalto != null && utAppalto == "Strumenti finanziari")
                strumenti_finanziari = true;

            int idAttoDefinizio;
            if (int.TryParse(hdnIdAttoDefinizione.Value, out idAttoDefinizio))
                attoAffidamento_selezionato = attiAff_prov.GetById(idAttoDefinizio);
            else
                attoAffidamento_selezionato = null;

            int idAffidamentoAll;
            if (int.TryParse(hdnIdProgettoAttiAffidamentoAllegato.Value, out idAffidamentoAll))
                attoAffidamentoAllegato_selezionato = attiAffAllegato_prov.GetById(idAffidamentoAll);
            else
                attoAffidamentoAllegato_selezionato = null;

            ucGestioneLavori.Progetto = Progetto;
            ucGestioneLavori.ContenitoreTondeggiante = false;

            ProcureSpeciali.Progetto = Progetto;
        }

        void lstModalita_DataBinding(object sender, EventArgs e)
        {
            lstModalita.Items.Clear();
            lstModalita.Items.Add(new ListItem("", ""));
            if (permessi_operatore > 2)
            {
                lstModalita.Items.Add(new ListItem("Ridefinizione di esito istruttorio", "AR"));
                btnNuovaVariante.Text = "Inserisci";
                if (permessi_operatore == 3) btnNuovaVariante.Enabled = true;
            }
            else
            {
                lstModalita.Items.Add(new ListItem("Variante", "VA"));
                lstModalita.Items.Add(new ListItem("Adeguamento tecnico", "AT"));
            }
        }

        protected override void OnPreRender(EventArgs e)
        {
            btnNuovaVariante.Enabled = abilita_inserimento_nuova_domanda;
            if (btnNuovaVariante.Enabled)

            {
                string errore = new SiarBLL.DomandaDiPagamentoCollectionProvider().ControlloVarianteRilasciabile(Progetto.IdProgetto, false, true);

                if (errore != null)
                {
                    btnNuovaVariante.ToolTip = errore;
                    btnNuovaVariante.Enabled = false;
                }
            }

            lstModalita.DataBinding += new EventHandler(lstModalita_DataBinding);
            lstModalita.DataBind();
            //dg.DataSource = domande_pagamento;
            //if (domande_pagamento.Count == 0) dg.Titolo = "Nessuna domanda di pagamento prevista per il bando.";
            //dg.ItemDataBound += new DataGridItemEventHandler(dg_ItemDataBound);
            //dg.ShowFooter = true;
            //dg.FooterStyle.CssClass = "TotaliFooter";
            //dg.DataBind();

            dgVarianti.DataSource = varianti;
            if (varianti.Count == 0) dgVarianti.Titolo = "Nessuna richiesta di modifica degli investimenti.";
            else dgVarianti.SetTitoloNrElementi();
            dgVarianti.ItemDataBound += new DataGridItemEventHandler(dgVarianti_ItemDataBound);
            dgVarianti.DataBind();
            hdnTipoPagamento.Value = "";

            //AFFidamento enti/fornitore
            SiarLibrary.DatiMonitoraggioFESR cup = null;
            SiarLibrary.DatiMonitoraggioFESRCollection cup_coll = new SiarBLL.DatiMonitoraggioFESRCollectionProvider().Select(null, Progetto.IdProgetto);
            if (cup_coll.Count > 0)
            {
                cup = cup_coll[0];
                if (cup.IdCUPNatura != "07" && cup.IdCUPNatura != "06")
                {
                    //// controllo se beneficiario non è regione marche
                    //SiarLibrary.Impresa impresa = new SiarBLL.ImpresaCollectionProvider().GetById(Progetto.IdImpresa);
                    //if (impresa.RagioneSociale != "ENTE REGIONE MARCHE")
                    //{
                    divAffidamento.Visible = true;
                    SiarLibrary.ProgettoAttiAffidamentoCollection atti_coll = new SiarBLL.ProgettoAttiAffidamentoCollectionProvider().Find(Progetto.IdProgetto, null);
                    dgAttiAffidamento.DataSource = atti_coll;
                    dgAttiAffidamento.ItemDataBound += new DataGridItemEventHandler(dgAttiAffidamento_ItemDataBound);
                    dgAttiAffidamento.DataBind();
                    if (attoAffidamento_selezionato != null)
                    {
                        txtCfFornitore.Text = attoAffidamento_selezionato.CfFornitore;
                        txtNumero.Text = attoAffidamento_selezionato.Numero;
                        txtData.Text = attoAffidamento_selezionato.Data;
                        txtNewImporto.Text = attoAffidamento_selezionato.Importo;
                    }

                    SiarLibrary.ProgettoAttiAffidamentoAllegatiCollection alleg_coll = attiAffAllegato_prov.Find(null, Progetto.IdProgetto, null);
                    //datasource
                    dgAllegati.DataSource = alleg_coll;
                    dgAllegati.DataBind();

                    if (attoAffidamentoAllegato_selezionato != null)
                    {
                        ufcNAAllegato.IdFile = attoAffidamentoAllegato_selezionato.IdFile;
                        txtNADescrizioneBreve.Text = attoAffidamentoAllegato_selezionato.Descrizione;
                    }

                    if (permessi_operatore == 2)
                    {
                        btnNuovoAtto.Enabled = true;
                        btnSalvaAtto.Enabled = true;
                        if (attoAffidamento_selezionato != null)
                            btnElimina.Enabled = true;
                        btnSalva.Enabled = true;
                        //btnEliminaAllegato.Enabled = true;
                    }
                    //else
                    //{
                    //    if (attoAffidamentoAllegato_selezionato != null)
                    //        btnEliminaAllegato.Enabled = false;
                    //}
                    //}
                }
            }

            //corettiva post saldo 

            //commentato giugno 2022
            ////veriffico se il saldo è in certificazione
            //bool certificato_saldo = false;
            //var cert_spesa_testa_provider = new SiarBLL.CertspTestaCollectionProvider();
            //var cert_spesa_dett_provider = new SiarBLL.CertspDettaglioCollectionProvider();
            //var cert_spesa_testa_coll = new SiarLibrary.CertspTestaCollection();
            //SiarLibrary.CertspDettaglioCollection cert_dett_coll = cert_spesa_dett_provider.FindDefinitiviSelezionatiXProgetto(Progetto.IdProgetto);
            //foreach (SiarLibrary.CertspDettaglio cd in cert_dett_coll)
            //{
            //    SiarLibrary.DomandaDiPagamento ddp = new SiarBLL.DomandaDiPagamentoCollectionProvider().GetById(cd.IdDomandaPagamento);
            //    if (ddp.CodTipo == "SLD")
            //        certificato_saldo = true;
            //}

            bool saldo_istruito = false;
            SiarLibrary.DomandaDiPagamentoCollection dom_coll = new SiarBLL.DomandaDiPagamentoCollectionProvider().Find(null, "SLD", Progetto.IdProgetto, null);
            foreach (SiarLibrary.DomandaDiPagamento ddp in dom_coll)
            {
                if (ddp.SegnaturaApprovazione != null && ddp.SegnaturaApprovazione != "" && ddp.Approvata == true && ddp.Annullata == false)
                    saldo_istruito = true;
            }

            if (Progetto.CodStato == "T" && (permessi_operatore == 3 || permessi_operatore == 4) && saldo_istruito)
            {
                divSoccorsoIstrtuttorio.Visible = true;
                SiarLibrary.DomandaDiPagamentoCollection dom_coll_post = new SiarBLL.DomandaDiPagamentoCollectionProvider().Find(null, "RET", Progetto.IdProgetto, null);
                if (dom_coll_post.Count > 0)
                {
                    dgRettificaSaldo.DataSource = dom_coll_post;
                    dgRettificaSaldo.ItemDataBound += new DataGridItemEventHandler(dgRettificaSaldo_ItemDataBound);
                    dgRettificaSaldo.DataBind();

                    if (dom_coll_post[dom_coll_post.Count - 1].SegnaturaApprovazione != "" && dom_coll_post[dom_coll_post.Count - 1].SegnaturaApprovazione != null)
                    {
                        if (new SiarBLL.BandoResponsabiliCollectionProvider().Find(Progetto.IdBando, Operatore.Utente.IdUtente, null, true, true).Count == 0)
                            btnProseguiPostSld.Enabled = false;
                    }
                    else
                        btnProseguiPostSld.Enabled = false;
                }
                else
                {
                    if (new SiarBLL.BandoResponsabiliCollectionProvider().Find(Progetto.IdBando, Operatore.Utente.IdUtente, null, true, true).Count == 0)
                        btnProseguiPostSld.Enabled = false;
                }

            }

            base.OnPreRender(e);
        }

        void dgVarianti_ItemDataBound(object sender, DataGridItemEventArgs e)
        {
            DataGridItem dgi = (DataGridItem)e.Item;
            if (dgi.ItemType == ListItemType.Header)
            {
                dgi.CssClass = "TESTA1";
                dgi.Cells[0].ColumnSpan = 5;
                dgi.Cells[0].HorizontalAlign = HorizontalAlign.Center;
                dgi.Cells[0].Text = "VARIANTI/VARIAZIONI FINANZIARIE/A.T.</td><td colspan=3 align=center>RIEPILOGO ISTRUTTORIA</td><td style='border-bottom:1px solid #ABAE80'></td></tr><tr class='TESTA'><td>Nr.";
            }
            else if (dgi.ItemType != ListItemType.Footer)
            {
                SiarLibrary.Varianti v = (SiarLibrary.Varianti)dgi.DataItem;
                if (v.CuaaEntrante != null)
                    dgi.Cells[1].Text = "<img src='../../images/soggetto.ico' alt='Variante con richiesta di cambio beneficiario' />";
                if (v.Annullata)
                {
                    dgi.Cells[6].Text = "ANNULLATA DAL RICHIEDENTE";
                    for (int i = 2; i < 5; i++) dgi.Cells[i].Style.Add("text-decoration", "line-through");
                }
                if (v.CodTipo.FindValueIn("VI", "AR")) dgi.Cells[3].Text = "<b>" + v.TipoVariante + "</b>";
                else dgi.Cells[3].Text = "<b>" + v.TipoVariante + ": </b>" + (v.Descrizione == null ? "" : (v.Descrizione.Value.Length > 120 ?
                    v.Descrizione.Value.Substring(0, 117) + "..." : v.Descrizione.Value));
                dgi.Cells[4].Text = "Nominativo: <b>" + v.Nominativo + "</b><br />Ruolo: <b>" + v.Profilo + "</b><br />Ente: <b>" + v.Ente + "</b>";
                if (v.SegnaturaApprovazione != null || (v.CodTipo == "VI" && v.Approvata != null))
                    dgi.Cells[5].Text = "<input type='checkbox' disabled=true checked />";
                else
                {
                    dgi.Cells[5].Text = "<input type='checkbox' disabled=true />";
                    dgi.Cells[6].Text = "";
                    dgi.Cells[7].Text = "";
                }

                int tipo_modifica = SiarLibrary.DbStaticProvider.GetPermessiOperatoreSuVariante(v.IdVariante,
                    Operatore.Utente.IdUtente, varianti_provider.DbProviderObj);
                if (tipo_modifica > 0)
                {
                    string testo, url;
                    SiarBLL.AllegatiProtocollatiCollectionProvider allegatiProvider = new SiarBLL.AllegatiProtocollatiCollectionProvider();
                    //SiarLibrary.AllegatiProtocollatiCollection ff = allegatiProvider.Find(null, null, v.IdVariante, null, null, null, null, null);
                    //int numeroAllegati = ff.Count;
                    //bool documentiVarianteOk = checkAllegatiProtocollatiVariante(v, numeroAllegati);
                    bool documentiVarianteOk = allegatiProvider.CheckAllegatiProtocollati(SiarBLL.AllegatiProtocollatiCollectionProvider.TipoCheck.Variante, v.IdVariante, v.Segnatura);
                    switch (tipo_modifica)
                    {
                        case 4:
                            if (documentiVarianteOk)
                            {
                                testo = "Visualizza istruttoria";
                                url = "../IPagamento/IVariante/Riepilogo.aspx?idvar=" + v.IdVariante;
                            }
                            else
                            {
                                testo = "Protocolla gli allegati";
                                url = "Variante/FirmaRichiesta.aspx?idvar=" + v.IdVariante;
                            }
                            break;

                        case 3:
                            if (v.CodTipo.FindValueIn("VI", "AR"))
                            {
                                testo = "Modifica la variazione";
                                url = "../IPagamento/IVariante/Riepilogo.aspx?idvar=" + v.IdVariante;
                            }
                            else if (documentiVarianteOk)
                            {
                                testo = "Istruisci la richiesta";
                                url = "../IPagamento/IVariante/Riepilogo.aspx?idvar=" + v.IdVariante;
                            }
                            else
                            {
                                testo = "Protocolla gli allegati";
                                url = "Variante/FirmaRichiesta.aspx?idvar=" + v.IdVariante;
                            }
                            break;

                        case 2:
                            testo = "Modifica la richiesta";
                            url = "Variante/Riepilogo.aspx?idvar=" + v.IdVariante;
                            break;

                        default:
                            testo = "Visualizza";
                            bool in_lavorazione = v.CodTipo.FindValueIn("AT", "VA") && v.Segnatura == null;
                            bool in_attesa_protocollazione_documenti = v.CodTipo.FindValueIn("AT", "VA") && v.Segnatura != null && !documentiVarianteOk;
                            bool istruttoria = !in_attesa_protocollazione_documenti && !in_lavorazione && (v.CodTipo == "VI" ? v.Approvata == null : v.SegnaturaApprovazione == null);

                            if (istruttoria)
                            {
                                if (v.CodTipo.FindValueIn("VI", "AR")) dgi.Cells[8].Text = "istruttoria in corso";
                                else

                                {
                                    dgi.Cells[8].Text = "<table class='news' style='margin:5px' cellpadding=0 cellspacing=0><tr><td class='newsHeader'>";

                                    if (v.Annullata)

                                        dgi.Cells[8].Text += "ANNULLATA";
                                    else

                                        dgi.Cells[8].Text += "ISTRUTTORIA IN CORSO";

                                    dgi.Cells[8].Text += "</td></tr><tr><td class=news style='height:30px;width:150px;text-align:center;color:black;border-top:none;border-bottom:solid 1px black' onclick=\"sncAjaxCallVisualizzaProtocollo('"
                                    + v.Segnatura + "');\">Visualizza documento firmato</td></tr><tr><td class=news style='height:30px;width:150px;text-align:center;color:black;border-top:none' onclick=\"SNCVisualizzaReport('rptRicevutaProtocollazioneVariante',1,'IdVariante="
                                    + v.IdVariante + "');\">Stampa la ricevuta di protocollazione</td></tr></table>";
                                }
                                return;
                            }
                            else if (in_attesa_protocollazione_documenti)
                            {
                                testo = "Protocolla gli allegati";
                                url = "Variante/FirmaRichiesta.aspx?idvar=" + v.IdVariante;
                            }
                            else if (in_lavorazione && !Operatore.Utente.Profilo.Equals("Amministratore"))
                            {
                                dgi.Cells[8].Text += "IN LAVORAZIONE";
                                return;
                            }
                            else url = "Variante/Riepilogo.aspx?idvar=" + v.IdVariante;
                            break;
                    }
                    dgi.Cells[8].Text = "<input type=button onclick=\"location='" + url + "'\" value='" + testo
                        + "' style='width:130px' class='ButtonGrid'/>";
                }
            }
        }

        //void dg_ItemDataBound(object sender, DataGridItemEventArgs e)
        //{
        //    DataGridItem dgi = (DataGridItem)e.Item;
        //    if (dgi.ItemType == ListItemType.Header)
        //    {
        //        dgi.CssClass = "TESTA1";
        //        dgi.Cells[0].ColumnSpan = 7;
        //        dgi.Cells[0].HorizontalAlign = HorizontalAlign.Center;
        //        dgi.Cells[0].Text = "DOMANDE DI PAGAMENTO</td><td colspan=4 align=center>RIEPILOGO ISTRUTTORIA</td></tr><tr class='TESTA'><td>Richiesta";
        //    }
        //    else if (dgi.ItemType == ListItemType.Footer)
        //    {
        //        // se l'importo richiesto + maggiore del contributo massimo del bando allora faccio vedere il contributo massimo del bando
        //        decimal importoMassimoBando = 0;
        //        dgi.Cells[5].Text = "";
        //        SiarLibrary.BandoTipoInvestimentiCollection bti_coll = new SiarBLL.BandoTipoInvestimentiCollectionProvider().Find(Progetto.IdBando, 7, null);
        //        if (bti_coll.Count >0  && bti_coll[0].ImportoMax != null)
        //        {
        //            importoMassimoBando = bti_coll[0].ImportoMax;
        //            if (contributo_richiesto > importoMassimoBando)
        //            {
        //                contributo_richiesto = importoMassimoBando;
        //                dgi.Cells[5].Text += "** ";
        //            }
        //        }

        //        dgi.Cells[4].Text = string.Format("{0:c}", importo_richiesto);
        //        dgi.Cells[5].Text += string.Format("{0:c}", contributo_richiesto);
        //        dgi.Cells[9].Text = string.Format("{0:c}", importo_ammesso);
        //        dgi.Cells[10].Text = string.Format("{0:c}", contributo_ammesso);
        //    }
        //    else
        //    {
        //        SiarLibrary.NotAutogeneratedClasses.RiepilogoDomandePagamento domanda = (SiarLibrary.NotAutogeneratedClasses.RiepilogoDomandePagamento)dgi.DataItem;
        //        if (domanda.IdDomandaPagamento == null)
        //        {
        //            dgi.Cells[0].Text = "<input type='checkbox' disabled=true />";
        //            dgi.Cells[7].Text = "<input type='checkbox' disabled=true />";
        //            if (prima_domanda || (abilita_inserimento_nuova_domanda &&
        //                list_abilita_inserimento.Contains(domanda.Ordine)))
        //            {
        //                if(variante_inserita_non_istruita)
        //                    dgi.Cells[3].Text = "<b>Variante/Variazione finanziaria<br>in corso</b>";
        //                else
        //                    dgi.Cells[3].Text = "<input type=button onclick=\"nsc_post('" + domanda.CodTipo
        //                    + "')\" value='Richiedi pagamento' style='width:130px' class='ButtonGrid'/>";
        //            }
        //        }
        //        else
        //        {
        //            dgi.Cells[0].Text = "<input type='checkbox' disabled=true checked />";
        //            if (permessi_operatore < 3 || Operatore.Utente.CodTipoEnte == "%")
        //                dgi.Cells[3].Text = "<input type=button onclick=\"location='../PPagamento/DatiAnagrafici.aspx?idpag="
        //                + domanda.IdDomandaPagamento + "'\" value='Visualizza la domanda' style='width:150px' class='ButtonGrid'/>";
        //            dgi.Cells[7].Text = "<input type='checkbox' disabled=true />";
        //            if (domanda.CodTipo == "ANT")
        //            {
        //                dgi.Cells[4].Text = "--"; dgi.Cells[4].Style.Add("text-align", "center");
        //                dgi.Cells[9].Text = "--"; dgi.Cells[8].Style.Add("text-align", "center");
        //            }
        //            if (domanda.Segnatura != null)
        //            {
        //                SiarBLL.AllegatiProtocollatiCollectionProvider allegatiProvider = new SiarBLL.AllegatiProtocollatiCollectionProvider();
        //                SiarLibrary.AllegatiProtocollatiCollection ff = allegatiProvider.Find(null, domanda.IdDomandaPagamento, null, null, null, null, null, null);
        //                int numeroAllegati = ff.Count;

        //                bool allegatiProtocollatiOk = checkAllegatiProtocollati(domanda, numeroAllegati);

        //                if (!allegatiProtocollatiOk)
        //                {
        //                    dgi.Cells[3].Text = "<input type=button onclick=\"location='../PPagamento/FirmaRichiesta.aspx?idpag="
        //                + domanda.IdDomandaPagamento + "'\" value='Protocolla gli allegati' style='width:150px' class='ButtonGrid'/>";
        //                }
        //                else
        //                {
        //                    dgi.Cells[6].Text = "<img src='" + Page.ResolveUrl("~/images/print_ico.gif") + "' alt='Domanda'  onclick=\"sncAjaxCallVisualizzaProtocollo('" + domanda.Segnatura + "');\" style='cursor: pointer;'>";
        //                    bool in_istruttoria = !domanda.Annullata
        //                        && (domanda.Approvata == null || domanda.SegnaturaApprovazione == null);
        //                    if (in_istruttoria)
        //                    {
        //                        //nascondo la lavorazione dell'istruttoria della domanda
        //                        if (permessi_operatore > 2) dgi.Cells[2].Text = "<b>istruttoria in corso</b>";
        //                        else
        //                        {
        //                            SiarBLL.IntegrazioniPerDomandaDiPagamentoCollectionProvider integrazione_provider = new SiarBLL.IntegrazioniPerDomandaDiPagamentoCollectionProvider();
        //                            var integrazioni_collection = integrazione_provider.Find(null, domanda.IdDomandaPagamento, false, null);
        //                            if (integrazioni_collection.Count > 0)
        //                            {
        //                                var integrazione_domanda = integrazioni_collection[0];
        //                                if (integrazione_domanda.SegnaturaIstruttore != null && !integrazione_domanda.SegnaturaIstruttore.Equals(""))
        //                                {
        //                                    SiarBLL.IntegrazioneSingolaDiDomandaCollectionProvider integrazioni_singole_provider = new SiarBLL.IntegrazioneSingolaDiDomandaCollectionProvider();
        //                                    var integrazioni_singole_collection = integrazioni_singole_provider.Find(null, integrazione_domanda.IdIntegrazioneDomandaDiPagamento, null, null, null, null);
        //                                    string testo_cella = "<table class='news' style='margin:5px' cellpadding=0 cellspacing=0><tr><td class='newsHeader'>INTEGRATIVE RICHIESTE</td></tr><tr><td class=news style='height:30px;width:180px;text-align:center;color:black;border-top:none' onclick=\"parent.location='../PPagamento/IntegrazioniDomandaPagamento.aspx?idpag="
        //                                        + domanda.IdDomandaPagamento + "'\">Visualizza le integrazioni richieste</td></tr><br /></table>";
        //                                    dgi.Cells[3].Text = testo_cella;
        //                                }
        //                                else
        //                                {
        //                                    dgi.Cells[3].Text = "<table class='news' style='margin:5px' cellpadding=0 cellspacing=0><tr><td class='newsHeader'>ISTRUTTORIA IN CORSO</td></tr><tr><td class=news style='height:30px;width:180px;text-align:center;color:black;border-top:none' onclick=\"SNCVisualizzaReport('rptRicevutaProtocollazioneDomandaPagamento',1,'IdDomandaPagamento="
        //                                        + domanda.IdDomandaPagamento + "');\">Stampa la ricevuta di protocollazione</td></tr></table>";
        //                                }
        //                            }
        //                            else
        //                            {
        //                                dgi.Cells[3].Text = "<table class='news' style='margin:5px' cellpadding=0 cellspacing=0><tr><td class='newsHeader'>ISTRUTTORIA IN CORSO</td></tr><tr><td class=news style='height:30px;width:180px;text-align:center;color:black;border-top:none' onclick=\"SNCVisualizzaReport('rptRicevutaProtocollazioneDomandaPagamento',1,'IdDomandaPagamento="
        //                                    + domanda.IdDomandaPagamento + "');\">Stampa la ricevuta di protocollazione</td></tr></table>";
        //                            }
        //                        }
        //                        domanda.ImportoAmmesso = null;
        //                        domanda.ContributoAmmesso = null;
        //                        dgi.Cells[9].Text = "";
        //                        dgi.Cells[10].Text = "";
        //                    }
        //                    else if (!domanda.Annullata)
        //                    {
        //                        dgi.Cells[7].Text = "<input type='checkbox' disabled=true checked />";
        //                        if (domanda.Approvata != null && !domanda.Approvata)
        //                        {
        //                            for (int i = 2; i < 11; i++)
        //                            {
        //                                dgi.Cells[i].Style.Add("text-decoration", "line-through");
        //                                dgi.Cells[i].Style.Add("color", "#bc3333");
        //                            }
        //                        }
        //                    }

        //                    if (permessi_operatore > 2)
        //                    {
        //                        string testo = "Visualizza l`istruttoria";
        //                        if (permessi_operatore == 3 && in_istruttoria) testo = "Istruisci la pratica";
        //                        dgi.Cells[8].Text = "<input type=button onclick=\"location='../IPagamento/CheckListPagamento.aspx?idpag="
        //                            + domanda.IdDomandaPagamento + "'\" value='" + testo + "' style='width:150px' class='ButtonGrid'/>";
        //                    }
        //                }
        //            }
        //            else if (AbilitaModifica && domanda.CfOperatore == ((SiarLibrary.Web.MasterPage)Master).Operatore.Utente.CfUtente)
        //                dgi.Cells[3].Text = "<input type=button onclick=\"location='../PPagamento/DatiAnagrafici.aspx?idpag="
        //                    + domanda.IdDomandaPagamento + "'\" value='Modifica la richiesta' style='width:150px' class='ButtonGrid'/>";

        //            if (!domanda.Annullata)
        //            {
        //                if (!strumenti_finanziari)
        //                {
        //                    if (domanda.ImportoRichiesto != null)
        //                        importo_richiesto += domanda.ImportoRichiesto;
        //                    if (domanda.ContributoRichiesto != null)
        //                        contributo_richiesto += domanda.ContributoRichiesto;

        //                    if (domanda.Approvata != null && domanda.Approvata)
        //                    {
        //                        if (domanda.ImportoAmmesso != null) importo_ammesso += domanda.ImportoAmmesso;
        //                        if (domanda.ContributoAmmesso != null) contributo_ammesso += domanda.ContributoAmmesso;
        //                    }
        //                }
        //                else
        //                {
        //                    var pag_rich_fem_list = new SiarBLL.PagamentiRichiestiFemCollectionProvider()
        //                        .Find(null, null, null, Progetto.IdProgetto, domanda.IdDomandaPagamento)
        //                        .ToArrayList<SiarLibrary.PagamentiRichiestiFem>();

        //                    var richiesto = pag_rich_fem_list.Sum(p => p.ImportoRichiesto);
        //                    dgi.Cells[4].Text = string.Format("{0:c}", richiesto);
        //                    dgi.Cells[5].Text = string.Format("{0:c}", richiesto);
        //                    importo_richiesto += richiesto;
        //                    contributo_richiesto += richiesto;

        //                    if (domanda.Approvata != null && domanda.Approvata)
        //                    {
        //                        var ammesso = pag_rich_fem_list.Sum(p => p.ImportoAmmesso);
        //                        dgi.Cells[9].Text = string.Format("{0:c}", ammesso);
        //                        dgi.Cells[10].Text = string.Format("{0:c}", ammesso);
        //                        importo_ammesso += ammesso;
        //                        contributo_ammesso += ammesso;
        //                    }
        //                }
        //            }
        //            else
        //            {
        //                dgi.Cells[8].Text = "ANNULLATA DAL RICHIEDENTE";
        //                dgi.Cells[9].Text = "";
        //                dgi.Cells[10].Text = "";
        //                for (int i = 2; i < 7; i++)
        //                {
        //                    dgi.Cells[i].Style.Add("color", "grey");
        //                    dgi.Cells[i].Style.Add("text-decoration", "line-through");
        //                }
        //            }
        //        }
        //    }
        //}

        protected void btnPost_Click(object sender, EventArgs e)
        {
            try
            {
                if (!abilita_inserimento_nuova_domanda) throw new SiarLibrary.SiarException(SiarLibrary.TextErrorCodes.ModificaDisabilitata);
                if (string.IsNullOrEmpty(hdnTipoPagamento.Value))
                    throw new Exception("Si è verificato un errore sul server si prega di contattare l'helpdesk per segnalare il problema.");

                string errore = new SiarBLL.DomandaDiPagamentoCollectionProvider().ControlloDomandaRilasciabile(Progetto.IdProgetto);
                if (errore != null)
                    throw new Exception(errore);

                SiarLibrary.DomandaDiPagamento domanda = new SiarLibrary.DomandaDiPagamento();
                domanda.CodTipo = hdnTipoPagamento.Value;
                domanda.IdProgetto = Progetto.IdProgetto;
                domanda.DataInserimento = DateTime.Now;
                domanda.CfOperatore = Operatore.Utente.CfUtente;
                domanda.DataModifica = DateTime.Now;
                domanda.CodEnte = Operatore.Utente.CodEnte;
                domanda.FirmaPredisposta = false;
                domanda.FirmaPredispostaRup = false;
                new SiarBLL.DomandaDiPagamentoCollectionProvider().Save(domanda);
                Session["domanda_pagamento"] = domanda;
                Redirect("../PPagamento/DatiAnagrafici.aspx");
            }
            catch (Exception ex) { ShowError(ex); }
        }

        protected void btnNuovaVariante_Click(object sender, EventArgs e)
        {
            try
            {
                /*foreach (SiarLibrary.NotAutogeneratedClasses.RiepilogoDomandePagamento dp in domande_pagamento)
                    if (dp.IdDomandaPagamento != null && !dp.Annullata)
                        if (dp.SelezionataXRevisione == null)
                            throw new Exception("Almeno una delle domande di pagamento inserite deve ancora essere sottoposta alla procedura di revisione dell`istruttoria. Impossibile continuare.");
                        else if (dp.RevisioneConclusa == null || !dp.RevisioneConclusa)
                            throw new Exception("Almeno una delle domande di pagamento inserite è attualmente sottoposta alla procedura di revisione dell`istruttoria. Impossibile continuare.");
                */
                if (lstModalita.SelectedValue == null || lstModalita.SelectedValue == "")
                    throw new Exception("Selezionare la modalità della nuova richiesta.");
                string errore = new SiarBLL.DomandaDiPagamentoCollectionProvider().ControlloVarianteRilasciabile(Progetto.IdProgetto, false, true);

                if (errore != null)

                {
                    ShowError(errore);

                    return;
                }

                if (pratiche_in_istruttoria || (!abilita_inserimento_nuova_domanda && permessi_operatore != 3))
                {
                    ShowError("Almeno una delle domande di pagamento o delle richieste di varianti/a.t. inserite è attualmente sottoposta alle fasi di istruttoria. Impossibile continuare.");
                    return;
                }
                SiarLibrary.NotAutogeneratedClasses.RiepilogoDomandePagamentoCollection saldi_inseriti = domande_pagamento;
                foreach (SiarLibrary.NotAutogeneratedClasses.RiepilogoDomandePagamento d in saldi_inseriti)
                    if (d.CodTipo == "SLD" && d.IdDomandaPagamento != null && !d.Annullata)
                        throw new Exception("Non è possibile richiedere varianti/a.t. poichè è gia stato presentato il SALDO.");

                string cod_tipo = lstModalita.SelectedValue;
                SiarLibrary.BandoTipoVarianti bando_tipo_variante = new SiarBLL.BandoTipoVariantiCollectionProvider().GetById(Progetto.IdBando, cod_tipo);
                if (bando_tipo_variante == null) throw new Exception("Il bando non prevede modifiche degli investimenti della modalità selezionata.");
                else
                {   // se 0 ne possono inserire quante ne vogliono
                    if (bando_tipo_variante.NumeroMassimo > 0)
                    {
                        int varianti_inserite = varianti.FiltroGenerale(null, cod_tipo, null, null, null, true, null, null).Count;
                        if (bando_tipo_variante.NumeroMassimo != null && varianti_inserite >= bando_tipo_variante.NumeroMassimo)
                            throw new Exception("Sono già presenti " + varianti_inserite.ToString()
                                + " modifiche al piano degli investimenti della modalità selezionato. Non è possibile richiederne altre.");
                    }
                }

                varianti_provider.DbProviderObj.BeginTran();
                SiarBLL.PianoInvestimentiCollectionProvider investimenti_provider = new SiarBLL.PianoInvestimentiCollectionProvider(varianti_provider.DbProviderObj);
                SiarLibrary.PianoInvestimentiCollection investimenti_istruiti = investimenti_provider.GetSituazionePianoInvestimenti(Progetto.IdProgetto);

                SiarLibrary.Varianti nuova = new SiarLibrary.Varianti();
                nuova.IdProgetto = Progetto.IdProgetto;
                nuova.CodTipo = cod_tipo;
                nuova.DataInserimento = DateTime.Now;
                nuova.DataModifica = DateTime.Now;
                nuova.Operatore = Operatore.Utente.CfUtente;
                nuova.CodEnte = Bando.CodEnte;
                nuova.FirmaPredisposta = false;
                nuova.FirmaPredispostaRup = false;
                varianti_provider.Save(nuova);

                // duplico gli investimenti
                //SiarLibrary.LocalizzazioneInvestimentoCollection particelle = new SiarLibrary.LocalizzazioneInvestimentoCollection();
                //SiarBLL.LocalizzazioneInvestimentoCollectionProvider particelle_provider = new SiarBLL.LocalizzazioneInvestimentoCollectionProvider(varianti_provider.DbProviderObj);
                SiarLibrary.PrioritaXInvestimentiCollection priorita = new SiarLibrary.PrioritaXInvestimentiCollection();
                SiarBLL.PrioritaXInvestimentiCollectionProvider priorita_provider = new SiarBLL.PrioritaXInvestimentiCollectionProvider(varianti_provider.DbProviderObj);
                foreach (SiarLibrary.PianoInvestimenti i in investimenti_istruiti)
                {
                    if (i.CodVariazione != "A")
                    {
                        i.IdInvestimentoOriginale = i.IdInvestimento;
                        i.IdVariante = nuova.IdVariante;
                        i.Ammesso = null;
                        i.Istruttore = null;
                        i.DataValutazione = null;
                        i.ValutazioneInvestimento = null;
                        i.CodVariazione = null;
                        i.DataVariazione = DateTime.Now;
                        i.OperatoreVariazione = Operatore.Utente.CfUtente;
                        i.MarkAsNew();
                        investimenti_provider.Save(i);

                        //#region localizzazione
                        //particelle = particelle_provider.Find(null, i.IdInvestimentoOriginale, null, null);
                        //foreach (SiarLibrary.LocalizzazioneInvestimento p in particelle)
                        //{
                        //    p.MarkAsNew();
                        //    p.IdInvestimento = i.IdInvestimento;
                        //    particelle_provider.Save(p);
                        //}
                        //#endregion

                        #region priorita

                        priorita = priorita_provider.Find(null, i.IdInvestimentoOriginale, null, null);
                        foreach (SiarLibrary.PrioritaXInvestimenti pxi in priorita)
                        {
                            pxi.MarkAsNew();
                            pxi.IdInvestimento = i.IdInvestimento;
                            priorita_provider.Save(pxi);
                        }

                        #endregion priorita
                    }
                }
                varianti_provider.DbProviderObj.Commit();
                if (cod_tipo == "AR") Redirect("../IPagamento/IVariante/Riepilogo.aspx?idvar=" + nuova.IdVariante, "Ridefinizione di esito istruttorio inserita correttamente, ora è possibile iniziarne la modifica.", false);
                else Redirect("Variante/Riepilogo.aspx?idvar=" + nuova.IdVariante, "Richiesta inserita correttamente, ora è possibile iniziarne la modifica.", false);
            }
            catch (Exception ex) { varianti_provider.DbProviderObj.Rollback(); ShowError(ex); }
        }

        protected void btnVisualizzaModifica_Click(object sender, EventArgs e)
        {
            try
            {
                int id_modifica;

                if (int.TryParse(hdnIdModifica.Value, out id_modifica))
                {
                    var modifica_dati = new SiarBLL.ModificaDatiGeneraleCollectionProvider().GetById(id_modifica);

                    Session["_modificaDati"] = modifica_dati;
                    Redirect(PATH_PPAGAMENTO + "VisualizzaModifica.aspx");
                }
                else
                    throw new Exception("Nessuna modifica selezionata.");
            }
            catch (Exception ex)
            {
                ShowError(ex.Message);
            }
        }

        protected void btnVisualizzaIrregolarita_Click(object sender, EventArgs e)
        {
            try
            {
                int id_cert_decertificazione;

                if (int.TryParse(hdnIdCertDecert.Value, out id_cert_decertificazione))
                {
                    var decertificazione = new SiarBLL.CertDecertificazioneCollectionProvider().GetById(id_cert_decertificazione);

                    switch (decertificazione.TipoDecertificazione)
                    {
                        case "Irregolarita":
                            var irregolarita = new SiarBLL.IrregolaritaCollectionProvider().GetById(decertificazione.IdDecertificazione);
                            var progettoIrr = new SiarBLL.ProgettoCollectionProvider().GetById(irregolarita.IdProgetto);
                            Session["_irregolarita"] = irregolarita;
                            Session["_progetto"] = progettoIrr;
                            Redirect(PATH_CONTROLLI + "IrregolaritaErroriRinunce.aspx");
                            break;

                        case "Errore":
                            var errore = new SiarBLL.ErroreCollectionProvider().GetById(decertificazione.IdDecertificazione);
                            var progettoErr = new SiarBLL.ProgettoCollectionProvider().GetById(errore.IdProgetto);
                            Session["_errore"] = errore;
                            Session["_progetto"] = progettoErr;
                            Redirect(PATH_CONTROLLI + "Errori.aspx");
                            break;

                        case "Revoca":
                            var revoca = new SiarBLL.RevocaCollectionProvider().GetById(decertificazione.IdDecertificazione);
                            var progettoRev = new SiarBLL.ProgettoCollectionProvider().GetById(revoca.IdProgetto);
                            Session["_revoca"] = revoca;
                            Session["_progetto"] = progettoRev;
                            Redirect(PATH_CONTROLLI + "Revoche.aspx");
                            break;

                        case "RecuperoBeneficiario":
                            var recupero = new SiarBLL.RecuperoBeneficiarioCollectionProvider().GetById(decertificazione.IdDecertificazione);
                            var progettoRec = new SiarBLL.ProgettoCollectionProvider().GetById(recupero.IdProgetto);
                            Session["_recuperoBeneficiario"] = recupero;
                            Session["_progetto"] = progettoRec;
                            Redirect(PATH_CONTROLLI + "RecuperoBeneficiario.aspx");
                            break;
                    }
                }
                else
                    throw new Exception("Nessuna irregolarita/errore/rinuncia selezionata.");
            }
            catch (Exception ex)
            {
                ShowError(ex.Message);
            }
        }

        protected void RicercaDomandeInControlliInLoco()
        {
            try
            {
                var profilo_utente = Operatore.Utente.Profilo;

                if (!profilo_utente.Equals("Utente singolo")
                    && !profilo_utente.Equals("Consulente")
                    && Progetto != null
                    && Progetto.IdProgetto != null)
                { 
                    //devo mostrare solo quelle estratte per la checklist e definitive
                    var elencoCollection = new VelencoControlliLocoCollectionProvider().FindGestioneLavori(Progetto.IdProgetto, null, "SI", "SI");

                    if (elencoCollection.Count > 0)
                    {
                        divGestioneControlliInLoco.Visible = true;
                        divTestaLoco.Visible = true;
                        dgTestaLoco.Titolo = "La domanda di contributo è stata selezionata nei controlli in loco.";
                        dgTestaLoco.DataSource = elencoCollection;
                        dgTestaLoco.ItemDataBound += new DataGridItemEventHandler(dgTestaLoco_ItemDataBound);
                        dgTestaLoco.DataBind();
                    }
                    else
                    {
                        divGestioneControlliInLoco.Visible = true;
                        divTestaLoco.Visible = true;
                        dgTestaLoco.Titolo = "La domanda di contributo non è stata selezionata nei controlli in loco.";
                    }
                }
            }
            catch(Exception ex)
            {
                ShowError(ex.Message);
            }
        }

        protected void RicercaDomandaInCertificazione()
        {
            try
            {
                var profilo_utente = Operatore.Utente.Profilo;
                if (!profilo_utente.Equals("Utente singolo")
                    && !profilo_utente.Equals("Consulente"))
                {
                    var cert_spesa_testa_provider = new CertspTestaCollectionProvider();
                    var cert_spesa_dett_provider = new CertspDettaglioCollectionProvider();
                    var cert_spesa_testa_list = new List<CertspTesta>();

                    if (Progetto != null && Progetto.IdProgetto != null)
                    {
                        var cert_spesa_dett_coll = cert_spesa_dett_provider.FindDefinitiviSelezionatiXProgetto(Progetto.IdProgetto);

                        if (cert_spesa_dett_coll.Count > 0)
                        {
                            divGestioneCertificazione.Visible = true;
                            divTestaElenco.Visible = true;
                            dgTesta.Titolo = "La domanda di contributo è presente in almeno una certificazione di spesa definitiva.";
                            dgTesta.DataSource = cert_spesa_dett_coll;
                            dgTesta.ItemDataBound += new DataGridItemEventHandler(dgTesta_ItemDataBound);
                            dgTesta.MostraTotale(5, "ImportocontributopubblicoIncrementale");
                            dgTesta.DataBind();
                        }
                        else
                        {
                            divGestioneCertificazione.Visible = true;
                            divTestaElenco.Visible = true;
                            dgTesta.Titolo = "La domanda di contributo non è presente in una certificazione di spesa definitiva.";
                        }
                    }
                }
            }
            catch (Exception ex) { ShowError(ex); }
        }

        private void CaricaStoricoModifiche()
        {
            try
            {
                var profilo_utente = Operatore.Utente.Profilo;

                if (!(profilo_utente.Equals("Utente singolo") || profilo_utente.Equals("Consulente")))
                {
                    var modifiche_collection = new SiarBLL.ModificaDatiGeneraleCollectionProvider().Find(Progetto.IdProgetto, null, null, null, null, null);

                    if (modifiche_collection.Count > 0)
                    {
                        lblNumModifiche.Text = string.Format("Visualizzate {0} righe", modifiche_collection.Count.ToString());
                        dgModifiche.DataSource = modifiche_collection;
                        dgModifiche.ItemDataBound += new DataGridItemEventHandler(dgModifiche_ItemDataBound);
                        dgModifiche.DataBind();
                    }
                    else
                    {
                        lblNumModifiche.Text = "Nessuna modifica trovata.";
                    }

                    divStoricoModifiche.Visible = true;
                }
                else
                    divStoricoModifiche.Visible = false;
            }
            catch (Exception ex)
            {
                ShowError(ex.Message);
            }
        }

        private void CaricaDecertificazioni()
        {
            try
            {
                var profilo_utente = Operatore.Utente.Profilo;

                if (!(profilo_utente.Equals("Utente singolo") || profilo_utente.Equals("Consulente")))//TODO: Metti dei criteri veri
                {
                    var decertificazioni_collection = new SiarBLL.CertDecertificazioneCollectionProvider().Find(null, Progetto.IdProgetto, null, null, null, null, null, null, null, null, null, null);

                    if (decertificazioni_collection.Count > 0)
                    {
                        lblNumDecertificazioni.Text = string.Format("Visualizzate {0} righe", decertificazioni_collection.Count.ToString());
                        dgDecertificazione.DataSource = decertificazioni_collection;
                        dgDecertificazione.ItemDataBound += new DataGridItemEventHandler(dgDecertificazioni_ItemDataBound);
                        dgDecertificazione.DataBind();
                    }
                    else
                    {
                        lblNumDecertificazioni.Text = "Nessuna Decertificazione trovata.";
                    }

                    divIrregolaritaErroriRinunce.Visible = true;
                }
                else
                    divIrregolaritaErroriRinunce.Visible = false;
            }
            catch (Exception ex)
            {
                ShowError(ex.Message);
            }
        }

        void dgTestaLoco_ItemDataBound(object sender, DataGridItemEventArgs e)
        {
            DataGridItem dgi = (DataGridItem)e.Item;
            if (dgi.ItemType != ListItemType.Header && dgi.ItemType != ListItemType.Footer)
            {
                VelencoControlliLoco controllo = (VelencoControlliLoco)dgi.DataItem;
            }
        }

        void dgTesta_ItemDataBound(object sender, DataGridItemEventArgs e)
        {
            DataGridItem dgi = (DataGridItem)e.Item;
            if (dgi.ItemType != ListItemType.Header && dgi.ItemType != ListItemType.Footer)
            {
                CertspDettaglio dettaglio = (CertspDettaglio)dgi.DataItem;

                var testa = certspTestaCollectionProvider.GetById(dettaglio.Idcertsp);

                dgi.Cells[1].Text = testa.Datainizio.ToString();
                dgi.Cells[2].Text = testa.Datafine.ToString();

                string textDomande = "Id domanda: <b>" + dettaglio.IdDomandaPagamento + "</b> &nbsp; Tipo domanda: <b>" + dettaglio.Tipodomanda + "</b><br />";
                bool errore = false;
                dgi.Cells[4].Text = textDomande;

                if (dettaglio.ImportocontributopubblicoIncrementale != null)
                {
                    dgi.Cells[5].Text = string.Format("{0:c}", dettaglio.ImportocontributopubblicoIncrementale);
                    if (dettaglio.ImportocontributopubblicoIncrementale < 0)
                        dgi.BackColor = System.Drawing.Color.LightCoral;
                }
                else
                {
                    dgi.Cells[5].Text = "Mancano informazioni sulla certificazione";
                    errore = true;
                }

                if (errore)
                    ShowError("Mancano informazioni sulla certificazione: contattare l'helpdesk.");
            }
        }

        decimal TotAffidamenti = 0;

        void dgAttiAffidamento_ItemDataBound(object sender, System.Web.UI.WebControls.DataGridItemEventArgs e)
        {
            if (e.Item.ItemType == ListItemType.Item || e.Item.ItemType == ListItemType.AlternatingItem)
            {
                SiarLibrary.ProgettoAttiAffidamento affidamento = (SiarLibrary.ProgettoAttiAffidamento)e.Item.DataItem;
                e.Item.Cells[3].Text = string.Format("{0:c}", affidamento.Importo);
                TotAffidamenti += affidamento.Importo;
            }
            else if (e.Item.ItemType == ListItemType.Footer)
            {
                e.Item.Cells[3].Text = string.Format("{0:c}", TotAffidamenti);
            }
        }


        decimal contributo_rettifica_saldo = 0;
        void dgRettificaSaldo_ItemDataBound(object sender, System.Web.UI.WebControls.DataGridItemEventArgs e)
        {
            if (e.Item.ItemType == ListItemType.Item || e.Item.ItemType == ListItemType.AlternatingItem)
            {
                SiarLibrary.DomandaDiPagamento ddp = (SiarLibrary.DomandaDiPagamento)e.Item.DataItem;
                string testo;
                if (ddp.SegnaturaApprovazione != null)
                {
                    SiarLibrary.DomandaDiPagamentoEsportazioneCollection ddpe_coll = new SiarBLL.DomandaDiPagamentoEsportazioneCollectionProvider().Find(ddp.IdDomandaPagamento, ddp.IdProgetto, null);
                    if (ddpe_coll.Count > 0)
                    {
                        contributo_rettifica_saldo += ddpe_coll[0].ImportoAmmesso;
                        e.Item.Cells[4].Text = string.Format("{0:c}", ddpe_coll[0].ImportoAmmesso);
                    }

                    e.Item.Cells[5].Text = "<img src='" + PATH_IMAGES + "print_ico.gif' alt='Domanda'  onclick=\"sncAjaxCallVisualizzaProtocollo('" + ddp.SegnaturaApprovazione + "');\" style='cursor: pointer;'>";
                    testo = "Visualizza";
                }
                else
                {
                    e.Item.Cells[4].Text = "";
                    e.Item.Cells[5].Text = "";
                    testo = "Prosegui";
                }
                e.Item.Cells[6].Text = "<input type=button onclick=\"location='" + PATH_IPAGAMENTO + "IstruttoriaPianoInvestimentiRettificaSaldo.aspx?idpag="
                            + ddp.IdDomandaPagamento + "'\" value='" + testo + "' style='width:150px' class='ButtonGrid'/>";
            }
            else if (e.Item.ItemType == ListItemType.Footer)
            {
                e.Item.Cells[4].Text = string.Format("{0:c}", TotAffidamenti);
            }
        }




        protected void btnSalvaAtto_Click(object sender, EventArgs e)
        {
            try
            {
                SiarLibrary.ProgettoAttiAffidamento atto = new SiarLibrary.ProgettoAttiAffidamento();
                if (attoAffidamento_selezionato != null)
                {
                    atto = attoAffidamento_selezionato;
                    atto.OperatoreModifica = Operatore.Utente.IdUtente;
                    atto.DataModifica = DateTime.Today;
                }
                else
                {
                    atto.OperatoreCreazione = Operatore.Utente.IdUtente;
                    atto.DataCreazione = DateTime.Today;
                }
                atto.CfFornitore = txtCfFornitore.Text;
                atto.Numero = txtNumero.Text;
                atto.Data = txtData.Text;
                atto.Importo = txtNewImporto.Text;
                atto.IdProgetto = Progetto.IdProgetto;
                atto.OperatoreCreazione =
                attiAff_prov.Save(atto);
                ShowMessage("Atto di affidamento inserito correttamente.");
            }
            catch (Exception ex) { ShowError(ex); }
        }

        protected void btnSelezionaAtto_Click(object sender, EventArgs e)
        { }

        protected void btnInserisciIrregolarita_Click(object sender, EventArgs e)
        {
            try
            {
                Session["_progetto"] = Progetto;
                Session["_irregolarita"] = null;
                Redirect(PATH_CONTROLLI + "IrregolaritaErroriRinunce.aspx");
            }
            catch (Exception ex)
            {
                ShowError(ex.Message);
            }
        }

        protected void btnInserisciErrore_Click(object sender, EventArgs e)
        {
            try
            {
                Session["_progetto"] = Progetto;
                Session["_errore"] = null;
                Redirect(PATH_CONTROLLI + "Errori.aspx");
            }
            catch (Exception ex)
            {
                ShowError(ex.Message);
            }
        }

        protected void btnInserisciRevoca_Click(object sender, EventArgs e)
        {
            try
            {
                Session["_revoca"] = null;
                Session["_progetto"] = Progetto;
                Redirect(PATH_CONTROLLI + "Revoche.aspx");
            }
            catch (Exception ex)
            {
                ShowError(ex.Message);
            }
        }

        protected void btnInserisciRecupero_Click(object sender, EventArgs e)
        {
            Session["_recuperoBeneficiario"] = null;
            Session["_progetto"] = Progetto;
            Redirect(PATH_CONTROLLI + "RecuperoBeneficiario.aspx");
        }

        protected void btnEliminaAtto_Click(object sender, EventArgs e)
        {
            try
            {
                attiAff_prov.Delete(attoAffidamento_selezionato);
                attoAffidamento_selezionato = null;
                txtCfFornitore.Text = "";
                txtNumero.Text = "";
                txtData.Text = "";
                txtNewImporto.Text = "";
            }
            catch (Exception ex) { ShowError(ex); }
        }

        protected void btnInserisciRinuncia_Click(object sender, EventArgs e)
        {
            SiarLibrary.RinunciaCollection rinunciaColl = new SiarBLL.RinunciaCollectionProvider().Select(null, Progetto.IdProgetto, null, null, null, null, null);
            if (rinunciaColl.Count > 0)
                Session["_rinuncia"] = rinunciaColl[0];
            else
                Session["_rinuncia"] = null;

            Session["_progetto"] = Progetto;
            Redirect(PATH_CONTROLLI + "Rinunce.aspx");
        }

        void dgModifiche_ItemDataBound(object sender, DataGridItemEventArgs e)
        {
            int col_Id = 0,
                col_Target = 1,
                col_IdDomandaPagamento = 2,
                col_IdVariante = 3,
                col_DataModifica = 4,
                col_UtenteModifica = 5,
                col_TipoModifica = 6,
                col_Note = 7,
                col_Dettaglio = 8;

            DataGridItem dgi = (DataGridItem)e.Item;

            if (e.Item.ItemType == ListItemType.Item || e.Item.ItemType == ListItemType.AlternatingItem)
            {
                var modifica = (SiarLibrary.ModificaDatiGenerale)dgi.DataItem;

                if (modifica.Note != null && modifica.Note != "")
                {
                    var note = modifica.Note.ToString();

                    if (note.Length > 150)
                        dgi.Cells[col_Note].Text = note.Substring(0, 150) + " [...] ";
                }
            }
        }

        void dgDecertificazioni_ItemDataBound(object sender, DataGridItemEventArgs e)
        {
            int col_Assegnata = 6;
            DataGridItem dgi = (DataGridItem)e.Item;
            if (e.Item.ItemType == ListItemType.Item || e.Item.ItemType == ListItemType.AlternatingItem)
            {
                var decertificazione = (SiarLibrary.CertDecertificazione)dgi.DataItem;
                if (decertificazione.Assegnata != null && decertificazione.Assegnata)

                    dgi.Cells[col_Assegnata].Text = "Sì";
                else

                    dgi.Cells[col_Assegnata].Text = "No";
            }
        }

        //protected void btnEliminaAllegato_Click(object sender, EventArgs e)
        //{
        //    try
        //    {
        //        if (!AbilitaModifica) throw new SiarLibrary.SiarException(SiarLibrary.TextErrorCodes.ModificaDisabilitata);
        //        if (attoAffidamentoAllegato_selezionato == null ) throw new Exception("L'allegato selezionato non è valido.");
        //        attiAffAllegato_prov.Delete(attoAffidamentoAllegato_selezionato);

        //        attoAffidamentoAllegato_selezionato = null;

        //        ufcNAAllegato.IdFile = null;

        //        RegisterClientScriptBlock("pulisciCampi();");
        //    }
        //    catch (Exception ex) { ShowError(ex); }
        //}

        protected void btnSalva_Click(object sender, EventArgs e)
        {
            try
            {
                if (!AbilitaModifica) throw new SiarLibrary.SiarException(SiarLibrary.TextErrorCodes.ModificaDisabilitata);
                if (ufcNAAllegato.IdFile == null) throw new Exception("L'allegato non è stato selezionato.");
                if (txtNADescrizioneBreve.Text == "") throw new Exception("Descrizione dell'allegato mancante.");

                if (attoAffidamentoAllegato_selezionato == null)

                    attoAffidamentoAllegato_selezionato = new SiarLibrary.ProgettoAttiAffidamentoAllegati();
                attoAffidamentoAllegato_selezionato.IdProgetto = Progetto.IdProgetto;
                attoAffidamentoAllegato_selezionato.IdFile = ufcNAAllegato.IdFile;
                attoAffidamentoAllegato_selezionato.Descrizione = txtNADescrizioneBreve.Text;
                attoAffidamentoAllegato_selezionato.DataInserimento = DateTime.Today;
                attoAffidamentoAllegato_selezionato.OperatoreInserimento = Operatore.Utente.IdUtente;
                attoAffidamentoAllegato_selezionato.CodTipoDocumento = "ALLGEN";
                attiAffAllegato_prov.Save(attoAffidamentoAllegato_selezionato);
                RegisterClientScriptBlock("pulisciCampi();");

                ShowMessage("Allegato inserito correttamente.");
            }
            catch (Exception ex) { ShowError(ex); }
        }

        protected void btnIdProgettoAttiAffidamentoAllegato_Click(object sender, EventArgs e)
        {
        }

        protected void btnNuovoPost_Click(object sender, EventArgs e)
        {
            attoAffidamentoAllegato_selezionato = null;

            ufcNAAllegato.IdFile = null;
        }

        protected void btnProseguiPostSld_Click(object sender, EventArgs e)
        {
            try
            {
                SiarLibrary.DomandaDiPagamentoCollection dom_coll_post = new SiarBLL.DomandaDiPagamentoCollectionProvider().Find(null, "RET", Progetto.IdProgetto, null);
                foreach (SiarLibrary.DomandaDiPagamento ddp in dom_coll_post)
                {
                    if (ddp.SegnaturaApprovazione == null)
                        throw new Exception("Esiste già una richiesta di concessione di ulteriori contributi aperta, impossibile crearne una nuova.");
                }
                SiarLibrary.DomandaDiPagamento dgps = new SiarLibrary.DomandaDiPagamento();
                dgps.CodTipo = "RET";
                dgps.IdProgetto = Progetto.IdProgetto;
                dgps.DataInserimento = DateTime.Now;
                dgps.CfOperatore = Operatore.Utente.CfUtente;
                dgps.DataModifica = DateTime.Now;
                dgps.CodEnte = Operatore.Utente.CodEnte;
                dgps.Segnatura = "ND";
                dgps.CfIstruttore = Operatore.Utente.CfUtente;
                dgps.FirmaPredisposta = false;
                dgps.FirmaPredispostaRup = false;
                new SiarBLL.DomandaDiPagamentoCollectionProvider().Save(dgps);

                Session["domanda_pagamento"] = dgps;
                Redirect("../IPagamento/IstruttoriaPianoInvestimentiRettificaSaldo.aspx");
            }
            catch (Exception ex) { ShowError(ex); }

        }

    }
}