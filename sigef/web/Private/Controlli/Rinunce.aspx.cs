using System;
using System.Collections.Generic;
using System.Linq;
using System.Web.UI.WebControls;
using SiarLibrary;
using SiarLibrary.NotAutogeneratedClasses;
using SiarLibrary.Web;
using SiarBLL;


namespace web.Private.Controlli
{
    public partial class Rinunce : RinuncePage
    {
        bool aggregazioneImprese = false;
        List<RinunciaBeneficiario> rinunciaBeneficiarioList;
        PianoInvestimentiCollectionProvider pianoInvestimentiCollectionProvider = new PianoInvestimentiCollectionProvider();
        PagamentiRichiestiCollectionProvider pagamentiRichiestiCollectionProvider = new PagamentiRichiestiCollectionProvider();
        DomandaPagamentoLiquidazioneCollectionProvider domandaPagamentoLiquidazioneCollectionProvider = new DomandaPagamentoLiquidazioneCollectionProvider();
        ImpresaCollectionProvider impresaCollectionProvider = new ImpresaCollectionProvider();
        CertspTestaCollectionProvider certspTestaCollectionProvider = new CertspTestaCollectionProvider();
        CertspDettaglioCollectionProvider certspDettaglioCollectionProvider = new CertspDettaglioCollectionProvider();
        CertDecertificazioneCollectionProvider certDecertificazioneCollectionProvider = new CertDecertificazioneCollectionProvider();

        protected void Page_Load(object sender, EventArgs e)
        {

        }

        protected override void OnPreRender(EventArgs e)
        {
            ImpresaCollectionProvider impresaCollectionProvider = new ImpresaCollectionProvider();
            
            if (Rinuncia != null)
            {
                txtIdRinuncia.Text = Rinuncia.IdRinuncia;
                txtIdProgetto.Text = Rinuncia.IdProgetto;
                txtDataRinuncia.Text = Rinuncia.DataRinuncia;

                //Carico le rinunce beneficiario
                if (Rinuncia.IdRinuncia != null)
                    rinunciaBeneficiarioList = new RinunciaBeneficiarioCollectionProvider()
                        .Select(null, Rinuncia.IdRinuncia, null)
                        .ToArrayList<RinunciaBeneficiario>();

                //Carico i protocolli
                divProtocolli.Style.Remove("display");
                RinunciaProtocolloCollection rinunciaProtocolloCollection = new RinunciaProtocolloCollectionProvider().Select(null, Rinuncia.IdRinuncia, null);
                dgProtocolli.DataSource = rinunciaProtocolloCollection;
                dgProtocolli.DataBind();

                if (Progetto != null && Progetto.IdProgetto != null)
                {
                    //var certspDettaglioCollectionProvider = new CertspDettaglioCollectionProvider();
                    //var certspTestaCollectionProvider = new CertspTestaCollectionProvider();
                    var certspTestaCollection = new CertspTestaCollection();

                    //var cert_spesa_dett_coll = certspDettaglioCollectionProvider.FindDefinitiviSelezionatiXProgetto(Progetto.IdProgetto);
                    var certSpesaDettColl = certspDettaglioCollectionProvider.Select(null, null, null, Progetto.IdProgetto, 
                        null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
                    var certSpesaDettList = certSpesaDettColl
                        .ToArrayList<CertspDettaglio>()
                        .OrderByDescending(c => c.Datafine)
                        .ToList<CertspDettaglio>();
                    foreach (CertspDettaglio dett in certSpesaDettList)
                    {
                        certspTestaCollection.Add(certspTestaCollectionProvider.GetById(dett.Idcertsp));
                    }

                    if (certspTestaCollection.Count > 0)
                    {
                        divGestioneCertificazione.Visible = true;
                        divTestaElenco.Visible = true;
                        dgTesta.Titolo = "La domanda di contributo è presente in almeno una certificazione di spesa.";
                        dgTesta.DataSource = certSpesaDettList; // certspTestaCollection;
                        dgTesta.ItemDataBound += new DataGridItemEventHandler(dgCertificazioni_ItemDataBound); //dgTesta.ItemDataBound += new DataGridItemEventHandler(dgTesta_ItemDataBound);
                        dgTesta.DataBind();
                    }
                    else
                    {
                        divGestioneCertificazione.Visible = true;
                        divTestaElenco.Visible = true;
                        dgTesta.Titolo = "La domanda di contributo non è presente in una certificazione di spesa.";
                    }
                }
            }
            else
            {
                if (Progetto == null || Progetto.IdProgetto == null)
                    Redirect(PATH_CONTROLLI + "RicercaRinunce.aspx", "Progetto non selezionato", true);
                txtIdProgetto.Text = Progetto.IdProgetto.ToString();
            }
                
            //Gestione beneficiari rinunciatari
            ProgettoNaturaSoggettoCollection progettoNaturaSoggettoCollection = new ProgettoNaturaSoggettoCollection();
            ProgettoNaturaSoggettoCollectionProvider progettoNaturaSoggettoCollectionProvider = new ProgettoNaturaSoggettoCollectionProvider();
            ImpresaCollection impresaCollection = new ImpresaCollection();
            ProgettoCollectionProvider progettoCollectionProvider = new ProgettoCollectionProvider();

            progettoNaturaSoggettoCollection = progettoNaturaSoggettoCollectionProvider.Find(Progetto.IdProgetto, null, null);
            if (progettoNaturaSoggettoCollection.Count == 0)
                impresaCollection.Add(impresaCollectionProvider.GetById(Progetto.IdImpresa));
            else
            {
                if (progettoNaturaSoggettoCollection[0].TipoNaturaSoggetto == "Singola")
                    impresaCollection.Add(impresaCollectionProvider.GetById(Progetto.IdImpresa));
                else
                {
                    aggregazioneImprese = true;

                    ImpresaAggregazioneCollectionProvider impresaAggregazioneCollectionProvider = new ImpresaAggregazioneCollectionProvider();
                    var impresaAggregazioneCollection = impresaAggregazioneCollectionProvider.Find(progettoNaturaSoggettoCollection[0].IdAggregazione, null, null, 1, null);
                    foreach (ImpresaAggregazione impresaAgg in impresaAggregazioneCollection)
                        impresaCollection.Add(impresaCollectionProvider.GetById(impresaAgg.IdImpresa));
                }
            }
            dgBeneficiario.DataSource = impresaCollection;
            
            if(Rinuncia != null)
                dgBeneficiario.ItemDataBound += new DataGridItemEventHandler(dgBeneficiario_ItemDataBound);
            dgBeneficiario.DataBind();

            base.OnPreRender(e);
        }

        protected void btnSalvaRinuncia_Click(object sender, EventArgs e)
        {
            var rinunciaCollectionProvider = new RinunciaCollectionProvider();

            try
            {
                rinunciaCollectionProvider.DbProviderObj.BeginTran();
                var rinunciaBeneficiarioCollectionProvider = new RinunciaBeneficiarioCollectionProvider(rinunciaCollectionProvider.DbProviderObj);
                var certDecertificazioneCollectionProvider = new CertDecertificazioneCollectionProvider(rinunciaCollectionProvider.DbProviderObj);
                var progettoCollectionProvider             = new ProgettoCollectionProvider(rinunciaCollectionProvider.DbProviderObj);
                var esisteRinuncia = true;

                if (Rinuncia == null)
                {
                    //Se sto salvando una nuova rinuncia verifico che non ne esista un altra per lo stesso progetto
                    var rinunciaCollection = rinunciaCollectionProvider.Select(null, Progetto.IdProgetto, null, null, null, null, null);
                    if (rinunciaCollection.Count > 0)
                        throw new Exception("Esiste già una rinuncia associata a questo progetto!");

                    Rinuncia = new Rinuncia();
                    Rinuncia.CfInserimento = Operatore.Utente.CfUtente;
                    Rinuncia.IdProgetto = Progetto.IdProgetto;
                    esisteRinuncia = false;
                }

                Rinuncia.DataRinuncia = txtDataRinuncia.Text;
                Rinuncia.CfModifica = Operatore.Utente.CfUtente;
                Rinuncia.DataModifica = DateTime.Now; 
                rinunciaCollectionProvider.Save(Rinuncia);

                Rinuncia = rinunciaCollectionProvider.Select(null, Progetto.IdProgetto, null, null, null, null, null)[0];

                //RinunceBeneficiario presenti nel db
                var rinunciaBeneficiarioPresentiCollection = rinunciaBeneficiarioCollectionProvider.Select(null, Rinuncia.IdRinuncia, null);
                var rinunciaBeneficiarioPresentiList = rinunciaBeneficiarioPresentiCollection.ToArrayList<RinunciaBeneficiario>();

                //Id beneficiari selezionati
                string[] selezionati = ((CheckColumn)dgBeneficiario.Columns[3]).GetSelected();
                List<int> idBeneficiariNuoviList = selezionati.Select(int.Parse).ToList();

                //RinunceBeneficiario da aggiungere 
                var idImpresaPresenti = new HashSet<int>(rinunciaBeneficiarioPresentiList.Select(r => r.IdImpresa.Value));
                var idImpresaRinunceDaAggiungereList = idBeneficiariNuoviList.Where(p => !idImpresaPresenti.Contains(p)).ToList();

                //RinunceBeneficiario da eliminare 
                var rinunceDaEliminareList = rinunciaBeneficiarioPresentiList.Where(p => !idBeneficiariNuoviList.Contains(p.IdImpresa.Value)).ToList();

                //Elimino le rinunce beneficiario da eliminare 
                if (rinunceDaEliminareList.Count > 0)
                {
                    var rinunceDaEliminareCollection = new RinunciaBeneficiarioCollection();
                    foreach (RinunciaBeneficiario rin in rinunceDaEliminareList)
                        rinunceDaEliminareCollection.Add(rin);
                    rinunciaBeneficiarioCollectionProvider.DeleteCollection(rinunceDaEliminareCollection);
                }

                //Aggiungo le rinunce beneficiario da aggiungere 
                if (idImpresaRinunceDaAggiungereList.Count > 0)
                {
                    var rinunciaBeneficiarioDaAggiungereCollection = new RinunciaBeneficiarioCollection();
                    foreach (int idImpresa in idImpresaRinunceDaAggiungereList)
                        rinunciaBeneficiarioDaAggiungereCollection.Add(new RinunciaBeneficiario() { IdRinuncia = Rinuncia.IdRinuncia, IdImpresa = idImpresa });
                    rinunciaBeneficiarioCollectionProvider.SaveCollection(rinunciaBeneficiarioDaAggiungereCollection);
                }

                //Gestione CertDecertificazioni 
                var certDecertificazioniPresentiList = certDecertificazioneCollectionProvider.Find(null, null, null, Rinuncia.IdRinuncia, tipoDecertificazione.Rinuncia.ToString(), null, null, null, null, null, null, null)
                        .ToArrayList<CertDecertificazione>();

                var certSpesaDettColl = certspDettaglioCollectionProvider.Select(null, null, null, Progetto.IdProgetto,
                        null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
                var certSpesaDettList = certSpesaDettColl
                    .ToArrayList<CertspDettaglio>()
                    .OrderByDescending(c => c.Datafine)
                    .ToList<CertspDettaglio>();

                if (esisteRinuncia)
                {
                    if (certDecertificazioniPresentiList.Count == 0) //se non ne ho nessuna devo fare una decertificazione per ognuna
                    {
                        foreach (CertspDettaglio certspDettaglio in certSpesaDettList)
                        {
                            #region VecchioCalcolo
                            /*
                            var certDecertificazione = new CertDecertificazione();
                            certDecertificazione.IdProgetto = Rinuncia.IdProgetto;
                            certDecertificazione.IdDomandaPagamento = certspDettaglio.IdDomandaPagamento;
                            certDecertificazione.IdDecertificazione = Rinuncia.IdRinuncia;
                            certDecertificazione.TipoDecertificazione = tipoDecertificazione.Rinuncia.ToString();
                            certDecertificazione.DataConstatazioneAmministrativa = Rinuncia.DataRinuncia;

                            if (!aggregazioneImprese)
                            {
                                certDecertificazione.ImportoDecertificazioneAmmesso = certspDettaglio.ImportocontributopubblicoIncrementale;
                                certDecertificazione.ImportoDecertificazioneConcesso = certspDettaglio.ImportocontributopubblicoIncrementale;
                            } else {
                                decimal importoRinuncia = 0;

                                //se è un aggregazione sommo gli importi liquidati delle imprese che hanno rinunciato
                                var liquidazioniList = domandaPagamentoLiquidazioneCollectionProvider
                                    .Find(certspDettaglio.IdDomandaPagamento, null, null, null)
                                    .ToArrayList<DomandaPagamentoLiquidazione>();

                                if (liquidazioniList.Count > 0)
                                {
                                    var importoCertificazioneImpreseRinunciatarie = (from l in liquidazioniList
                                                                                     join r in rinunciaBeneficiarioList on l.IdImpresaBeneficiaria equals r.IdImpresa
                                                                                     select l)
                                          .Sum(l => l.QuietanzaImporto);

                                    importoRinuncia = importoCertificazioneImpreseRinunciatarie;
                                }
                                else
                                {
                                    //se non ho gli importi liquidati dovrebbero essere degli enti pubblici e devo prendere dal piano investimenti
                                    var pagamentiRichiestiCollection = pagamentiRichiestiCollectionProvider.Find(null, null, null, certspDettaglio.IdDomandaPagamento);

                                    foreach (PagamentiRichiesti pagamentoRichiesto in pagamentiRichiestiCollection)
                                    {
                                        var investimento = pianoInvestimentiCollectionProvider.GetById(pagamentoRichiesto.IdInvestimento);
                                        var matches = rinunciaBeneficiarioList.Where(r => r.IdImpresa == investimento.IdImpresaAggregazione)
                                            .ToList<RinunciaBeneficiario>()
                                            .FirstOrDefault();

                                        //se l'ho trovato l'investimento del pagamento richiesto è da sommare l'importo per la rinuncia
                                        if (matches.Count() > 0)
                                        {
                                            importoRinuncia += pagamentoRichiesto.ImportoAmmesso;
                                        }
                                    }
                                }

                                certDecertificazione.ImportoDecertificazioneAmmesso = importoRinuncia;
                                certDecertificazione.ImportoDecertificazioneConcesso = importoRinuncia;
                            }
                            */
                            #endregion VecchioCalcolo

                            //se voglio ricalcolare gli importi -> ora prendo dal datagrid
                            //var certDecertificazione = CalcolaImportiDecertificazione(null, certspDettaglio);
                            //certDecertificazioneCollectionProvider.Save(certDecertificazione);

                            decimal valore;
                            if (decimal.TryParse(Request.Form["txtImportoRinuncia" + certspDettaglio.IdDomandaPagamento + "_text"], out valore))
                            {
                                if (valore <= 0 || valore > certspDettaglio.ImportocontributopubblicoIncrementale)
                                    throw new Exception("E' stato inserito un importo rinuncia minore o uguale a 0 o maggiore dell'importo certificato per la domanda di pagamento " + certspDettaglio.IdDomandaPagamento);

                                var certDecertificazione = new CertDecertificazione();
                                certDecertificazione.IdProgetto = Rinuncia.IdProgetto;
                                certDecertificazione.IdDomandaPagamento = certspDettaglio.IdDomandaPagamento;
                                certDecertificazione.IdDecertificazione = Rinuncia.IdRinuncia;
                                certDecertificazione.TipoDecertificazione = tipoDecertificazione.Rinuncia.ToString();
                                certDecertificazione.DataConstatazioneAmministrativa = Rinuncia.DataRinuncia;
                                certDecertificazione.ImportoDecertificazioneAmmesso = valore;
                                certDecertificazione.ImportoDecertificazioneConcesso = valore;
                                certDecertificazioneCollectionProvider.Save(certDecertificazione);
                            }
                            else
                                throw new Exception("Importo rinuncia non valido per la domanda di pagamento " + certspDettaglio.IdDomandaPagamento);
                        }

                    }
                    else //altrimenti devo aggiornare quelle già presenti se non già assegnate per eventuali modifiche beneficiari 
                    {
                        var certDecertificazioniPresentiAssegnateList = certDecertificazioniPresentiList.Where(c => c.Assegnata != null && c.Assegnata).ToList();
                        if (certDecertificazioniPresentiAssegnateList.Count > 0)
                            throw new Exception("Alcune decertificazioni risultano già assegnate in certificazione di spesa o dei conti: impossibile continuare");

                        //se voglio ricalcolare gli importi -> ora prendo dal datagrid
                        //for (int i = 0; i < certDecertificazioniPresentiList.Count; i++) 
                        //{
                        //    var certDecertificazione = certDecertificazioniPresentiList[i];
                        //    var certspDettaglio = certSpesaDettList.Where(c => c.IdDomandaPagamento == certDecertificazione.IdDomandaPagamento).FirstOrDefault();
                        //    certDecertificazione = CalcolaImportiDecertificazione(certDecertificazione, certspDettaglio);
                        //    certDecertificazioneCollectionProvider.Save(certDecertificazione);
                        //}

                        foreach (CertspDettaglio certspDettaglio in certSpesaDettList)
                        {
                            decimal valore;
                            if (decimal.TryParse(Request.Form["txtImportoRinuncia" + certspDettaglio.IdDomandaPagamento + "_text"], out valore))
                            {
                                if (valore <= 0 || valore > certspDettaglio.ImportocontributopubblicoIncrementale)
                                    throw new Exception("E' stato inserito un importo rinuncia minore o uguale a 0 o maggiore dell'importo certificato per la domanda di pagamento " + certspDettaglio.IdDomandaPagamento);

                                var certDecertificazione = certDecertificazioneCollectionProvider
                                    .Find(null, null, certspDettaglio.IdDomandaPagamento, Rinuncia.IdRinuncia, tipoDecertificazione.Rinuncia.ToString(), null, null, null, null, null, null, null)
                                    .ToArrayList<CertDecertificazione>()
                                    .FirstOrDefault();

                                if (certDecertificazione == null || certDecertificazione.IdCertDecertificazione == null)
                                {
                                    certDecertificazione = new CertDecertificazione();
                                    certDecertificazione.IdProgetto = Rinuncia.IdProgetto;
                                    certDecertificazione.IdDomandaPagamento = certspDettaglio.IdDomandaPagamento;
                                    certDecertificazione.IdDecertificazione = Rinuncia.IdRinuncia;
                                    certDecertificazione.TipoDecertificazione = tipoDecertificazione.Rinuncia.ToString();
                                }

                                certDecertificazione.DataConstatazioneAmministrativa = Rinuncia.DataRinuncia;
                                certDecertificazione.ImportoDecertificazioneAmmesso = valore;
                                certDecertificazione.ImportoDecertificazioneConcesso = valore;
                                certDecertificazioneCollectionProvider.Save(certDecertificazione);
                            }
                            else
                                throw new Exception("Importo rinuncia non valido per la domanda di pagamento " + certspDettaglio.IdDomandaPagamento);
                        }
                    }
                }

                //se rinunciano tutti i beneficiari e il progetto non è già in stato rinuncia faccio il passaggio di stato
                bool cambioStato = false;
                var progetto = progettoCollectionProvider.GetById(Rinuncia.IdProgetto);
                if (progetto.Stato != "Rinuncia")
                {
                    ProgettoNaturaSoggettoCollection progettoNaturaSoggettoCollection = new ProgettoNaturaSoggettoCollection();
                    ProgettoNaturaSoggettoCollectionProvider progettoNaturaSoggettoCollectionProvider = new ProgettoNaturaSoggettoCollectionProvider(rinunciaCollectionProvider.DbProviderObj);
                    ImpresaCollection impresaCollection = new ImpresaCollection();

                    progettoNaturaSoggettoCollection = progettoNaturaSoggettoCollectionProvider.Find(Progetto.IdProgetto, null, null);
                    if (progettoNaturaSoggettoCollection.Count == 0)
                        impresaCollection.Add(impresaCollectionProvider.GetById(Progetto.IdImpresa));
                    else
                    {
                        if (progettoNaturaSoggettoCollection[0].TipoNaturaSoggetto == "Singola")
                            impresaCollection.Add(impresaCollectionProvider.GetById(Progetto.IdImpresa));
                        else
                        {
                            aggregazioneImprese = true;

                            ImpresaAggregazioneCollectionProvider impresaAggregazioneCollectionProvider = new ImpresaAggregazioneCollectionProvider();
                            var impresaAggregazioneCollection = impresaAggregazioneCollectionProvider.Find(progettoNaturaSoggettoCollection[0].IdAggregazione, null, null, 1, null);
                            foreach (ImpresaAggregazione impresaAgg in impresaAggregazioneCollection)
                                impresaCollection.Add(impresaCollectionProvider.GetById(impresaAgg.IdImpresa));
                        }
                    }

                    if (idBeneficiariNuoviList.Count == impresaCollection.Count)
                    {
                        progettoCollectionProvider.CambioStatoProgetto(progetto, "R", Operatore);
                        cambioStato = true;
                    }
                }

                rinunciaCollectionProvider.DbProviderObj.Commit();
                if (cambioStato)
                    ShowMessage("Rinuncia salvata con successo: il progetto è passato in stato 'Rinuncia'");
                else
                    ShowMessage("Rinuncia salvata con successo");
            }
            catch (Exception ex)
            {
                rinunciaCollectionProvider.DbProviderObj.Rollback();
                ShowError(ex.Message);
            }
        }

        private CertDecertificazione CalcolaImportiDecertificazione(CertDecertificazione certDecertificazione, CertspDettaglio certspDettaglio)
        {
            if (certDecertificazione == null) 
            {
                certDecertificazione = new CertDecertificazione();
                certDecertificazione.IdProgetto = Rinuncia.IdProgetto;
                certDecertificazione.IdDomandaPagamento = certspDettaglio.IdDomandaPagamento;
                certDecertificazione.IdDecertificazione = Rinuncia.IdRinuncia;
                certDecertificazione.TipoDecertificazione = tipoDecertificazione.Rinuncia.ToString();
                certDecertificazione.DataConstatazioneAmministrativa = Rinuncia.DataRinuncia;
            }

            if (!aggregazioneImprese)
            {
                certDecertificazione.ImportoDecertificazioneAmmesso = certspDettaglio.ImportocontributopubblicoIncrementale;
                certDecertificazione.ImportoDecertificazioneConcesso = certspDettaglio.ImportocontributopubblicoIncrementale;
            }
            else
            {
                decimal importoRinuncia = 0;

                //se è un aggregazione sommo gli importi liquidati delle imprese che hanno rinunciato
                var liquidazioniList = domandaPagamentoLiquidazioneCollectionProvider
                    .Find(certspDettaglio.IdDomandaPagamento, null, null, null)
                    .ToArrayList<DomandaPagamentoLiquidazione>();

                if (liquidazioniList.Count > 0)
                {
                    var importoCertificazioneImpreseRinunciatarie = (from l in liquidazioniList
                                                                     join r in rinunciaBeneficiarioList on l.IdImpresaBeneficiaria equals r.IdImpresa
                                                                     select l)
                          .Sum(l => l.QuietanzaImporto);

                    importoRinuncia = importoCertificazioneImpreseRinunciatarie;
                }
                else
                {
                    //se non ho gli importi liquidati dovrebbero essere degli enti pubblici e devo prendere dal piano investimenti
                    var pagamentiRichiestiCollection = pagamentiRichiestiCollectionProvider.Find(null, null, null, certspDettaglio.IdDomandaPagamento);

                    foreach (PagamentiRichiesti pagamentoRichiesto in pagamentiRichiestiCollection)
                    {
                        var investimento = pianoInvestimentiCollectionProvider.GetById(pagamentoRichiesto.IdInvestimento);
                        var matches = rinunciaBeneficiarioList.Where(r => r.IdImpresa == investimento.IdImpresaAggregazione)
                            .ToList<RinunciaBeneficiario>()
                            .FirstOrDefault();

                        //se l'ho trovato l'investimento del pagamento richiesto è da sommare l'importo per la rinuncia
                        if (matches.Count() > 0)
                        {
                            importoRinuncia += pagamentoRichiesto.ImportoAmmesso;
                        }
                    }
                }

                certDecertificazione.ImportoDecertificazioneAmmesso = importoRinuncia;
                certDecertificazione.ImportoDecertificazioneConcesso = importoRinuncia;
            }

            return certDecertificazione;
        }
        
        void dgBeneficiario_ItemDataBound(object sender, DataGridItemEventArgs e)
        {
            DataGridItem dgi = (DataGridItem)e.Item;
            var impreseSelezionate = new RinunciaBeneficiarioCollectionProvider().Select(null, Rinuncia.IdRinuncia, null);
            
            if (dgi.ItemType == ListItemType.Item || dgi.ItemType == ListItemType.AlternatingItem)
            {
                var impresa = (SiarLibrary.Impresa)e.Item.DataItem;
                bool impresaSelezionata = false;
                foreach (RinunciaBeneficiario imp in impreseSelezionate)
                    if (dgi.Cells[0].Text == imp.IdImpresa.ToString())
                        impresaSelezionata = true;

                if (impresaSelezionata)
                    dgi.Cells[3].Text = dgi.Cells[3].Text.Replace("<input", "<input checked");
                else
                    dgi.Cells[3].Text = dgi.Cells[3].Text.Replace("checked", "");
            }
        }

        void dgTesta_ItemDataBound(object sender, DataGridItemEventArgs e)
        {
            DataGridItem dgi = (DataGridItem)e.Item;
            if (dgi.ItemType != ListItemType.Header && dgi.ItemType != ListItemType.Footer)
            {
                CertspTesta testa = (CertspTesta)dgi.DataItem;

                var cert_dett_list = new CertspDettaglioCollectionProvider().getBy_IdCertSp(testa.Idcertsp)
                    .ToArrayList<CertspDettaglio>();
                var domande_list = new RiepilogoDomandePagamentoCollectionProvider().Find(Progetto.IdProgetto)
                    .ToArrayList<RiepilogoDomandePagamento>();

                var domande_trovate = from c in cert_dett_list
                                      join d in domande_list on c.IdDomandaPagamento equals d.IdDomandaPagamento
                                      select d;

                string textDomande = "";
                foreach (RiepilogoDomandePagamento rie in domande_trovate)
                {
                    textDomande += "Id domanda: <b>" + rie.IdDomandaPagamento + "</b> &nbsp; Tipo domanda: <b>" + rie.Descrizione + "</b><br />";
                }
                dgi.Cells[5].Text = textDomande;

                var cert_dett_trovate = from c in cert_dett_list
                                        join d in domande_list on c.IdDomandaPagamento equals d.IdDomandaPagamento
                                        select c;

                // 10/03/2022 Modificato importo mostrato come importo certificazione come somma nello stesso specifico id lotto
                // e non dello stesso periodo contabile (vedi pass Supporto #174019)
                decimal importoCertificazione = 0;
                decimal importoRinuncia = 0;
                bool errore = false;
                foreach (CertspDettaglio certspDettaglio in cert_dett_trovate)
                {
                    if (certspDettaglio.ImportocontributopubblicoIncrementale != null)
                    {
                        importoCertificazione += certspDettaglio.ImportocontributopubblicoIncrementale.Value;

                        if (!aggregazioneImprese)
                            importoRinuncia += importoCertificazione;
                        else
                        {
                            //se è un aggregazione sommo gli importi liquidati delle imprese che hanno rinunciato
                            var liquidazioniList = domandaPagamentoLiquidazioneCollectionProvider
                                .Find(certspDettaglio.IdDomandaPagamento, null, null, null)
                                .ToArrayList<DomandaPagamentoLiquidazione>();

                            if (liquidazioniList.Count > 0)
                            {
                                var importoCertificazioneImpreseRinunciatarie = (from l in liquidazioniList
                                                                                 join r in rinunciaBeneficiarioList on l.IdImpresaBeneficiaria equals r.IdImpresa
                                                                                 select l)
                                      .Sum(l => l.QuietanzaImporto);

                                importoRinuncia += importoCertificazioneImpreseRinunciatarie; 
                            } else {
                                //se non ho gli importi liquidati dovrebbero essere degli enti pubblici e devo prendere dal piano investimenti
                                var pagamentiRichiestiCollection = pagamentiRichiestiCollectionProvider.Find(null, null, null, certspDettaglio.IdDomandaPagamento);
                                
                                foreach(PagamentiRichiesti pagamentoRichiesto in pagamentiRichiestiCollection)
                                {
                                    var investimento = pianoInvestimentiCollectionProvider.GetById(pagamentoRichiesto.IdInvestimento);
                                    var matches = rinunciaBeneficiarioList.Where(r => r.IdImpresa == investimento.IdImpresaAggregazione)
                                        .ToList<RinunciaBeneficiario>()
                                        .FirstOrDefault();

                                    //se l'ho trovato l'investimento del pagamento richiesto è da sommare l'importo per la rinuncia
                                    if (matches.Count() > 0)
                                    {
                                        importoRinuncia += pagamentoRichiesto.ImportoAmmesso;
                                    }
                                }
                            }
                        }                            

                        dgi.Cells[6].Text = string.Format("{0:c}", importoCertificazione);
                        dgi.Cells[7].Text = string.Format("{0:c}", importoRinuncia);
                        if (certspDettaglio.Importocontributopubblico < 0)
                            dgi.BackColor = System.Drawing.Color.LightCoral;
                    }
                    else
                    {
                        dgi.Cells[6].Text = "Mancano informazioni sulla certificazione";
                        dgi.Cells[7].Text = "Mancano informazioni sulla certificazione";
                        errore = true;
                    }
                }

                if (errore)
                    ShowError("Mancano informazioni sulla certificazione: contattare l'helpdesk.");
            }
        }

        decimal importoCertificazioneTotale = 0;
        void dgCertificazioni_ItemDataBound(object sender, DataGridItemEventArgs e)
        {
            DataGridItem dgi = (DataGridItem)e.Item;

            if (dgi.ItemType != ListItemType.Header && dgi.ItemType != ListItemType.Footer)
            {
                var dettaglio = (CertspDettaglio)dgi.DataItem; 
                var testa = certspTestaCollectionProvider.GetById(dettaglio.Idcertsp);
                dgi.Cells[1].Text = testa.Datainizio;

                string textDomande = "";
                textDomande += "Id domanda: <b>" + dettaglio.IdDomandaPagamento + "</b> &nbsp; <br />Tipo domanda: <b>" + dettaglio.Tipodomanda + "</b><br />";
                dgi.Cells[5].Text = textDomande;

                bool errore = false;
                string testoLiquidatoBeneficiario = "";
                decimal sommaImportiRinunciatari = 0;

                if (dettaglio.ImportocontributopubblicoIncrementale != null)
                {
                    if (!aggregazioneImprese)
                    {
                        testoLiquidatoBeneficiario = dettaglio.Beneficiario + ": <b> " + string.Format("{0:c}", dettaglio.ImportocontributopubblicoIncrementale) + " </b>";
                        
                        sommaImportiRinunciatari += dettaglio.ImportocontributopubblicoIncrementale;
                    }
                    else
                    {
                        //se è un aggregazione sommo gli importi liquidati delle imprese che hanno rinunciato
                        var liquidazioniList = domandaPagamentoLiquidazioneCollectionProvider
                            .Find(dettaglio.IdDomandaPagamento, null, null, null)
                            .ToArrayList<DomandaPagamentoLiquidazione>();

                        if (liquidazioniList.Count > 0)
                        {
                            foreach (RinunciaBeneficiario rinunciaBeneficiario in rinunciaBeneficiarioList)
                            {
                                var liquidatoBeneficiario = liquidazioniList.Where(l => l.IdImpresaBeneficiaria == rinunciaBeneficiario.IdImpresa).Sum(l => l.QuietanzaImporto);
                                var impresaBeneficiaria = impresaCollectionProvider.GetById(rinunciaBeneficiario.IdImpresa);
                                testoLiquidatoBeneficiario += impresaBeneficiaria.Descrizione + ": <b> " + string.Format("{0:c}", liquidatoBeneficiario) + " </b><br />";
                                
                                sommaImportiRinunciatari += liquidatoBeneficiario;
                            }
                        }
                        else
                        {
                            //se non ho gli importi liquidati dovrebbero essere degli enti pubblici e devo prendere dal piano investimenti
                            var pagamentiRichiestiList = pagamentiRichiestiCollectionProvider.Find(null, null, null, dettaglio.IdDomandaPagamento).ToArrayList<PagamentiRichiesti>();
                            var pianoInvestimentiList = new List<PianoInvestimenti>();
                            foreach (PagamentiRichiesti pagamentoRichiesto in pagamentiRichiestiList)
                                pianoInvestimentiList.Add(pianoInvestimentiCollectionProvider.GetById(pagamentoRichiesto.IdInvestimento));

                            foreach (RinunciaBeneficiario rinunciaBeneficiario in rinunciaBeneficiarioList)
                            {
                                var liquidatoBeneficiario = (from p in pagamentiRichiestiList
                                                             join i in pianoInvestimentiList on p.IdInvestimento equals i.IdInvestimento
                                                             where i.IdImpresaAggregazione == rinunciaBeneficiario.IdImpresa
                                                             select p)
                                                                .Sum(p => p.ImportoAmmesso);
                                var impresaBeneficiaria = impresaCollectionProvider.GetById(rinunciaBeneficiario.IdImpresa);
                                testoLiquidatoBeneficiario += impresaBeneficiaria.Descrizione + ": <b> " + string.Format("{0:c}", liquidatoBeneficiario) + " </b><br />";

                                sommaImportiRinunciatari += liquidatoBeneficiario;
                            }
                        }
                    }

                    dgi.Cells[6].Text = string.Format("{0:c}", dettaglio.ImportocontributopubblicoIncrementale);
                    importoCertificazioneTotale += dettaglio.ImportocontributopubblicoIncrementale;
                    dgi.Cells[7].Text = testoLiquidatoBeneficiario;
                    if (dettaglio.Importocontributopubblico < 0)
                        dgi.BackColor = System.Drawing.Color.LightCoral;

                    string nome_casella = "txtImportoRinuncia" + dettaglio.IdDomandaPagamento; 
                    string valore = Request.Form[nome_casella + "_text"];
                    var certDecertificazioneCollection = certDecertificazioneCollectionProvider.Find(null, Progetto.IdProgetto, dettaglio.IdDomandaPagamento, null, tipoDecertificazione.Rinuncia.ToString(), null, null, null, null, null, null, null);
                    if (certDecertificazioneCollection.Count == 1)
                    {
                        var certDecertificazione = certDecertificazioneCollection[0];
                        if (certDecertificazione.ImportoDecertificazioneAmmesso != null && !Page.IsPostBack)
                            valore = certDecertificazione.ImportoDecertificazioneAmmesso;
                    }
                    else
                    {
                        valore = string.Format("{0:c}", sommaImportiRinunciatari);
                    }
                    
                    e.Item.Cells[8].Text = "<span id=\"" + nome_casella + "\" class=\"CurrencyBox\" style=\"display:inline-block;width:124px;\">"
                        + "<input name=\"" + nome_casella + "_text\" type=\"text\" id=\"" + nome_casella
                        + "_text\" style=\"text-align:right;WIDTH:100px;\" value='" + valore + "'/></span>";
                }
                else
                {
                    dgi.Cells[6].Text = "Mancano informazioni sulla certificazione";
                    dgi.Cells[7].Text = "Mancano informazioni sulla certificazione";
                    dgi.Cells[8].Text = "Mancano informazioni sulla certificazione";
                    errore = true;
                }

                if (errore)
                    ShowError("Mancano informazioni sulla certificazione: contattare l'helpdesk.");
            }
            else if (dgi.ItemType == ListItemType.Footer)
            {
                dgi.Cells[6].Text = string.Format("{0:c}", importoCertificazioneTotale);
            }
        }

        protected void btnEliminaRinuncia_Click(object sender, EventArgs e)
        {
            RinunciaCollectionProvider rinunciaCollectionProvider = new RinunciaCollectionProvider();
            
            try
            {
                var rinunciaProtocolloCollectionProvider = new RinunciaProtocolloCollectionProvider(rinunciaCollectionProvider.DbProviderObj);
                var rinunciaBeneficiarioCollectionProvider = new RinunciaBeneficiarioCollectionProvider(rinunciaCollectionProvider.DbProviderObj);
                var certDecertificazioneCollectionProvider = new CertDecertificazioneCollectionProvider(rinunciaCollectionProvider.DbProviderObj);
                rinunciaCollectionProvider.DbProviderObj.BeginTran();

                //Controllo se è già stata assegnata ad una decertificazione
                var decertificazioniAssegnate = certDecertificazioneCollectionProvider.Find(null, null, null, Rinuncia.IdRinuncia, tipoDecertificazione.Rinuncia.ToString(), null, null, true, null, null, null, null);
                if (decertificazioniAssegnate.Count > 0)
                    throw new Exception("La rinuncia risulta già assegnata in certificazione di spesa o dei conti: non è possibile eliminarla");
                //altrimenti cancello le decertificazioni
                var decertificazioniNonAssegnate = certDecertificazioneCollectionProvider.Find(null, null, null, Rinuncia.IdRinuncia, tipoDecertificazione.Rinuncia.ToString(), null, null, null, null, null, null, null);
                if (decertificazioniNonAssegnate.Count > 0)
                    certDecertificazioneCollectionProvider.DeleteCollection(decertificazioniNonAssegnate);

                //Elimino le rinunce beneficiario
                var beneficiari = rinunciaBeneficiarioCollectionProvider.Select(null, Rinuncia.IdRinuncia, null);
                if (beneficiari.Count > 0)
                    rinunciaBeneficiarioCollectionProvider.DeleteCollection(beneficiari);

                //Elimino i protocolli associati
                var protocolli = rinunciaProtocolloCollectionProvider.Select(null, Rinuncia.IdRinuncia, null);
                if (protocolli.Count > 0)
                    rinunciaProtocolloCollectionProvider.DeleteCollection(protocolli);
                
                rinunciaCollectionProvider.Delete(Rinuncia);
                rinunciaCollectionProvider.DbProviderObj.Commit();

                Rinuncia = null;
                Progetto = null;
                Redirect(PATH_CONTROLLI + "RicercaRinunce.aspx", "Rinuncia eliminata con successo", false);
            }
            catch (Exception ex)
            {
                rinunciaCollectionProvider.DbProviderObj.Rollback();
                ShowError(ex.Message);
            }
        }

        protected void btnAggiungiProtocollo_Click(object sender, EventArgs e)
        {
            try
            {
                var segnatura = txtProtocollo.Text;

                if (string.IsNullOrEmpty(segnatura)) 
                    throw new Exception("Non è stata inserita alcuna Segnatura. Impossibile continuare.");

                if (!new Protocollo().ProtocolloEsistente(segnatura))
                    throw new SiarException(TextErrorCodes.DocumentoNonValido);

                RinunciaProtocolloCollectionProvider rinunciaProtocolloCollection = new RinunciaProtocolloCollectionProvider();
                var protocollo = new RinunciaProtocollo()
                {
                    Protocollo = segnatura,
                    IdRinuncia = Rinuncia.IdRinuncia
                };
                rinunciaProtocolloCollection.Save(protocollo);
                
                txtProtocollo.Text = null;
                ShowMessage("Protocollo aggiunto");
            }
            catch(Exception ex)
            {
                ShowError(ex.Message);
            }
        }

        protected void btnEliminaProtocollo_Click(object sender, EventArgs e)
        {
            RinunciaProtocolloCollectionProvider rinunciaProtocolloCollection = new RinunciaProtocolloCollectionProvider();
            var protocollo = rinunciaProtocolloCollection.GetById(int.Parse(hdnIdRinunciaProtocollo.Value));
            rinunciaProtocolloCollection.Delete(protocollo);
            hdnIdRinunciaProtocollo.Value = null;
            ShowMessage("Protocollo eliminato");
        }

        protected void btnIndietro_Click(object sender, EventArgs e)
        {
            Rinuncia = null;
            Redirect(PATH_CONTROLLI + "RicercaRinunce.aspx");
        }
    }
}