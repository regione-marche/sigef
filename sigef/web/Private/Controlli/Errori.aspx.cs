using System;
using System.Collections.Generic;
using System.Linq;
using System.Web.UI;
using System.Web.UI.WebControls;
using SiarLibrary;
using SiarLibrary.Web;
using SiarBLL;
using SiarLibrary.NotAutogeneratedClasses;

namespace web.Private.Controlli
{
    public partial class Errori : ErrorePage
    {
        BandoCollectionProvider bando_provider;
        ProgettoCollectionProvider progetto_provider;
        ImpresaCollectionProvider impresa_provider;
        ErroreCollectionProvider errore_provider;
        ErroreAllegatiCollectionProvider errore_allegati_provider;
        ImpresaAggregazioneCollectionProvider impresa_aggregazione_provider;
        ProgettoNaturaSoggettoCollectionProvider natura_soggetto_provider;
        ProfiloXFunzioniCollectionProvider funzioni_profilo_provider;
        CertDecertificazioneCollectionProvider certDecertificazioneCollectionProvider;
        PagamentiErroreCollectionProvider pagamentiErroreCollectionProvider;
        PagamentiRichiestiCollectionProvider prichiesti_provider;
        VricercaSpeseIrregolariCollectionProvider ricerca_spese_provider;
        PianoInvestimentiCollectionProvider investimenti_provider;
        RiepilogoDomandePagamentoCollectionProvider riepilogo_provider;

        PianoInvestimentiCollection investimenti;
        PagamentiRichiestiCollection pagamenti_richiesti;

        #region Indici colonne Datagrid

        //Colonne dgRicercaSpeseIrregolari
        private int colRic_LottoCert = 0,
            colRic_DomandaPagamento = 1,
            colRic_Giustificativo = 2,
            colRic_Spesa = 3,
            colRic_Irregolare = 8,
            colRic_ImportoIrregolare = 9,
            colRic_IdSpesaIrregolare = 10,
            colRic_ContributoIrregolare = 11;

        #endregion Indici colonne Datagrid

        protected void Page_Load(object sender, EventArgs e)
        {
            //InizializzaProvider();

            //if (Progetto != null)
            //    CaricaCombobox();
        }

        protected override void OnPreRender(EventArgs e)
        {
            InizializzaProvider();

            if (Progetto != null)
            {
                //PopolaImmagini();
                CaricaCombobox();
                CaricaRiepilogoProgetto(Progetto);

                RiempiFormErrore();
                ControlloPermessiUtente();
            }
            else
                Redirect(PATH_CONTROLLI + "RicercaErrori.aspx", "Domanda non selezionata", true);

            base.OnPreRender(e);
        }

        private void InizializzaProvider()
        {
            bando_provider = new BandoCollectionProvider();
            progetto_provider = new ProgettoCollectionProvider();
            impresa_provider = new ImpresaCollectionProvider();
            errore_provider = new ErroreCollectionProvider();
            errore_allegati_provider = new ErroreAllegatiCollectionProvider();
            impresa_aggregazione_provider = new ImpresaAggregazioneCollectionProvider();
            natura_soggetto_provider = new ProgettoNaturaSoggettoCollectionProvider();
            funzioni_profilo_provider = new ProfiloXFunzioniCollectionProvider();
            certDecertificazioneCollectionProvider = new CertDecertificazioneCollectionProvider();
            pagamentiErroreCollectionProvider = new PagamentiErroreCollectionProvider();
            prichiesti_provider = new PagamentiRichiestiCollectionProvider();
            ricerca_spese_provider = new VricercaSpeseIrregolariCollectionProvider();
            investimenti_provider = new PianoInvestimentiCollectionProvider();
            riepilogo_provider = new RiepilogoDomandePagamentoCollectionProvider();
        }

        private void InizializzaProvider(DbProvider dbProviderObj)
        {
            bando_provider = new BandoCollectionProvider(dbProviderObj);
            progetto_provider = new ProgettoCollectionProvider(dbProviderObj);
            impresa_provider = new ImpresaCollectionProvider(dbProviderObj);
            errore_allegati_provider = new ErroreAllegatiCollectionProvider(dbProviderObj);
            impresa_aggregazione_provider = new ImpresaAggregazioneCollectionProvider(dbProviderObj);
            natura_soggetto_provider = new ProgettoNaturaSoggettoCollectionProvider(dbProviderObj);
            funzioni_profilo_provider = new ProfiloXFunzioniCollectionProvider(dbProviderObj);
            certDecertificazioneCollectionProvider = new CertDecertificazioneCollectionProvider(dbProviderObj);
            pagamentiErroreCollectionProvider = new PagamentiErroreCollectionProvider(dbProviderObj);
            prichiesti_provider = new PagamentiRichiestiCollectionProvider(dbProviderObj);
            ricerca_spese_provider = new VricercaSpeseIrregolariCollectionProvider(dbProviderObj);
            investimenti_provider = new PianoInvestimentiCollectionProvider(dbProviderObj);
        }

        private void CaricaCombobox()
        {
            //Combo beneficiario
            cblBeneficiari.Items.Clear();
            var impresa_progetto = impresa_provider.GetById(Progetto.IdImpresa);

            var natura_coll = natura_soggetto_provider.Find(Progetto.IdProgetto, null, null);
            if (natura_coll.Count > 0)
            {
                var natura = natura_coll[0];

                if (natura.TipoNaturaSoggetto == "Aggregata" && natura.IdAggregazione != null)
                {
                    var imprese_aggregazione_coll = impresa_aggregazione_provider.Find(natura.IdAggregazione, null, null, null, null);
                    if (imprese_aggregazione_coll.Count > 0)
                    {
                        foreach (ImpresaAggregazione imp_agg in imprese_aggregazione_coll)
                        {
                            var impresa = impresa_provider.GetById(imp_agg.IdImpresa);
                            cblBeneficiari.Items.Add(new ListItem(impresa.CodiceFiscale + " - " + impresa.RagioneSociale, impresa.CodiceFiscale));
                        }
                    }
                    else //se non esiste più il record (? non dovrebbe essere possibile) prendo l'impresa del progetto
                        cblBeneficiari.Items.Add(new ListItem(impresa_progetto.CodiceFiscale + " - " + impresa_progetto.RagioneSociale, impresa_progetto.CodiceFiscale));
                }
                else // se è singola prendo solo l'impresa del progetto
                    cblBeneficiari.Items.Add(new ListItem(impresa_progetto.CodiceFiscale + " - " + impresa_progetto.RagioneSociale, impresa_progetto.CodiceFiscale));
            }
            else //se è singola prendo solo l'impresa del progetto
                cblBeneficiari.Items.Add(new ListItem(impresa_progetto.CodiceFiscale + " - " + impresa_progetto.RagioneSociale, impresa_progetto.CodiceFiscale));

            cblBeneficiari.DataBind();
            cblBeneficiari.TextAlign = TextAlign.Right;

            //Combo azione  ai fini della certificazione
            lstAzione.Items.Clear();
            lstAzione.Items.Add(new ListItem("Nessuna"));
            lstAzione.Items.Add(new ListItem("Ritiro"));
            lstAzione.Items.Add(new ListItem("Recupero"));
            lstAzione.Items.Add(new ListItem("Recupero pendente"));
            lstAzione.Items.Add(new ListItem("Decurtazione"));

            //Combo Giustificatici
            lstDecurtaMassivo.DataBinding += new EventHandler(lstDecurtaMassivo_DataBinding);
            lstDecurtaMassivo.DataBind();
        }

        void lstDecurtaMassivo_DataBinding(object sender, EventArgs e)
        {
            txtPercentuale.Text = "100";
            lstDecurtaMassivo.Items.Clear();
            lstDecurtaMassivo.Items.Add(new ListItem("", ""));
            RiepilogoDomandePagamentoCollection domande_pagamento;

            lstDecurtaMassivo.Items.Add(new ListItem("Intero Progetto", "progetto"));
            domande_pagamento = riepilogo_provider.Find(Progetto.IdProgetto);
            foreach (RiepilogoDomandePagamento domanda in domande_pagamento)
            {
                if (domanda.Annullata == false)
                    lstDecurtaMassivo.Items.Add(new ListItem("Domanda: " + domanda.IdDomandaPagamento.ToString(), domanda.IdDomandaPagamento.ToString()));
            }

            if (IsPostBack)
                lstDecurtaMassivo.SelectedValue = Request.Form[lstDecurtaMassivo.UniqueID];
        }

        private void CaricaRiepilogoProgetto(Progetto progetto)
        {
            var bando = bando_provider.GetById(progetto.IdBando);

            Control c = LoadControl(PATH_CONTROLS + "DatiDomanda.ascx");
            Type t = c.GetType();
            t.GetProperty("Progetto").SetValue(c, progetto, null);
            t.GetProperty("Bando").SetValue(c, Bando, null);
            tdDomanda.Controls.Add(c);
            Session["_progetto"] = progetto;
            Session["_bando"] = bando;

            ucGestioneLavori.Progetto = Progetto;
            ucGestioneLavori.ContenitoreTondeggiante = false;
            ucGestioneLavori.CssClassTitolo = "paragrafo_light";
            ucGestioneLavori.ColonnaCheck = true;
            ucGestioneLavori.DescrizioneOpzionale = "E' necessario associare una domanda di pagamento già istruita all'errore spuntando l'apposita riga nell'ultima colonna.";
        }

        private void RiempiFormErrore()
        {
            if (Errore != null)
            {
                //Gestione domanda di pagamento
                if (Errore.IdDomandaPagamento != null)
                {
                    List<int> id_selezionato = new List<int>();
                    id_selezionato.Add(Errore.IdDomandaPagamento);
                    ucGestioneLavori.IdDomandeDaSelezionare = id_selezionato;
                }

                //Gestione beneficiari
                if (Errore.ImpreseBeneficiari != null)
                {
                    foreach (ListItem item in cblBeneficiari.Items)
                    {
                        if (Errore.ImpreseBeneficiari.Value.Contains(item.Value))
                            item.Selected = true;
                        else
                            item.Selected = false;
                    }
                }

                //Gestione allegati
                ErroreAllegati allegato_selezionato = null;
                int id_errore_allegato;
                if (int.TryParse(hdnIdErroreAllegato.Value, out id_errore_allegato))
                    allegato_selezionato = errore_allegati_provider.GetById(id_errore_allegato);

                var errori_allegati_coll = errore_allegati_provider.Find(null, Errore.IdErrore, null, null);
                if (errori_allegati_coll.Count > 0)
                {
                    lblNumErroriAllegati.Text = "Selezionare l'allegato per modificarne i dati";

                    dgErroriAllegati.DataSource = errori_allegati_coll;
                    dgErroriAllegati.ItemDataBound += new DataGridItemEventHandler(dgErroriAllegati_ItemDataBound);
                    dgErroriAllegati.DataBind();
                }
                else
                {
                    lblNumErroriAllegati.Text = "Nessun allegato associato.";
                }

                RiempiFormErroreAllegato();

                txtSoggettoRilevazione.Text = Errore.SoggettoRilevazione;
                txtDataRilevazione.Text = Errore.DataRilevazione;
                chkCertificato.Checked = Errore.Certificato;
                txtIdLotto.Text = Errore.IdLottoCertificazione;
                txtDataInizioLotto.Text = Errore.DataInizioCertificazione;
                txtDataFineLotto.Text = Errore.DataFineCertificazione;
                txtSpesaAmmessa.Text = Errore.SpesaAmmessaErrore;
                txtContributoPubblico.Text = Errore.ContributoPubblicoErrore;
                txtContributoAmmessoRevocare.Text = Errore.ContributoAmmessoErroreDaRevocare;
                txtNote.Text = Errore.Note;
                chkDaRecuperare.Checked = Errore.DaRecuperare;
                chkRecuperato.Checked = Errore.Recuperato;
                lstAzione.SelectedValue = Errore.AzioneCertificazione;
                //txtIdLottoImpattato.Text = Errore.IdLottoImpattato;

                RiempiFormGiustificativi();

                if (Errore.DaRecuperare != null && Errore.DaRecuperare)
                {
                    var recuperoProvider = new RecuperoBeneficiarioCollectionProvider();
                    var recuperoCollection = recuperoProvider.Find(null, Errore.IdProgetto, null, null, null, Errore.IdErrore);

                    if (recuperoCollection.Count > 0)
                    {
                        divMostraPulsanteCreaRecupero.Visible = false;

                        dgRecuperi.DataSource = recuperoCollection;
                        dgRecuperi.ItemDataBound += new DataGridItemEventHandler(dgRecuperi_ItemDataBound);
                        dgRecuperi.DataBind();
                    }
                    else
                    {
                        divMostraRecuperoAssociato.Visible = false;
                    }
                }
                else
                {
                    divMostraPulsanteCreaRecupero.Visible = false;
                    divMostraRecuperoAssociato.Visible = false;
                }
            }
            else
            {
                txtSoggettoRilevazione.Text = null;
                txtDataRilevazione.Text = DateTime.Now.ToString("dd/MM/yyyy");
                chkCertificato.Checked = false;
                divCertificazione.Visible = false;
                txtSpesaAmmessa.Text = null;
                txtContributoPubblico.Text = null;
                txtContributoAmmessoRevocare.Text = null;
                txtNote.Text = null;
                chkDaRecuperare.Checked = false;
                chkRecuperato.Checked = false;
                lstAzione.SelectedValue = "Nessuna";
                //txtIdLottoImpattato.Text = null;

                btnEliminaErrore.Visible = false;
                divGestioneAllegati.Visible = false;
                divGiustificativi.Visible = false;

                divMostraPulsanteCreaRecupero.Visible = false;
                divMostraRecuperoAssociato.Visible = false;
            }
        }

        private void ControlloPermessiUtente()
        {
            var funzioni_profilo_coll = funzioni_profilo_provider.Find(Operatore.Utente.IdProfilo, null, null, "errori", null, null, null, null);

            if (funzioni_profilo_coll.Count > 0)
            {
                var funzione = funzioni_profilo_coll[0];
                if (funzione.Modifica == null || funzione.Modifica == false)
                {
                    btnSalvaErroreAllegato.Visible = false;
                    btnEliminaErroreAllegato.Visible = false;

                    btnSalvaErrore.Visible = false;
                    btnEliminaErrore.Visible = false;
                }
            }
            else
                Redirect(PATH_PRIVATE + "welcome.aspx", "L'utente non dispone dei permessi necessari per visualizzare questa funzionalità", true);
        }

        private void PopolaErrore(ref Errore errore)
        {
            //Gestione domanda di pagamento
            var id_selezionati = ucGestioneLavori.IdDomandeSelezionate;
            int id_domanda;
            if (id_selezionati.Count == 0)
                throw new Exception("E' necessario associare una domanda di pagamento all'errore");
            else if (id_selezionati.Count == 1)
                id_domanda = id_selezionati[0];
            else
                throw new Exception("E' possibile associare solamente una domanda di pagamento all'errore");

            var domanda = new DomandaDiPagamentoCollectionProvider().GetById(id_domanda);
            if (domanda == null)
                throw new Exception("Domanda selezionata non esistente?");

            if (domanda.Segnatura == null || domanda.Segnatura == ""
                || domanda.SegnaturaApprovazione == null || domanda.SegnaturaApprovazione == "")
                throw new Exception("Domanda selezionata non valida");

            errore.IdDomandaPagamento = id_domanda;

            //Ricerca domanda in certificazione (solo se nuovo)
            if (errore.IdErrore == null)
            {
                errore.Certificato = false;
                errore.IdLottoCertificazione = null;
                errore.DataInizioCertificazione = null;
                errore.DataFineCertificazione = null;

                var cert_spesa_dett_list = new CertspDettaglioCollectionProvider()
                    .FindDefinitiviSelezionatiXProgetto(Progetto.IdProgetto)
                    .ToArrayList<CertspDettaglio>();
                if (cert_spesa_dett_list.Count > 0)
                {
                    var certificazione = cert_spesa_dett_list
                        .Where(c => c.IdDomandaPagamento == id_domanda)
                        .ToList<CertspDettaglio>();

                    if (certificazione.Count > 0)
                    {
                        var lotto = new CertspTestaCollectionProvider().GetById(certificazione[0].Idcertsp);
                        errore.Certificato = true;
                        errore.IdLottoCertificazione = lotto.Idcertsp;
                        errore.DataInizioCertificazione = lotto.Datainizio;
                        errore.DataFineCertificazione = lotto.Datafine;
                    }
                }
            }
            
            errore.ImpreseBeneficiari = cblBeneficiari.SelectedValue; 
            errore.SoggettoRilevazione = txtSoggettoRilevazione.Text;
            errore.DataRilevazione = txtDataRilevazione.Text;
            errore.SpesaAmmessaErrore = txtSpesaAmmessa.Text;
            errore.ContributoPubblicoErrore = txtContributoPubblico.Text;
            errore.ContributoAmmessoErroreDaRevocare = txtContributoAmmessoRevocare.Text;
            errore.Note = txtNote.Text;
            errore.DaRecuperare = chkDaRecuperare.Checked;
            errore.Recuperato = chkRecuperato.Checked;
            errore.AzioneCertificazione = lstAzione.SelectedValue;
            //if (txtIdLottoImpattato.Text != null)
            //    errore.IdLottoImpattato = int.Parse(txtIdLottoImpattato.Text);
            //else
            //    errore.IdLottoImpattato = null;
        }

        private void RiempiFormErroreAllegato()
        {
            ErroreAllegati allegato_selezionato = null;
            int id_errore_allegato;
            if (int.TryParse(hdnIdErroreAllegato.Value, out id_errore_allegato))
                allegato_selezionato = errore_allegati_provider.GetById(id_errore_allegato);

            if (allegato_selezionato != null)
            {
                if (allegato_selezionato.Protocollato != null && allegato_selezionato.Protocollato)
                {
                    rblAllegatoProtocollato.SelectedValue = "0";
                    txtSegnaturaAllegato.Text = allegato_selezionato.SegnaturaAllegato;
                    ufErroreAllegato.IdFile = null;
                }
                else
                {
                    rblAllegatoProtocollato.SelectedValue = "1";
                    txtSegnaturaAllegato.Text = null;
                    ufErroreAllegato.IdFile = allegato_selezionato.IdAllegato;
                }
            }
            else
            {
                rblAllegatoProtocollato.SelectedValue = "0";
                txtSegnaturaAllegato.Text = null;
                ufErroreAllegato.IdFile = null;

                btnEliminaErroreAllegato.Visible = false;
            }
        }

        private void PopolaErroreAllegato(ref ErroreAllegati allegato)
        {
            if (rblAllegatoProtocollato.SelectedValue == "0")
            {
                allegato.Protocollato = true;
                allegato.SegnaturaAllegato = txtSegnaturaAllegato.Text;
                allegato.IdAllegato = null;
            }
            else
            {
                allegato.Protocollato = false;
                allegato.SegnaturaAllegato = null;
                allegato.IdAllegato = ufErroreAllegato.IdFile;
            }
        }

        private void RiempiFormGiustificativi()
        {
            divGiustificativi.Visible = true;
            bool selezionatoAnticipo = false;
            RiepilogoDomandePagamentoCollection domande_pagamento_buone = new RiepilogoDomandePagamentoCollection();
            RiepilogoDomandePagamentoCollection domande_pagamento;
            PianoInvestimentiCollection investimenti = new PianoInvestimentiCollection();
            txtNoteGiustificativi.Text = Errore.NoteGiustificativi;
            domande_pagamento = riepilogo_provider.Find(Progetto.IdProgetto);
            int idDomandaPagamento;

            if (!int.TryParse(hdnIdDomandaPagamento.Value, out idDomandaPagamento))//TODO è qui che è da rompere tutto
            {
                foreach (RiepilogoDomandePagamento domanda in domande_pagamento)
                {
                    if (domanda.Annullata == false)
                        domande_pagamento_buone.Add(domanda);
                }
                lblGDomanda.Text = "Selezionare la domanda di pagamento";
                divInvestimenti.Style.Add("display", "none");
                divDgGiustificativi.Style.Add("display", "none");
            }
            else
            {
                divDgGiustificativi.Style.Add("display", "none");
                foreach (RiepilogoDomandePagamento domanda in domande_pagamento)
                {
                    if (domanda.IdDomandaPagamento == idDomandaPagamento)
                    {
                        domande_pagamento_buone.Add(domanda);
                        if (domanda.CodTipo == "ANT")
                        {
                            selezionatoAnticipo = true;
                            divAnticipoGiustificativi.Style.Remove("display");
                            divInvestimenti.Style.Add("display", "none");
                            lblContributoAmmessoAnticipo.Text = string.Format("{0:c}", domanda.ContributoAmmesso);
                            var pagamentiErrore = pagamentiErroreCollectionProvider.Find(null, null, idDomandaPagamento, null, null, null);
                            if (pagamentiErrore.Count != 0)
                                txtAnticipoErrore.Text = string.Format("{0:c}", pagamentiErrore[0].ImportoErroreConcesso);
                        }
                    }
                }
                lblGDomanda.Text = "Domanda di pagamento";
                if (!selezionatoAnticipo)
                    caricaInvestimenti(Progetto.IdProgetto, idDomandaPagamento);
            }
            dgGestioneLavori.DataSource = domande_pagamento_buone;
            dgGestioneLavori.DataBind();

            if (!string.IsNullOrEmpty(hdnIdInvestimento.Value) && !selezionatoAnticipo)
            {
                divDgGiustificativi.Style.Remove("display");


                VricercaSpeseIrregolariCollection spese_coll = new VricercaSpeseIrregolariCollection();
                PagamentiRichiesti prichiesto = null;
                PagamentiRichiestiCollection prichiesti = prichiesti_provider.Find(null, hdnIdInvestimento.Value, null, idDomandaPagamento);
                if (prichiesti.Count > 0)
                {
                    prichiesto = prichiesti[0];
                    spese_coll = ricerca_spese_provider.FindSpeseProgetto(null, null, null, null, prichiesto.IdPagamentoRichiesto);
                }

                if (spese_coll.Count > 0)
                {
                    lstRicercaModalitaPagamentoDomanda.Items.Add(new ListItem("", ""));
                    lstRicercaFornitoreGiustificativo.Items.Add(new ListItem("", ""));
                    lstRicercaSpesaErrore.Items.Add(new ListItem("Tutte", "Tutte"));
                    lstRicercaSpesaErrore.Items.Add(new ListItem("Sì", "Sì"));
                    lstRicercaSpesaErrore.Items.Add(new ListItem("No", "No"));
                    PagamentiBeneficiarioCollection pbeneficiario_attuali = new PagamentiBeneficiarioCollectionProvider().Find(prichiesto.IdPagamentoRichiesto, null, null, null, null, null);

                    dgRicercaSpeseErrori.DataSource = spese_coll;
                    dgRicercaSpeseErrori.ItemDataBound += new DataGridItemEventHandler(dgRicercaSpeseErrori_ItemDataBound);
                    dgRicercaSpeseErrori.DataBind();
                }
            }
            var pagamentiErrori = pagamentiErroreCollectionProvider.Select(null, null, null, null, null, Errore.IdErrore, null, null, null, Progetto.IdProgetto, null, null, null);
            decimal totaleErrore = 0;
            foreach (PagamentiErrore pErrore in pagamentiErrori)
                totaleErrore += pErrore.ImportoErroreConcesso;
            txtTotaleImportoErrori.Text = totaleErrore.ToString();
            if (totaleErrore == 0)
                divAlert.Visible = true;
        }

        private void caricaInvestimenti(int idProgetto, int idDomandaPagamento)
        {
            BandoTipoInvestimentiCollection tipo_investimenti;
            investimenti = investimenti_provider.GetPianoInvestimentiDomandaPagamento(idProgetto, idDomandaPagamento);
            prichiesti_provider = new PagamentiRichiestiCollectionProvider(investimenti_provider.DbProviderObj);
            pagamenti_richiesti = prichiesti_provider.Find(null, null, idProgetto, idDomandaPagamento);
            tipo_investimenti = new BandoTipoInvestimentiCollectionProvider().GetTipoInvestimentiProgetto(Progetto.IdBando, true);
            int idInvestimento;
            divInvestimenti.Style.Remove("display");
            PianoInvestimentiCollection inv_supp = new PianoInvestimentiCollection();
            //investimenti ordinari
            if (tipo_investimenti.FiltroCodiceTipo(1).Count > 0)
            {
                if (int.TryParse(hdnIdInvestimento.Value, out idInvestimento))
                {
                    foreach (PianoInvestimenti inv in investimenti)
                    {
                        if (inv.IdInvestimento == idInvestimento)
                            inv_supp.Add(inv);
                    }
                    lblGInvestimento.Text = "Investimento";
                }
                else
                {

                    lblGInvestimento.Text = "Selezionare la voce d'investimento";
                    inv_supp = investimenti.FiltroTipoInvestimento(1);
                }
                if (inv_supp.Count == 0) dgInvestimenti.Titolo = "Nessun elemento trovato.";
                else
                {
                    dgInvestimenti.ItemDataBound += new DataGridItemEventHandler(dgInvestimenti_ItemDataBound);
                    dgInvestimenti.MostraTotale("DataField", 4, 5, 6);
                }
                dgInvestimenti.DataSource = inv_supp;
                dgInvestimenti.DataBind();
            }
        }

        private void RiempiCampiGiustificativi(ref Errore errore)
        {
            errore.NoteGiustificativi = txtNoteGiustificativi.Text;
        }

        #region Button Click

        protected void btnSalvaErrore_Click(object sender, EventArgs e)
        {
            try
            {
                errore_provider = new ErroreCollectionProvider();
                InizializzaProvider(errore_provider.DbProviderObj);
                errore_provider.DbProviderObj.BeginTran();

                Errore errore;
                if (Errore == null)
                {
                    errore = new Errore();
                    errore.CfInserimento = Operatore.Utente.CfUtente;
                    errore.DataInserimento = DateTime.Now;
                    if (Progetto != null && Progetto.IdProgetto != null)
                        errore.IdProgetto = Progetto.IdProgetto;
                    else
                        throw new Exception("Progetto non selezionato");
                }
                else
                    errore = Errore;

                errore.CfModifica = Operatore.Utente.CfUtente;
                errore.DataModifica = DateTime.Now;

                PopolaErrore(ref errore);
                errore_provider.Save(errore);

                //Aggiorno Tabella Decertificazioni
                CertDecertificazione certDecertificazione = certDecertificazioneCollectionProvider.Find(null, null, null, errore.IdErrore, tipoDecertificazione.Errore.ToString(), null, null, null, null, null, null,null).ToArrayList<CertDecertificazione>().FirstOrDefault();
                if (certDecertificazione == null)
                    certDecertificazione = new CertDecertificazione();
                certDecertificazione.IdProgetto = errore.IdProgetto;
                certDecertificazione.IdDomandaPagamento = errore.IdDomandaPagamento;
                certDecertificazione.IdDecertificazione = errore.IdErrore;
                certDecertificazione.TipoDecertificazione = tipoDecertificazione.Errore.ToString();
                certDecertificazione.ImportoDecertificazioneAmmesso = errore.SpesaAmmessaErrore;
                certDecertificazione.ImportoDecertificazioneConcesso = errore.ContributoPubblicoErrore;
                certDecertificazione.DataConstatazioneAmministrativa = errore.DataRilevazione;
                certDecertificazioneCollectionProvider.Save(certDecertificazione);

                errore_provider.DbProviderObj.Commit();
                Errore = errore;
                ShowMessage("Errore salvato correttamente");
            }
            catch (Exception ex)
            {
                Errore = null;
                errore_provider.DbProviderObj.Rollback();
                ShowError(ex.Message);
            }
        }

        protected void btnEliminaErrore_Click(object sender, EventArgs e)
        {
            try
            {
                errore_provider = new ErroreCollectionProvider();
                InizializzaProvider(errore_provider.DbProviderObj);
                errore_provider.DbProviderObj.BeginTran();

                if (Errore != null && Errore.IdErrore != null)
                {
                    var allegati_coll = errore_allegati_provider.Find(null, Errore.IdErrore, null, null);
                    if (allegati_coll.Count > 0)
                        errore_allegati_provider.DeleteCollection(allegati_coll);

                    //elimino la decertificazione associata
                    var decert_col = certDecertificazioneCollectionProvider.Find(null, null, null, Errore.IdErrore, tipoDecertificazione.Errore.ToString(), null, null, null, null, null, null, null);
                    if (decert_col.Count != 0)
                        certDecertificazioneCollectionProvider.Delete(decert_col[0]);

                    errore_provider.Delete(Errore);

                    errore_provider.DbProviderObj.Commit();
                    Redirect(PATH_CONTROLLI + "RicercaErrori.aspx", "Errore eliminato correttamente", false);
                }
                else
                    throw new Exception("Errore non salvato");
            }
            catch (Exception ex)
            {
                errore_provider.DbProviderObj.Rollback();
                ShowError(ex.Message);
            }
        }

        protected void btnSelezionaErroreAllegato_Click(object sender, EventArgs e) { }

        protected void btnSalvaErroreAllegato_Click(object sender, EventArgs e)
        {
            try
            {
                errore_provider = new ErroreCollectionProvider();
                InizializzaProvider(errore_provider.DbProviderObj);
                errore_provider.DbProviderObj.BeginTran();

                if (Errore == null || Errore.IdErrore == null)
                    throw new Exception("E' necessario salvare l'errore prima di inserire gli allegati");

                ErroreAllegati allegato_selezionato = null;
                int id_errore_allegato;
                if (int.TryParse(hdnIdErroreAllegato.Value, out id_errore_allegato))
                {
                    allegato_selezionato = errore_allegati_provider.GetById(id_errore_allegato);
                }
                else
                {
                    allegato_selezionato = new ErroreAllegati();
                    allegato_selezionato.IdErrore = Errore.IdErrore;
                    allegato_selezionato.CfInserimento = Operatore.Utente.CfUtente;
                    allegato_selezionato.DataInserimento = DateTime.Now;
                }

                allegato_selezionato.CfModifica = Operatore.Utente.CfUtente;
                allegato_selezionato.DataModifica = DateTime.Now;

                PopolaErroreAllegato(ref allegato_selezionato);

                errore_allegati_provider.Save(allegato_selezionato);
                errore_provider.DbProviderObj.Commit();
                ShowMessage("Allegato salvato correttamente");
            }
            catch(Exception ex)
            {
                errore_provider.DbProviderObj.Rollback();
                ShowError(ex.Message);
            }
        }

        protected void btnEliminaErroreAllegato_Click(object sender, EventArgs e)
        {
            try
            {
                errore_provider = new ErroreCollectionProvider();
                InizializzaProvider(errore_provider.DbProviderObj);
                errore_provider.DbProviderObj.BeginTran();

                if (Errore == null || Errore.IdErrore == null)
                    throw new Exception("E' necessario salvare l'errore prima di inserire gli allegati");

                ErroreAllegati allegato_selezionato = null;
                int id_errore_allegato;
                if (int.TryParse(hdnIdErroreAllegato.Value, out id_errore_allegato))
                    allegato_selezionato = errore_allegati_provider.GetById(id_errore_allegato);
                else
                    throw new Exception("Nessun allegato selezionato");

                errore_allegati_provider.Delete(allegato_selezionato);
                errore_provider.DbProviderObj.Commit();
                ShowMessage("Allegato eliminato correttamente");
            }
            catch (Exception ex)
            {
                errore_provider.DbProviderObj.Rollback();
                ShowError(ex.Message);
            }
            finally
            {
                hdnIdErroreAllegato.Value = null;
            }
        }

        protected void btnVisualizzaRecupero_Click(object sender, EventArgs e)
        {
            try
            {
                RecuperoBeneficiarioCollectionProvider recuperoProvider = new RecuperoBeneficiarioCollectionProvider();
                int idRecupero;
                if (int.TryParse(hdnIdRecupero.Value, out idRecupero))
                {
                    var recupero = recuperoProvider.GetById(idRecupero);
                    Session["_recuperoBeneficiario"] = recupero;

                    Redirect(PATH_CONTROLLI + "RecuperoBeneficiario.aspx");
                }
                else
                    throw new Exception("Nessun recupero selezionato.");
            }
            catch (Exception ex)
            {
                ShowError(ex.Message);
            }
        }

        protected void btnCreaRecuperoDaErrore_Click(object sender, EventArgs e)
        {
            RecuperoBeneficiarioCollectionProvider recuperoProvider = new RecuperoBeneficiarioCollectionProvider();

            try
            {
                SiarLibrary.RecuperoBeneficiario recupero = new SiarLibrary.RecuperoBeneficiario();
                recupero.IdProgetto = Errore.IdProgetto;
                recupero.IdErrore = Errore.IdErrore;
                recupero.Definitivo = false;
                recupero.FlagImportoIrrecuperabile = false;

                recuperoProvider.DbProviderObj.Commit();
                Session["_recuperoBeneficiario"] = recupero;
                Redirect(PATH_CONTROLLI + "RecuperoBeneficiario.aspx", "Recupero associato all'errore creato con successo, si prega di completare le informazioni del recupero", false);
            }
            catch (Exception ex)
            {
                recuperoProvider.DbProviderObj.Rollback();
                ShowError(ex.Message);
            }
        }

        protected void btnPost_Click(object sender, EventArgs e) { }

        protected void btnSalvaGiustificativiErrori_Click(object sender, EventArgs e)
        {
            //if (!abilitatoModifiche())
            //{
            //    throw new Exception("Si deve essere il Rup del bando per poter salvare o modificare l'irregolarità");
            //}
            try
            {
                InizializzaProvider();

                if (Errore == null || Errore.IdErrore == null)
                    throw new Exception("Elemento non ancora salvato: è necessario salvare prima gli altri dati e successivamente specificare le spese con errori");

                //Salvo comunque le note dei giustificativi
                errore_provider = new ErroreCollectionProvider();
                Errore.NoteGiustificativi = txtNoteGiustificativi.Text;
                errore_provider.Save(Errore);

                pagamentiErroreCollectionProvider.DbProviderObj.BeginTran();

                string[] selezionati = ((CheckColumn)dgRicercaSpeseErrori.Columns[colRic_Irregolare]).GetSelected();

                if (selezionati.Length > 0)
                {
                    List<int> id_pagamenti_list = selezionati.Select(int.Parse).ToList();
                    var pagamenti_errore_new_coll = new PagamentiErroreCollection();

                    //Cerco le spese associate al progetto e le filtro per quelle selezionate
                    var ricerca_pagamenti_list = ricerca_spese_provider
                        .FindSpeseProgetto(Errore.IdProgetto, null, null, null, null)
                        .ToArrayList<VricercaSpeseIrregolari>();

                    ricerca_pagamenti_list = ricerca_pagamenti_list
                        .Where(s => id_pagamenti_list.Any(id => id == s.IdPagamentoBeneficiario))
                        .ToList<VricercaSpeseIrregolari>();


                    //Cancello i pagamenti irregolari precedentemente salvate
                    var pagamenti_errore_old_coll = pagamentiErroreCollectionProvider.Find(null, Errore.IdErrore, int.Parse(hdnIdDomandaPagamento.Value), int.Parse(hdnIdInvestimento.Value), null, null);
                    foreach (PagamentiErrore pagamenti_err in pagamenti_errore_old_coll)
                        pagamentiErroreCollectionProvider.Delete(pagamenti_err);

                    //Per ogni spesa selezionata creo il relativo record per la spesa irregolare
                    foreach (VricercaSpeseIrregolari ricerca in ricerca_pagamenti_list)
                    {
                        var pagamento_errore = new PagamentiErrore();
                        pagamento_errore.CfInserimento = pagamento_errore.CfModifica = Operatore.Utente.CfUtente;
                        pagamento_errore.DataInserimento = pagamento_errore.DataModifica = DateTime.Now;
                        pagamento_errore.IdErrore = Errore.IdErrore;
                        pagamento_errore.IdProgetto = Errore.IdProgetto;
                        pagamento_errore.IdGiustificativo = ricerca.IdGiustificativo;
                        string importo = Request.Form["ImportoErrore" + ricerca.IdPagamentoBeneficiario.ToString() + "_text"].Replace("€.", "").Replace("€", "");
                        decimal importo2 = Convert.ToDecimal(importo);
                        pagamento_errore.ImportoErroreAmmesso = Convert.ToDecimal(importo2);

                        //pagamento_errore.ImportoErroreConcesso = pagamento_errore.ImportoErroreAmmesso * ricerca.QuotaContributoRichiesto / 100;
                        pagamento_errore.ImportoErroreConcesso = Math.Round(pagamento_errore.ImportoErroreAmmesso * ricerca.QuotaContributoRichiesto, 2, MidpointRounding.AwayFromZero) / 100;
                        pagamento_errore.IdDomanda = int.Parse(hdnIdDomandaPagamento.Value);
                        pagamento_errore.IdInvestimento = int.Parse(hdnIdInvestimento.Value);
                        pagamento_errore.IdPagamentoBeneficiario = ricerca.IdPagamentoBeneficiario;
                        if (!(pagamento_errore.ImportoErroreAmmesso == null || pagamento_errore.ImportoErroreAmmesso == 0.00))
                            pagamenti_errore_new_coll.Add(pagamento_errore);
                    }
                    pagamentiErroreCollectionProvider.SaveCollection(pagamenti_errore_new_coll);
                    //spesa_irregolare_provider.SaveCollection(spese_irregolari_new_coll);
                    pagamentiErroreCollectionProvider.DbProviderObj.Commit();
                    ShowMessage("Spese con errori salvate correttamente");
                }
                else
                {
                    //Cancello i pagamenti irregolari precedentemente salvate
                    var pagamenti_errori_old_coll = pagamentiErroreCollectionProvider.Find(null, Errore.IdErrore, int.Parse(hdnIdDomandaPagamento.Value), int.Parse(hdnIdInvestimento.Value), null, null);
                    foreach (PagamentiErrore pagamenti_err in pagamenti_errori_old_coll)
                        pagamentiErroreCollectionProvider.Delete(pagamenti_err);
                    pagamentiErroreCollectionProvider.DbProviderObj.Commit();
                    ShowMessage("Nessuna giustificativo associato");
                }
            }
            catch (Exception ex)
            {
                pagamentiErroreCollectionProvider.DbProviderObj.Rollback();
                ShowError(ex);
            }
        }

        protected void btnResetGiustificativi_Click(object sender, EventArgs e)
        {
            //if (!abilitatoModifiche())
            //{
            //    throw new Exception("Non si hanno i permessi per poter salvare o modificare l'irregolarità");
            //}
            try
            {
                InizializzaProvider();
                pagamentiErroreCollectionProvider.DbProviderObj.BeginTran();
                var pagamenti_errore = pagamentiErroreCollectionProvider.Select(null, null, null, null, null, Errore.IdErrore, null, null, null, Progetto.IdProgetto, null, null, null);
                pagamentiErroreCollectionProvider.DeleteCollection(pagamenti_errore);
                pagamentiErroreCollectionProvider.DbProviderObj.Commit();

            }
            catch (Exception ex)
            {
                pagamentiErroreCollectionProvider.DbProviderObj.Rollback();
                ShowError(ex);
            }
        }

        protected void btnDecurtaMassivo_Click(object sender, EventArgs e)
        {
            decimal percentualeDecurtamento;
            if (!decimal.TryParse(txtPercentuale.Text, out percentualeDecurtamento))
                throw new Exception("Inserire una percentuale valida");
            if (percentualeDecurtamento <= 0 || percentualeDecurtamento > 100)
                throw new Exception("Inserire una percentuale valida");
            if (lstDecurtaMassivo.SelectedValue == null)
                ShowError("Selezionare cosa decurtare");
            else if (lstDecurtaMassivo.SelectedValue.Equals("progetto"))
            {
                var domandePagamento = new DomandaDiPagamentoCollectionProvider().Find(null, null, Progetto.IdProgetto, null);
                foreach (DomandaDiPagamento d in domandePagamento)
                    if (!(d.Annullata == null || d.Annullata == true))
                        decurtaPercentualeMassivo(d.IdDomandaPagamento, percentualeDecurtamento);
            }
            else
                decurtaPercentualeMassivo(int.Parse(lstDecurtaMassivo.SelectedValue), percentualeDecurtamento);
        }

        private void decurtaPercentualeMassivo(int idDomandaPagamento, decimal percentuale)
        {
            //if (!abilitatoModifiche())
            //{
            //    throw new Exception("Non si hanno i permessi per poter salvare o modificare l'irregolarità");
            //}
            try
            {
                InizializzaProvider();
                pagamentiErroreCollectionProvider.DbProviderObj.BeginTran();
                var domanda = riepilogo_provider.Find(Progetto.IdProgetto, idDomandaPagamento)[0];
                if (domanda.CodTipo == "ANT")
                {
                    PagamentiErrore pagamentoErroreAnticipo;
                    var pagamentiErroreAnticipo = pagamentiErroreCollectionProvider.Find(null, null, idDomandaPagamento, null, null, null);
                    if (pagamentiErroreAnticipo.Count == 0)
                    {
                        pagamentoErroreAnticipo = new PagamentiErrore();
                        pagamentoErroreAnticipo.CfInserimento = Operatore.Utente.CfUtente;
                        pagamentoErroreAnticipo.DataInserimento = DateTime.Now;
                    }
                    else
                        pagamentoErroreAnticipo = pagamentiErroreAnticipo[0];

                    pagamentoErroreAnticipo.CfModifica = Operatore.Utente.CfUtente;
                    pagamentoErroreAnticipo.DataModifica = DateTime.Now;
                    pagamentoErroreAnticipo.IdErrore = Errore.IdErrore;
                    pagamentoErroreAnticipo.IdDomanda = idDomandaPagamento;
                    pagamentoErroreAnticipo.IdProgetto = Progetto.IdProgetto;
                    pagamentoErroreAnticipo.ImportoErroreAmmesso = 0;
                    pagamentoErroreAnticipo.ImportoErroreConcesso = domanda.ContributoAmmesso * percentuale / 100;
                    pagamentiErroreCollectionProvider.Save(pagamentoErroreAnticipo);
                }
                else
                {
                    var pagamenti_list = ricerca_spese_provider.FindSpeseProgetto(null, idDomandaPagamento, null, null, null);
                    PagamentiRichiestiCollection prichiesti = prichiesti_provider.Find(null, null, null, idDomandaPagamento);

                    if (pagamenti_list.Count > 0)
                    {
                        //cancello i vecchi giustificativi associati a tutta la domanda
                        var pagamenti_errori_old = pagamentiErroreCollectionProvider.Find(null, null, idDomandaPagamento, null, null, null);
                        pagamentiErroreCollectionProvider.DeleteCollection(pagamenti_errori_old);

                        //salva giustificativi
                        var pagamenti_errori_new = new PagamentiErroreCollection();
                        foreach (VricercaSpeseIrregolari ricerca in pagamenti_list)
                        {
                            if (ricerca.ImportoAmmesso != null)
                            {
                                var pagamento_richiesto = new PagamentiRichiestiCollectionProvider().Find(ricerca.IdPagamentoRichiesto, null, null, null)[0];
                                var pagamento_errore = new PagamentiErrore();
                                pagamento_errore.CfInserimento = pagamento_errore.CfModifica = Operatore.Utente.CfUtente;
                                pagamento_errore.DataInserimento = pagamento_errore.DataModifica = DateTime.Now;
                                pagamento_errore.IdErrore = Errore.IdErrore;
                                pagamento_errore.IdProgetto = Errore.IdProgetto;
                                pagamento_errore.IdGiustificativo = ricerca.IdGiustificativo;
                                pagamento_errore.ImportoErroreAmmesso = ricerca.ImportoAmmesso * percentuale / 100;
                                pagamento_errore.ImportoErroreConcesso = pagamento_errore.ImportoErroreAmmesso * ricerca.QuotaContributoRichiesto / 100;
                                pagamento_errore.IdDomanda = ricerca.IdDomandaPagamento;
                                pagamento_errore.IdInvestimento = pagamento_richiesto.IdInvestimento;
                                pagamento_errore.IdPagamentoBeneficiario = ricerca.IdPagamentoBeneficiario;
                                if (!(pagamento_errore.ImportoErroreAmmesso == null || pagamento_errore.ImportoErroreAmmesso == 0.00))
                                    pagamenti_errori_new.Add(pagamento_errore);
                            }
                        }
                        pagamentiErroreCollectionProvider.SaveCollection(pagamenti_errori_new);
                        ShowMessage("Spese con errori salvate correttamente");
                    }
                }
                pagamentiErroreCollectionProvider.DbProviderObj.Commit();
            }
            catch (Exception ex)
            {
                pagamentiErroreCollectionProvider.DbProviderObj.Rollback();
                ShowError(ex);
            }
        }

        protected void btnDecurtaAnticipo_Click(object sender, EventArgs e)
        {
            //if (!abilitatoModifiche())
            //{
            //    throw new Exception("Si deve essere il Rup del bando per poter salvare o modificare l'irregolarità");
            //}
            try
            {
                pagamentiErroreCollectionProvider = new PagamentiErroreCollectionProvider();
                decimal importoAnticipoErrore;
                if (!decimal.TryParse(txtAnticipoErrore.Text.Replace("€", ""), out importoAnticipoErrore))
                    throw new Exception("Inserire un valore corretto");
                if (importoAnticipoErrore < 0)
                    throw new Exception("Inserire una percentuale valida");


                pagamentiErroreCollectionProvider.DbProviderObj.BeginTran();
                int idDomandaPagamento = int.Parse(hdnIdDomandaPagamento.Value);
                PagamentiErrore pagamentoErroreAnticipo;
                var pagamentiErroreAnticipo = pagamentiErroreCollectionProvider.Find(null, null, idDomandaPagamento, null, null, null);

                if (importoAnticipoErrore == 0 && pagamentiErroreAnticipo.Count != 0)
                    pagamentiErroreCollectionProvider.Delete(pagamentiErroreAnticipo[0]);
                else
                {
                    if (importoAnticipoErrore != 0)
                    {
                        if (pagamentiErroreAnticipo.Count == 0)
                        {
                            pagamentoErroreAnticipo = new PagamentiErrore();
                            pagamentoErroreAnticipo.CfInserimento = Operatore.Utente.CfUtente;
                            pagamentoErroreAnticipo.DataInserimento = DateTime.Now;
                        }
                        else
                            pagamentoErroreAnticipo = pagamentiErroreAnticipo[0];
                        //aggiorno i dati
                        pagamentoErroreAnticipo.CfModifica = Operatore.Utente.CfUtente;
                        pagamentoErroreAnticipo.DataModifica = DateTime.Now;
                        pagamentoErroreAnticipo.IdErrore = Errore.IdErrore;
                        pagamentoErroreAnticipo.IdDomanda = idDomandaPagamento;
                        pagamentoErroreAnticipo.IdProgetto = Progetto.IdProgetto;

                        riepilogo_provider = new RiepilogoDomandePagamentoCollectionProvider();
                        var domanda = riepilogo_provider.Find(Progetto.IdProgetto, idDomandaPagamento)[0];

                        if (importoAnticipoErrore > domanda.ContributoAmmesso)
                            throw new Exception("Importo maggiore del contributo concesso");

                        pagamentoErroreAnticipo.ImportoErroreAmmesso = 0;
                        pagamentoErroreAnticipo.ImportoErroreConcesso = importoAnticipoErrore;
                        pagamentiErroreCollectionProvider.Save(pagamentoErroreAnticipo);
                    }
                }
                pagamentiErroreCollectionProvider.DbProviderObj.Commit();
                ShowMessage("Anticipo salvato con successo");
            }
            catch (Exception ex)
            {
                pagamentiErroreCollectionProvider.DbProviderObj.Rollback();
                ShowError(ex);
            }

        }

        #endregion

        #region ItemDataBound

        void dgErroriAllegati_ItemDataBound(object sender, DataGridItemEventArgs e)
        {
            int col_IdErroreAllegati = 0,
                col_Protocollato = 1,
                col_InfoAllegato = 2,
                col_VisualizzaAllegato = 3;

            DataGridItem dgi = (DataGridItem)e.Item;

            if (dgi.ItemType == ListItemType.Item || dgi.ItemType == ListItemType.AlternatingItem)
            {
                var err = (ErroreAllegati)dgi.DataItem;

                if (err.Protocollato != null && err.Protocollato)
                {
                    dgi.Cells[col_InfoAllegato].Text = @"Segnatura: <b>" + err.SegnaturaAllegato + "</b><br/>";

                    dgi.Cells[col_VisualizzaAllegato].Text = "<img src='" + PATH_IMAGES + "print_ico.gif' alt='Allegato'  onclick=\"sncAjaxCallVisualizzaProtocollo('" + err.SegnaturaAllegato + "');\" style='cursor: pointer;'>";
                }
                else
                { 
                    dgi.Cells[col_InfoAllegato].Text = @"Nome file: <b>" + err.NomeFile + "</b><br/>";

                    dgi.Cells[col_VisualizzaAllegato].Text = "<img src='" + PATH_IMAGES + "print_ico.gif' alt='Allegato'  onclick=\"SNCUFVisualizzaFile(" + err.IdAllegato + ",this);\" style='cursor: pointer;'>";
                }
            }
        }

        void dgRecuperi_ItemDataBound(object sender, DataGridItemEventArgs e)
        {
            DataGridItem dgi = (DataGridItem)e.Item;
            if (dgi.ItemType == ListItemType.Item || dgi.ItemType == ListItemType.AlternatingItem)
            {
                var recupero = (SiarLibrary.RecuperoBeneficiario)e.Item.DataItem;
                if (recupero.Definitivo != null)
                    if (recupero.Definitivo)
                        dgi.Cells[3].Text = dgi.Cells[3].Text.Replace("<input", "<input checked");
                    else
                        dgi.Cells[3].Text = dgi.Cells[3].Text.Replace("checked", "");
            }
        }

        void dgRicercaSpeseErrori_ItemDataBound(object sender, DataGridItemEventArgs e)
        {
            DataGridItem dgi = (DataGridItem)e.Item;

            if (dgi.ItemType == ListItemType.Item || dgi.ItemType == ListItemType.AlternatingItem)
            {
                var spesa = (VricercaSpeseIrregolari)e.Item.DataItem;

                dgi.Cells[4].Text = string.Format("{0:c}", spesa.IvaGiustificativo);
                dgi.Cells[5].Text = string.Format("{0:c}", spesa.ImportoRichiesto);
                dgi.Cells[6].Text = string.Format("{0:c}", spesa.ImportoAmmesso);
                dgi.Cells[7].Text = string.Format("{0:c}", spesa.ContributoAmmesso);
                if (spesa.IdLottoCertificazione != null)
                    dgi.Cells[colRic_LottoCert].Text =
                        @"Id lotto: <b>" + spesa.IdLottoCertificazione + "</b><br/>" +
                        "Data inizio: <b>" + spesa.DataInizioLottoCertificazione + "</b><br/>" +
                        "Data fine: <b>" + spesa.DataFineLottoCertificazione + "</b>";
                else
                    dgi.Cells[colRic_LottoCert].Text = "La domanda di pagamento<br/> non risulta in nessuna <br/>certificazione definitiva.";

                if (spesa.IdDomandaPagamento != null)
                {
                    dgi.Cells[colRic_DomandaPagamento].Text =
                        @"Id domanda: <b>" + spesa.IdDomandaPagamento + "</b><br/>" +
                        "Modalità di pagamento: <b>" + spesa.TipoDomanda + "</b>";

                    var statoAttuale = new ListItem(spesa.TipoDomanda, spesa.TipoDomanda);
                    if (!lstRicercaModalitaPagamentoDomanda.Items.Contains(statoAttuale))
                        lstRicercaModalitaPagamentoDomanda.Items.Add(statoAttuale);
                }
                else
                    dgi.Cells[colRic_DomandaPagamento].Text = "Errore: domanda non trovata";

                if (spesa.IdGiustificativo != null)
                {
                    string fornitore = "";
                    if (spesa.CfFornitoreGiustificativo != null)
                    {
                        var fornitoreAttuale = new ListItem(spesa.CfFornitoreGiustificativo + " - " + spesa.DescrizioneFornitoreGiustificativo, spesa.CfFornitoreGiustificativo);
                        if (!lstRicercaFornitoreGiustificativo.Items.Contains(fornitoreAttuale))
                            lstRicercaFornitoreGiustificativo.Items.Add(fornitoreAttuale);

                        fornitore = ", Fornitore: <b>" + spesa.CfFornitoreGiustificativo + " - " + spesa.DescrizioneFornitoreGiustificativo + "</b>";
                    }

                    dgi.Cells[colRic_Giustificativo].Text =
                        @"Id giustificativo: <b>" + spesa.IdGiustificativo + "</b>, Numero: <b>" + spesa.NumeroGiustificativo + "</b>, " +
                        "Data: <b>" + spesa.DataGiustificativo + "</b><br/>" +
                        "Tipo: <b>" + spesa.TipoGiustificativo + "</b>, " +
                        "Importo netto: <b>" + string.Format("{0:c}", spesa.ImponibileGiustificativo) + "</b><br/>" +
                        "Oggetto: <b>" + spesa.DescrizioneGiustificativo + "</b>" + fornitore;
                }
                else
                    dgi.Cells[colRic_Giustificativo].Text = "Errore: giustificativo non trovato";

                if (spesa.IdPagamentoBeneficiario != null)
                {
                    dgi.Cells[colRic_Spesa].Text =
                        @"<span id='DatiSpesa" + spesa.IdPagamentoBeneficiario + "'>" +
                            "Id spesa: <b>" + spesa.IdSpesa + "</b>, Tipo: <b>" + spesa.TipoSpesa + "</b>, " +
                            "Data: <b>" + spesa.DataSpesa + "</b><br/>" +
                            "Estremi: <b>" + spesa.EstremiSpesa + "</b><br/>" +
                            "Importo lordo: <b>" + string.Format("{0:c}", spesa.ImportoSpesa) + "</b>, " +
                            "Importo netto: <b>" + string.Format("{0:c}", spesa.ImportoAmmesso) + "</b>" +
                        "</span>";

                    int? id_errore = null;
                    if (Errore != null && Errore.IdErrore != null)
                    {
                        id_errore = Errore.IdErrore;
                        var pagamento_err_coll = pagamentiErroreCollectionProvider.Find(null, id_errore, null, null, null, spesa.IdPagamentoBeneficiario);


                        if (pagamento_err_coll.Count > 0)
                        {
                            var spesa_errore = pagamento_err_coll[0];
                            dgi.Cells[colRic_Irregolare].Text = dgi.Cells[colRic_Irregolare].Text.Replace("<input", "<input checked");
                            dgi.Cells[colRic_ImportoIrregolare].Text = "<span class=\"CurrencyBox\" id=\"ImportoErrore" + spesa.IdPagamentoBeneficiario + "\"><input name=\"ImportoErrore" + spesa.IdPagamentoBeneficiario + "_text\" id=\"ImportoErrore" + spesa.IdPagamentoBeneficiario + "_text\" style=\"width: 100px; text-align: right;\" type=\"text\" value=\"" + spesa_errore.ImportoErroreAmmesso + "\"></span>";
                            dgi.Cells[colRic_IdSpesaIrregolare].Text = spesa_errore.IdPagamentoErrore;
                            dgi.Cells[colRic_ContributoIrregolare].Text = "<b>" + spesa_errore.ImportoErroreConcesso.ToString() + " €</b>";
                        }
                        else
                        {
                            dgi.Cells[colRic_Irregolare].Text = dgi.Cells[colRic_Irregolare].Text.Replace("checked", "");
                            dgi.Cells[colRic_ImportoIrregolare].Text = "<span class=\"CurrencyBox\" id=\"ImportoErrore" + spesa.IdPagamentoBeneficiario + "\"><input name=\"ImportoErrore" + spesa.IdPagamentoBeneficiario + "_text\" id=\"ImportoErrore" + spesa.IdPagamentoBeneficiario + "_text\" style=\"width: 100px; text-align: right;\" type=\"text\" value=\"0,00\"></span>";
                        }
                    }
                    else
                    {
                        dgi.Cells[colRic_Irregolare].Text = dgi.Cells[colRic_Irregolare].Text.Replace("checked", "");
                        dgi.Cells[colRic_ImportoIrregolare].Text = "<span class=\"CurrencyBox\" id=\"ImportoErrore" + spesa.IdPagamentoBeneficiario + "\"><input name=\"ImportoErrore" + spesa.IdPagamentoBeneficiario + "_text\" id=\"ImportoErrore" + spesa.IdPagamentoBeneficiario + "_text\" style=\"width: 100px; text-align: right;\" type=\"text\" value=\"0,00\"></span>";
                    }
                }
                else
                {
                    dgi.Cells[colRic_Irregolare].Text = dgi.Cells[colRic_Irregolare].Text.Replace("checked", "");
                    dgi.Cells[colRic_ImportoIrregolare].Text = "<span class=\"CurrencyBox\" id=\"ImportoErrore" + spesa.IdPagamentoBeneficiario + "\"><input name=\"ImportoErrore" + spesa.IdPagamentoBeneficiario + "_text\" id=\"ImportoErrore" + spesa.IdPagamentoBeneficiario + "_text\" style=\"width: 100px; text-align: right;\" type=\"text\" value=\"0,00\"></span>";
                }
            }
        }

        decimal costo_investimenti = 0, contributo_investimenti = 0, pag_inv_costo_richiesto = 0, pag_inv_contributo_richiesto = 0,
            pag_inv_contributo_ammesso = 0, pag_inv_importo_ammesso = 0, pag_inv_disavanzo_assengato = 0, pag_inv_disavanzo_totale = 0, pag_inv_disavanzo_totale_contributo = 0;

        void dgInvestimenti_ItemDataBound(object sender, DataGridItemEventArgs e)
        {
            DataGridItem dgi = (DataGridItem)e.Item;

            if (dgi.ItemType == ListItemType.Item || dgi.ItemType == ListItemType.AlternatingItem)
            {
                PianoInvestimenti f = (PianoInvestimenti)dgi.DataItem;
                if (f.IdPrioritaSettoriale != null) dgi.Cells[0].Text = "<img src='" + Request.ApplicationPath + "/images/star_red.gif'><br /><br />" + dgi.Cells[0].Text;
                dgi.Cells[2].Text = "<b>Codifica:</b> " + f.CodificaInvestimento + "<br /><b>Dettaglio:</b> " + f.DettaglioInvestimenti
                    + "<br /><b>Descrizione:</b> " + f.Descrizione;
                //Aggregazione
                string[] Aggregazione = new string[2];
                Aggregazione = investimenti_provider.GetImpresaAggregazioneInvestimento(f.IdInvestimento);
                if (Aggregazione[0] != null && Aggregazione[1] != null && Aggregazione[0] != "" && Aggregazione[1] != "")
                {
                    dgi.Cells[2].Text += "<br /><b>Impresa: </b>" + Aggregazione[0] + " - " + Aggregazione[1];
                    SiarLibrary.Impresa impresa = new SiarBLL.ImpresaCollectionProvider().GetByCuaa(Aggregazione[0]);
                    if (impresa.CodAteco2007 != null && impresa.CodAteco2007 != "")
                        dgi.Cells[2].Text += " - Ateco: " + impresa.CodAteco2007;
                }

                //Personalizzazione bando 6.2
                if (Progetto.IdBando == 39)
                {
                    string linea_intervento = "";
                    linea_intervento = investimenti_provider.GetLineaInterventoInvestimento(f.IdInvestimento);
                    if (linea_intervento != null && linea_intervento != "")
                        dgi.Cells[2].Text += "<br /><b>" + linea_intervento + "</b>";
                }

                if (f.NonCofinanziato) e.Item.Cells[5].Text = "(*)";
                decimal importo_pagamento_richiesti, quota_completamento = 0, quota_completamento_ammesso = 0, costo_investimento = f.CostoInvestimento.Value + (f.SpeseGenerali ?? 0), spese_ammesse = 0;

                // importo_pagamento_richiesti rappresenta il totale dei pagamenti già richiesti
                decimal.TryParse(f.AdditionalAttributes["ImportoPagamentoRichiesto"], out importo_pagamento_richiesti);
                PagamentiRichiestiCollection pagamenti = pagamenti_richiesti.FiltroInvestimento(f.IdInvestimento);
                if (pagamenti.Count > 0)
                {
                    // devo aggiungere il pagamento richiesto attuale non contato dalla query
                    importo_pagamento_richiesti += pagamenti[0].ImportoRichiesto;
                    pag_inv_costo_richiesto += pagamenti[0].ImportoRichiesto;
                    pag_inv_contributo_richiesto += pagamenti[0].ContributoRichiesto;
                    dgi.Cells[7].Text = string.Format("{0:c}", pagamenti[0].ImportoRichiesto);
                    dgi.Cells[8].Text = string.Format("{0:c}", pagamenti[0].ContributoRichiesto);
                    dgi.Cells[9].Text = string.Format("{0:c}", pagamenti[0].ImportoAmmesso);

                    // VERIFICARE SE DEVE ESSERE DIVERSO DA NULL???
                    if (pagamenti[0].ImportoAmmesso != null)
                        pag_inv_importo_ammesso += pagamenti[0].ImportoAmmesso;
                    if (pagamenti[0].ContributoAmmesso != null)
                    {
                        dgi.Cells[10].Text = string.Format("{0:c}", pagamenti[0].ContributoAmmesso);
                        pag_inv_contributo_ammesso += pagamenti[0].ContributoAmmesso;
                    }
                    if (pagamenti[0].ContributoDisavanzoCostiAmmessi != null)
                    {
                        dgi.Cells[14].Text = string.Format("{0:c}", pagamenti[0].ContributoDisavanzoCostiAmmessi);
                        pag_inv_disavanzo_assengato += pagamenti[0].ContributoDisavanzoCostiAmmessi;
                    }
                    else
                        dgi.Cells[14].Text = "0,00";
                }
                else
                    dgi.Cells[14].Text = "0,00";
                if (costo_investimento > 0 && pagamenti.Count > 0)
                {
                    quota_completamento = Math.Round(100 * importo_pagamento_richiesti / costo_investimento, 12, MidpointRounding.AwayFromZero);
                    decimal importoAmmessoInvestimento = 0;
                    if (pagamenti[0].ImportoAmmesso != null)
                        importoAmmessoInvestimento = pagamenti[0].ImportoAmmesso;
                    quota_completamento_ammesso = Math.Round(100 * (importoAmmessoInvestimento + (importo_pagamento_richiesti - pagamenti[0].ImportoRichiesto)) / costo_investimento, 12, MidpointRounding.AwayFromZero);
                    spese_ammesse = importoAmmessoInvestimento + (importo_pagamento_richiesti - pagamenti[0].ImportoRichiesto);
                }
                costo_investimenti += costo_investimento;
                contributo_investimenti += f.ContributoRichiesto;
                dgi.Cells[4].Text = string.Format("{0:c}", costo_investimento);
                dgi.Cells[11].Text = string.Format("{0:N12}", quota_completamento);
                dgi.Cells[16].Text = string.Format("{0:N12}", quota_completamento_ammesso);

                // importo pagamenti richiesti sarebbe il totale dei pagamenti richiesti finora, compreso il corrente, per l'investimento
                // se questo valore è maggiore del costo dell'investimento significa che ho un disavanzo e posso andarlo a spalmare su 
                // altri investimenti. Quindi lo mostro in griglia
                if (spese_ammesse > costo_investimento)
                {
                    decimal disavanzo = 0;
                    decimal disavanzo_contributo = 0;
                    // se il disavanzo è minore del 110% vuol dire che è nella soglia del 10% quindi lo calcolo come differenza
                    if (quota_completamento_ammesso <= 110)
                        disavanzo = spese_ammesse - costo_investimento;
                    // altrimenti lo calcolo come massimo 10% del costo dell'investimento
                    else
                        disavanzo = costo_investimento * 10 / 100;

                    disavanzo_contributo = disavanzo * f.QuotaContributoRichiesto / 100;

                    dgi.Cells[12].Text = string.Format("{0:c}", disavanzo);
                    dgi.Cells[12].ForeColor = System.Drawing.Color.Green;
                    dgi.Cells[13].Text = string.Format("{0:c}", disavanzo_contributo);
                    dgi.Cells[13].ForeColor = System.Drawing.Color.Green;
                    // questa è la somma totale dei disavanzi che così calcolata rientra sempre nel 10% del totale
                    decimal contributoDisavanzoCostiAmmessi = 0;
                    if (pagamenti[0].ContributoDisavanzoCostiAmmessi != null)
                        decimal.TryParse(pagamenti[0].ContributoDisavanzoCostiAmmessi, out contributoDisavanzoCostiAmmessi);
                    dgi.Cells[15].Text = string.Format("{0:c}", disavanzo_contributo - contributoDisavanzoCostiAmmessi);
                    dgi.Cells[15].ForeColor = System.Drawing.Color.Green;

                    pag_inv_disavanzo_totale += disavanzo;
                    pag_inv_disavanzo_totale_contributo += disavanzo_contributo;

                }
                else if (spese_ammesse < costo_investimento)
                {
                    decimal disavanzo = 0;
                    decimal disavanzo_contributo = 0;
                    // se il disavanzo è minore del 110% vuol dire che è nella soglia del 10% quindi lo calcolo come differenza
                    if (quota_completamento_ammesso >= 90)
                        disavanzo = -(costo_investimento - spese_ammesse);
                    // altrimenti lo calcolo come massimo 10% del costo dell'investimento
                    else
                        disavanzo = -costo_investimento * 10 / 100;

                    disavanzo_contributo = disavanzo * f.QuotaContributoRichiesto / 100;

                    dgi.Cells[12].Text = string.Format("{0:c}", disavanzo);
                    dgi.Cells[12].ForeColor = System.Drawing.Color.Red;
                    dgi.Cells[13].Text = string.Format("{0:c}", disavanzo_contributo);
                    dgi.Cells[13].ForeColor = System.Drawing.Color.Red;
                    // questa è la somma totale dei disavanzi che così calcolata rientra sempre nel 10% del totale
                    decimal contributoDisavanzoCostiAmmessi = 0;
                    if (pagamenti.Count > 0 && pagamenti[0].ContributoDisavanzoCostiAmmessi != null)
                        decimal.TryParse(pagamenti[0].ContributoDisavanzoCostiAmmessi, out contributoDisavanzoCostiAmmessi);
                    dgi.Cells[15].Text = string.Format("{0:c}", disavanzo_contributo + contributoDisavanzoCostiAmmessi);
                    dgi.Cells[15].ForeColor = System.Drawing.Color.Red;

                    pag_inv_disavanzo_totale += disavanzo;
                    pag_inv_disavanzo_totale_contributo += disavanzo_contributo;
                }
                else
                {
                    dgi.Cells[12].Text = string.Format("{0:c}", 0);
                    dgi.Cells[13].Text = string.Format("{0:c}", 0);
                }
                if (dgi.Cells[2].Text.Length > 250)
                    dgi.Cells[2].Text = dgi.Cells[2].Text.Substring(0, 250);
                //Controllo che all'interno ci siano giustificativi già salvati
                PagamentiErroreCollection pagamentiErroreCollection = new PagamentiErroreCollectionProvider().Find(null, Errore.IdErrore, hdnIdDomandaPagamento.Value, f.IdInvestimento, null, null);
                if (pagamentiErroreCollection.Count != 0)
                    e.Item.BackColor = System.Drawing.Color.FromArgb(253, 190, 80);
            }
            else if (dgi.ItemType == ListItemType.Footer)
            {
                decimal quota = 0;
                if (costo_investimenti > 0) quota = 100 * contributo_investimenti / costo_investimenti;

                SiarLibrary.NullTypes.DecimalNT contributo_calcolato = investimenti_provider.
                    CalcoloContributoInvestimentiProgetto(Progetto.IdProgetto, true, investimenti[0].IdVariante);
                if (contributo_calcolato != null && contributo_calcolato < contributo_investimenti)
                    dgi.Cells[5].Text = "** " + String.Format("{0:c}", contributo_calcolato.Value);
                else dgi.Cells[5].Text = string.Format("{0:c}", contributo_investimenti);

                //controllo se il progetto ha un massimale di contributo, e al massimale le altre domande di pagamento gia istruite
                if (contributo_calcolato != null && contributo_calcolato < contributo_investimenti)
                {
                    //calcolo il contributo gia erogato nelle precedenti domande di pagamento 
                    decimal contributo_erogato = 0;
                    DomandaDiPagamentoEsportazioneCollectionProvider dom_pag_esp = new DomandaDiPagamentoEsportazioneCollectionProvider();
                    DomandaDiPagamentoCollection dom_coll = new DomandaDiPagamentoCollectionProvider().Find(null, null, Progetto.IdProgetto, null);
                    DomandaDiPagamento domandaPagamento = new DomandaDiPagamentoCollectionProvider().GetById(int.Parse(hdnIdDomandaPagamento.Value));
                    foreach (DomandaDiPagamento dp in dom_coll)
                    {
                        if (dp.IdDomandaPagamento < domandaPagamento.IdDomandaPagamento &&
                            dp.Approvata == true && dp.SegnaturaApprovazione != null && dp.SegnaturaApprovazione != "")
                        {
                            DomandaDiPagamentoEsportazione esp_coll = dom_pag_esp.GetById(dp.IdDomandaPagamento, Progetto.IdProgetto);
                            contributo_erogato += esp_coll.ImportoAmmesso;
                        }
                    }
                    decimal contributo_rimanenza = contributo_calcolato - contributo_erogato;
                    if (contributo_rimanenza < pag_inv_contributo_richiesto)
                        dgi.Cells[8].Text = "** " + String.Format("{0:c}", contributo_rimanenza);
                    else
                        dgi.Cells[8].Text = String.Format("{0:c}", pag_inv_contributo_richiesto);


                    if (contributo_rimanenza < (pag_inv_contributo_ammesso + pag_inv_disavanzo_assengato))
                    {
                        if (contributo_rimanenza < pag_inv_contributo_ammesso)
                        {
                            dgi.Cells[10].Text = "** " + String.Format("{0:c}", contributo_rimanenza);
                            if (pag_inv_disavanzo_assengato > 0)
                                dgi.Cells[14].Text = "** " + string.Format("{0:c}", 0);
                            else
                                dgi.Cells[14].Text = string.Format("{0:c}", pag_inv_disavanzo_assengato);
                        }
                        else
                        {
                            dgi.Cells[10].Text = String.Format("{0:c}", pag_inv_contributo_ammesso);
                            if (contributo_rimanenza - pag_inv_contributo_ammesso < pag_inv_disavanzo_assengato)
                                dgi.Cells[14].Text = "** " + string.Format("{0:c}", contributo_rimanenza - pag_inv_contributo_ammesso);
                            else
                                dgi.Cells[14].Text = string.Format("{0:c}", pag_inv_disavanzo_assengato);
                        }


                    }
                    else
                    {
                        dgi.Cells[10].Text = String.Format("{0:c}", pag_inv_contributo_ammesso);
                        dgi.Cells[14].Text = string.Format("{0:c}", pag_inv_disavanzo_assengato);
                    }
                }
                else
                {
                    dgi.Cells[8].Text = string.Format("{0:c}", pag_inv_contributo_richiesto);
                    dgi.Cells[10].Text = string.Format("{0:c}", pag_inv_contributo_ammesso);
                    dgi.Cells[14].Text = string.Format("{0:c}", pag_inv_disavanzo_assengato);
                }


                dgi.Cells[4].Text = string.Format("{0:c}", costo_investimenti);
                dgi.Cells[6].Text = string.Format("{0:N}", Math.Round(quota, 2, MidpointRounding.AwayFromZero));
                dgi.Cells[7].Text = string.Format("{0:c}", pag_inv_costo_richiesto);
                //dgi.Cells[8].Text = string.Format("{0:c}", pag_inv_contributo_richiesto);
                dgi.Cells[9].Text = string.Format("{0:c}", pag_inv_importo_ammesso);
                //dgi.Cells[10].Text = string.Format("{0:c}", pag_inv_contributo_ammesso);
                //dgi.Cells[14].Text = string.Format("{0:c}", pag_inv_disavanzo_assengato);
            }
        }

        #endregion
    }

}