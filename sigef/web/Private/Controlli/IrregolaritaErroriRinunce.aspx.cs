using System;
using System.Collections.Generic;
using System.Linq;
using System.Web.UI;
using System.Web.UI.WebControls;
using SiarLibrary;
using SiarLibrary.Web;
using SiarBLL;

namespace web.Private.Controlli
{
    public partial class IrregolaritaErroriRinunce : IrregolaritaErroriRinuncePage
    {
        #region CollectionProvider

        CodificaGenericaCollectionProvider codifica_generica_provider;
        BandoCollectionProvider bando_provider;
        ProgettoCollectionProvider progetto_provider;
        IrregolaritaCollectionProvider irregolarita_provider;
        TipoIrregolaritaCollectionProvider tipo_irregolarita_provider;
        DisposizioneCollectionProvider disposizione_provider;
        VricercaSpeseIrregolariCollectionProvider ricerca_spese_provider;
        ImpresaCollectionProvider impresa_provider;
        ImpresaAggregazioneCollectionProvider impresa_aggregazione_provider;
        ProgettoNaturaSoggettoCollectionProvider natura_soggetto_provider;
        PianoInvestimentiCollectionProvider investimenti_provider;
        AllegatiProtocollatiCollectionProvider allegati_provider;
        SiarLibrary.NotAutogeneratedClasses.RiepilogoDomandePagamentoCollectionProvider riepilogo_provider;
        IntegrazioniPerDomandaDiPagamentoCollectionProvider integrazione_provider;
        IntegrazioneSingolaDiDomandaCollectionProvider integrazioni_singole_provider;
        PagamentiRichiestiFemCollectionProvider pag_rich_fem_provider;
        PagamentiRichiestiCollectionProvider prichiesti_provider;
        PianoInvestimentiCollection investimenti;
        PagamentiRichiestiCollection pagamenti_richiesti;
        PagamentiIrregolaritaCollectionProvider pagamentiIrregolaritaCollectionProvider;
        CertDecertificazioneCollectionProvider certDecertificazioneCollectionProvider;

        #endregion

        #region Indici colonne Datagrid

        //Colonne dgDisposizioni
        private int colDisp_Id = 0,
            colDisp_Tipo = 1,
            colDisp_Numero = 2,
            colDisp_Anno = 3,
            colDisp_Articolo = 4,
            colDisp_Nazionale = 5,
            colDisp_Regionale = 6;

        //Colonne dgRicercaSpeseIrregolari
        private int colRic_LottoCert = 0,
            colRic_DomandaPagamento = 1,
            colRic_Giustificativo = 2,
            colRic_Spesa = 3,
            colRic_Irregolare = 8,
            colRic_ImportoIrregolare = 9,
            colRic_IdSpesaIrregolare = 10,
            colRic_ContributoIrregolare = 11;

        private int col_InfoBando = 0,
                col_IdDomandaPagamento = 1,
                col_ModalitaPagamento = 2,
                col_InfoDomanda = 3,
                col_ImportoRichiesto = 4,
                col_ContributoRichiesto = 5,
                col_Segnatura = 6,
                col_Istruita = 7,
                col_InfoDomandaIstruttore = 8,
                col_ImportoAmmesso = 9,
                col_ContributoAmmesso = 10,
                col_ColonnaCheck = 11;

        #endregion

        private bool error_on_saving = false;

        protected void Page_Load(object sender, EventArgs e)
        {

        }

        protected override void OnPreRender(EventArgs e)
        {
            InizializzaProvider();
            CaricaCombobox();


            if (Progetto != null)
            {
                PopolaImmagini();
                CaricaRiepilogoProgetto(Progetto);

                RiempiFormIrregolarita();
            }
            else
                Redirect(PATH_PDOMANDA + "RicercaDomanda.aspx", "Domanda non selezionata", true);

            ControllaResponsabileBando();

            base.OnPreRender(e);
        }

        private void InizializzaProvider()
        {
            codifica_generica_provider = new CodificaGenericaCollectionProvider();
            bando_provider = new BandoCollectionProvider();
            progetto_provider = new ProgettoCollectionProvider();
            irregolarita_provider = new IrregolaritaCollectionProvider();
            tipo_irregolarita_provider = new TipoIrregolaritaCollectionProvider();
            disposizione_provider = new DisposizioneCollectionProvider();
            ricerca_spese_provider = new VricercaSpeseIrregolariCollectionProvider();
            prichiesti_provider = new PagamentiRichiestiCollectionProvider();
            impresa_provider = new ImpresaCollectionProvider();
            impresa_aggregazione_provider = new ImpresaAggregazioneCollectionProvider();
            natura_soggetto_provider = new ProgettoNaturaSoggettoCollectionProvider();
            investimenti_provider = new PianoInvestimentiCollectionProvider();
            allegati_provider = new AllegatiProtocollatiCollectionProvider();
            riepilogo_provider = new SiarLibrary.NotAutogeneratedClasses.RiepilogoDomandePagamentoCollectionProvider();
            integrazione_provider = new IntegrazioniPerDomandaDiPagamentoCollectionProvider();
            integrazioni_singole_provider = new IntegrazioneSingolaDiDomandaCollectionProvider();
            pag_rich_fem_provider = new PagamentiRichiestiFemCollectionProvider();
            pagamentiIrregolaritaCollectionProvider = new PagamentiIrregolaritaCollectionProvider();
            certDecertificazioneCollectionProvider = new CertDecertificazioneCollectionProvider();
        }

        #region Gestione combobox

        private void CaricaCombobox()
        {
            //Combo Individuazione irregolarità
            lstControlloOrigine.DataBinding += new EventHandler(lstControlloOrigine_DataBinding);
            lstControlloOrigine.DataBind();
            lstSospettoFrode.DataBinding += new EventHandler(lstSospettoFrode_DataBinding);
            lstSospettoFrode.DataBind();
            lstSegnalazioneOlaf.DataBinding += new EventHandler(lstSegnalazioneOlaf_DataBinding);
            lstSegnalazioneOlaf.DataBind();

            //Combo Identificazione persone implicate
            lstCommessaDa.DataBinding += new EventHandler(lstCommessaDa_DataBinding);
            lstCommessaDa.DataBind();
            lstCategoriaIrregolarita.DataBinding += new EventHandler(lstCategoriaIrregolarita_DataBinding);
            lstCategoriaIrregolarita.DataBind();
            lstTipoIrregolaritaIndividuazionePersone.DataBinding += new EventHandler(lstTipoIrregolaritaIndividuazionePersone_DataBinding);
            lstTipoIrregolaritaIndividuazionePersone.DataBind();
            lstClassificazioneIrregolarita.DataBinding += new EventHandler(lstClassificazioneIrregolarita_DataBinding);
            lstClassificazioneIrregolarita.DataBind();

            //Combo Disposizioni 
            lstTipoDisposizione.DataBinding += new EventHandler(lstTipoDisposizione_DataBinding);
            lstTipoDisposizione.DataBind();

            //Combo Procedure recupero
            lstStatoFinanziario.DataBinding += new EventHandler(lstStatoFinanziario_DataBinding);
            lstStatoFinanziario.DataBind();
            lstStabilitaOperazioni.DataBinding += new EventHandler(lstStabilitaOperazioni_DataBinding);
            lstStabilitaOperazioni.DataBind();

            //Combo Fronte azione irregolarità
            lstAzione.Items.Clear();
            lstAzione.Items.Add(new ListItem("Nessuna"));
            lstAzione.Items.Add(new ListItem("Ritiro"));
            lstAzione.Items.Add(new ListItem("Recupero"));
            lstAzione.Items.Add(new ListItem("Recupero pendente"));
            lstAzione.Items.Add(new ListItem("Decurtazione"));

            //Combo Giustificatici
            lstDecurtaMassivo.DataBinding += new EventHandler(lstDecurtaMassivo_DataBinding);
            lstDecurtaMassivo.DataBind();
        }

        void lstControlloOrigine_DataBinding(object sender, EventArgs e)
        {
            lstControlloOrigine.Items.Clear();
            lstControlloOrigine.Items.Add(new ListItem("", ""));
            var codifica_collection = codifica_generica_provider.FTipo(10);

            if (codifica_collection.Count > 0)
                foreach (CodificaGenerica cod in codifica_collection)
                    lstControlloOrigine.Items.Add(new ListItem(cod.Descrizione, cod.Id));

            if (IsPostBack)
                lstControlloOrigine.SelectedValue = Request.Form[lstControlloOrigine.UniqueID];
        }

        void lstDecurtaMassivo_DataBinding(object sender, EventArgs e)
        {
            txtPercentuale.Text = "100";
            lstDecurtaMassivo.Items.Clear();
            lstDecurtaMassivo.Items.Add(new ListItem("", ""));
            SiarLibrary.NotAutogeneratedClasses.RiepilogoDomandePagamentoCollection domande_pagamento;

            lstDecurtaMassivo.Items.Add(new ListItem("Intero Progetto", "progetto"));
            domande_pagamento = riepilogo_provider.Find(Progetto.IdProgetto);
            foreach (SiarLibrary.NotAutogeneratedClasses.RiepilogoDomandePagamento domanda in domande_pagamento)
            {
                if (domanda.Annullata == false)
                    lstDecurtaMassivo.Items.Add(new ListItem("Domanda: " + domanda.IdDomandaPagamento.ToString(), domanda.IdDomandaPagamento.ToString()));
            }

            if (IsPostBack)
                lstDecurtaMassivo.SelectedValue = Request.Form[lstDecurtaMassivo.UniqueID];
        }

        void lstSospettoFrode_DataBinding(object sender, EventArgs e)
        {
            lstSospettoFrode.Items.Clear();
            var codifica_collection = codifica_generica_provider.FTipo(11);

            if (codifica_collection.Count > 0)
                foreach (CodificaGenerica cod in codifica_collection)
                    lstSospettoFrode.Items.Add(new ListItem(cod.Descrizione, cod.Flag));

            if (IsPostBack)
                lstSospettoFrode.SelectedValue = Request.Form[lstSospettoFrode.UniqueID];
        }

        void lstStabilitaOperazioni_DataBinding(object sender, EventArgs e)
        {
            lstStabilitaOperazioni.Items.Clear();
            var codifica_collection = codifica_generica_provider.FTipo(11);
            lstStabilitaOperazioni.Items.Add(new ListItem("", ""));
            if (codifica_collection.Count > 0)
                foreach (CodificaGenerica cod in codifica_collection)
                    lstStabilitaOperazioni.Items.Add(new ListItem(cod.Descrizione, cod.Flag));

            if (IsPostBack)
                lstStabilitaOperazioni.SelectedValue = Request.Form[lstStabilitaOperazioni.UniqueID];
        }


        void lstSegnalazioneOlaf_DataBinding(object sender, EventArgs e)
        {
            lstSegnalazioneOlaf.Items.Clear();
            var codifica_collection = codifica_generica_provider.FTipo(11);

            if (codifica_collection.Count > 0)
                foreach (CodificaGenerica cod in codifica_collection)
                    lstSegnalazioneOlaf.Items.Add(new ListItem(cod.Descrizione, cod.Flag));

            if (IsPostBack)
                lstSegnalazioneOlaf.SelectedValue = Request.Form[lstSegnalazioneOlaf.UniqueID];
        }

        //void lstFondo_DataBinding(object sender, EventArgs e)
        //{
        //    lstFondo.Items.Clear();
        //    lstFondo.Items.Add(new ListItem("", ""));
        //    var codifica_collection = codifica_generica_provider.FTipo(12);

        //    if (codifica_collection.Count > 0)
        //        foreach (SiarLibrary.CodificaGenerica cod in codifica_collection)
        //            lstFondo.Items.Add(new ListItem(cod.Descrizione, cod.Id));
        //}

        void lstStatoFinanziario_DataBinding(object sender, EventArgs e)
        {
            lstStatoFinanziario.Items.Clear();
            lstStatoFinanziario.Items.Add(new ListItem("", ""));
            var codifica_collection = codifica_generica_provider.FTipo(14);

            if (codifica_collection.Count > 0)
                foreach (CodificaGenerica cod in codifica_collection)
                    lstStatoFinanziario.Items.Add(new ListItem(cod.Descrizione, cod.Id));

            if (IsPostBack)
                lstStatoFinanziario.SelectedValue = Request.Form[lstStatoFinanziario.UniqueID];
        }

        void lstCategoriaIrregolarita_DataBinding(object sender, EventArgs e)
        {
            lstCategoriaIrregolarita.Items.Clear();
            lstCategoriaIrregolarita.Items.Add(new ListItem("", ""));
            var codifica_collection = codifica_generica_provider.FTipo(16);

            if (codifica_collection.Count > 0)
                foreach (CodificaGenerica cod in codifica_collection)
                    lstCategoriaIrregolarita.Items.Add(new ListItem(cod.Descrizione, cod.Id));

            if (IsPostBack)
                lstCategoriaIrregolarita.SelectedValue = Request.Form[lstCategoriaIrregolarita.UniqueID];
        }

        void lstTipoIrregolaritaIndividuazionePersone_DataBinding(object sender, EventArgs e)
        {
            lstTipoIrregolaritaIndividuazionePersone.Items.Clear();
            lstTipoIrregolaritaIndividuazionePersone.Items.Add(new ListItem("", ""));
            var codifica_collection = codifica_generica_provider.FTipo(17);

            if (codifica_collection.Count > 0)
                foreach (CodificaGenerica cod in codifica_collection)
                    lstTipoIrregolaritaIndividuazionePersone.Items.Add(new ListItem(cod.Descrizione, cod.Id));

            if (IsPostBack)
                lstTipoIrregolaritaIndividuazionePersone.SelectedValue = Request.Form[lstTipoIrregolaritaIndividuazionePersone.UniqueID];

            string json = "var jsonTipo=" + codifica_collection.ConvertToJSonObject() + ";";
            ScriptManager.RegisterStartupScript(this.Page, Page.GetType(), "jsonTipo", json, true);
        }

        void lstClassificazioneIrregolarita_DataBinding(object sender, EventArgs e)
        {
            lstClassificazioneIrregolarita.Items.Clear();
            lstClassificazioneIrregolarita.Items.Add(new ListItem("", ""));
            var codifica_collection = codifica_generica_provider.FTipo(18);

            if (codifica_collection.Count > 0)
                foreach (CodificaGenerica cod in codifica_collection)
                    lstClassificazioneIrregolarita.Items.Add(new ListItem(cod.Descrizione, cod.Id));

            if (IsPostBack)
                lstClassificazioneIrregolarita.SelectedValue = Request.Form[lstClassificazioneIrregolarita.UniqueID];
        }

        void lstTipoDisposizione_DataBinding(object sender, EventArgs e)
        {
            lstTipoDisposizione.Items.Clear();
            lstTipoDisposizione.Items.Add(new ListItem("", ""));
            var codifica_collection = codifica_generica_provider.FTipo(15);

            if (codifica_collection.Count > 0)
                foreach (CodificaGenerica cod in codifica_collection)
                    lstTipoDisposizione.Items.Add(new ListItem(cod.Descrizione, cod.Id));

            if (IsPostBack)
                lstTipoDisposizione.SelectedValue = Request.Form[lstTipoDisposizione.UniqueID];
        }

        void lstCommessaDa_DataBinding(object sender, EventArgs e)
        {
            lstCommessaDa.Items.Clear();
            lstCommessaDa.Items.Add(new ListItem("", ""));

            var impresa_progetto = impresa_provider.GetById(Progetto.IdImpresa);

            var natura_coll = natura_soggetto_provider.Find(Progetto.IdProgetto, null, null);
            if (natura_coll.Count > 0)
            {
                var natura = natura_coll[0];

                if (natura.TipoNaturaSoggetto == "Aggregata" && natura.IdAggregazione != null)
                {
                    var imprese_aggregazione_coll = impresa_aggregazione_provider.Find(natura.IdAggregazione, null, null, null, null);
                    if (imprese_aggregazione_coll.Count > 0)
                    {
                        foreach (ImpresaAggregazione imp_agg in imprese_aggregazione_coll)
                        {
                            var impresa = impresa_provider.GetById(imp_agg.IdImpresa);
                            lstCommessaDa.Items.Add(new ListItem(impresa.CodiceFiscale + " - " + impresa.RagioneSociale, impresa.IdImpresa));
                        }
                    }
                    else //se non esiste più il record (? non dovrebbe essere possibile) prendo l'impresa del progetto
                        lstCommessaDa.Items.Add(new ListItem(impresa_progetto.CodiceFiscale + " - " + impresa_progetto.RagioneSociale, impresa_progetto.IdImpresa));
                }
                else // se è singola prendo solo l'impresa del progetto
                    lstCommessaDa.Items.Add(new ListItem(impresa_progetto.CodiceFiscale + " - " + impresa_progetto.RagioneSociale, impresa_progetto.IdImpresa));
            } 
            else //se è singola prendo solo l'impresa del progetto
                lstCommessaDa.Items.Add(new ListItem(impresa_progetto.CodiceFiscale + " - " + impresa_progetto.RagioneSociale, impresa_progetto.IdImpresa));

            if (IsPostBack)
                lstCommessaDa.SelectedValue = Request.Form[lstCommessaDa.UniqueID];
        }

        #endregion

        private void VerificaJavascriptOnPost()
        {
            if (IsPostBack)
            {
                string onload = "readyFn(); ";
                ScriptManager.RegisterStartupScript(Page, this.GetType(), "onload", onload, true);
            }
        }

        private void PopolaImmagini()
        {
            imgMostraIndividuazioneIrregolarita.Attributes.Add("src", PATH_IMAGES + "ArrowUpSolid.png");
            imgMostraIdentificazionePersone.Attributes.Add("src", PATH_IMAGES + "ArrowUpSolid.png");
            imgMostraDisposizioniTrasgredite.Attributes.Add("src", PATH_IMAGES + "ArrowUpSolid.png");
            imgMostraGiustificativi.Attributes.Add("src", PATH_IMAGES + "ArrowUpSolid.png");
            imgMostraImpattoFinanziario.Attributes.Add("src", PATH_IMAGES + "ArrowUpSolid.png");
            imgMostraProcedureRecupero.Attributes.Add("src", PATH_IMAGES + "ArrowUpSolid.png");
            imgMostraAzioneFronteIrregolarita.Attributes.Add("src", PATH_IMAGES + "ArrowUpSolid.png");

            imgSearchFiltraRicercaSpese.Attributes.Add("src", PATH_IMAGES + "lente24.png");
            imgSegnatura.Attributes.Add("src", PATH_IMAGES + "lente.png");
        }

        private void CaricaRiepilogoProgetto(Progetto progetto)
        {
            var bando = bando_provider.GetById(progetto.IdBando);

            Control c = LoadControl(PATH_CONTROLS + "DatiDomanda.ascx");
            Type t = c.GetType();
            t.GetProperty("Progetto").SetValue(c, progetto, null);
            t.GetProperty("Bando").SetValue(c, Bando, null);
            tdDomanda.Controls.Add(c);
            Session["_progetto"] = progetto;
            Session["_bando"] = bando;
        }

        private string VerificaFormComboBase(ComboBase combo)
        {
            string errore = "";

            if (combo.SelectedValue == null || combo.SelectedValue == "")
                errore = "- campo <b>" + combo.NomeCampo + "</b> non selezionato; <br/>";

            return errore;
        }

        private string VerificaFormText(string nome_campo, string text)
        {
            string errore = "";

            if (text == null || text == "")
                errore = "- campo <b>" + nome_campo + "</b> non selezionato; <br/>";

            return errore;
        }

        private string CheckBoolLst(String value)
        {
            if (value == null)
                return "0";

            switch (value)
            {
                case "True": return "1";
                case "true": return "1";
                default: return "0";
            }
        }

        private void RiempiFormIrregolarita()
        {
            if (Irregolarita != null)
            {
                RiempiFormIndividuazione();
                RiempiFormIdentificazionePersone();
                RiempiFormDisposizioni();
                RiempiFormGiustificativi();
                RiempiFormImpattoFinanziario();
                RiempiFormProcedureRecupero();
            }
            else
            {
                divDisposizioniTrasgredite.Visible = false;
                divGiustificativi.Visible = false;
                txtDataCostatazioneAmministrativa.Text = DateTime.Now.ToString("dd/MM/yyyy");
                lstSegnalazioneOlaf.SelectedValue = "0";
                lblNumDisposizioni.Text = "Nessuna disposizione associata.";
                rblDataPeriodo.SelectedValue = "0";

                if (IsPostBack)
                {
                    lstSegnalazioneOlaf.SelectedValue = Request.Form[lstSegnalazioneOlaf.UniqueID];
                    rblDataPeriodo.SelectedValue = Request.Form[rblDataPeriodo.UniqueID];
                }
            }
        }

        private string VerificaFormIrregolarita()
        {
            string errori = "";

            errori += VerificaFormIndividuazione();
            errori += VerificaFormIdentificazionePersone();
            errori += VerificaFormImpattoFinanziario();
            errori += VerificaFormProcedureRecupero();

            return errori;
        }

        private void RiempiCampiIrregolarita(ref Irregolarita irregolarita)
        {
            RiempiCampiIndividuazione(ref irregolarita);
            RiempiCampiIdentificazionePersone(ref irregolarita);
            RiempiCampiGiustificativi(ref irregolarita);
            RiempiCampiImpattoFinanziario(ref irregolarita);
            RiempiCampiProcedureRecupero(ref irregolarita);
        }

        private void RiempiFormIndividuazione()
        {
            //lstTipoElemento.SelectedValue = Irregolarita.IdTipoIrregolarita;
            lstControlloOrigine.SelectedValue = Irregolarita.IdControlloOrigine;
            txtDescrizioneControlloOrigineEsterno.Text = Irregolarita.DescrizioneControlloOrigine;
            txtNumeroProtocollo.Text = Irregolarita.NumeroProtocollo;
            txtDataCostatazioneAmministrativa.Text = Irregolarita.DataCostatazioneAmministrativa;
            lstSospettoFrode.SelectedValue = CheckBoolLst(Irregolarita.SospettoFrode);
            if (Irregolarita.DataSegnalazione != null)
                rblDataPeriodo.SelectedValue = "0";
            else
                rblDataPeriodo.SelectedValue = "1";
            txtDataSegnalazione.Text = Irregolarita.DataSegnalazione;
            txtDataSegnalazioneA.Text = Irregolarita.DataSegnalazioneA;
            txtDataSegnalazioneDa.Text = Irregolarita.DataSegnalazioneDa;
            //Campi OLAF
            lstSegnalazioneOlaf.SelectedValue = CheckBoolLst(Irregolarita.SegnalazioneOlaf);
            txtDataSegnalazioneOlaf.Text = Irregolarita.DataSegnalazioneOlaf;
            txtDataPrimaInformazione.Text = Irregolarita.DataPrimaInformazione;
            txtNumeroOLAF.Text = Irregolarita.NumeroOlaf;
            txtFontePrimaInformazione.Text = Irregolarita.FontePrimaInformazione;
            //Azione Irregolarita
            chkDaRecuperare.Checked = Irregolarita.DaRecuperare == true ? true : false;

            if (Irregolarita.DaRecuperare != null && Irregolarita.DaRecuperare)
            {
                var recuperoProvider = new RecuperoBeneficiarioCollectionProvider();
                var recuperoCollection = recuperoProvider.Find(null, Irregolarita.IdProgetto, null, Irregolarita.IdIrregolarita, null, null);

                if (recuperoCollection.Count > 0)
                {
                    divMostraPulsanteCreaRecupero.Visible = false;

                    dgRecuperi.DataSource = recuperoCollection;
                    dgRecuperi.ItemDataBound += new DataGridItemEventHandler(dgRecuperi_ItemDataBound);
                    dgRecuperi.DataBind();
                }
                else
                {
                    divMostraRecuperoAssociato.Visible = false;
                }
            }
            else
            {
                divMostraPulsanteCreaRecupero.Visible = false;
                divMostraRecuperoAssociato.Visible = false;
            }

            chkRecuperato.Checked = Irregolarita.Recuperato == true ? true : false;
            lstAzione.SelectedValue = Irregolarita.AzioneCertificazione == null ? "Nessuna" : Irregolarita.AzioneCertificazione.ToString();
        }

        private string VerificaFormIndividuazione()
        {
            string errori = "";

            //errori += VerificaFormComboBase(lstTipoElemento);
            errori += VerificaFormComboBase(lstControlloOrigine);
            errori += VerificaFormText("Data costatazione amministrativa", txtDataCostatazioneAmministrativa.Text);
            errori += VerificaFormComboBase(lstSospettoFrode);

            //Verifica campi OLAF
            errori += VerificaFormComboBase(lstSegnalazioneOlaf);
            if (lstSegnalazioneOlaf.SelectedValue == "1")
            {
                if (rblDataPeriodo.SelectedValue == "1") //Se è selezionato il periodo controllo le due date
                {
                    errori += VerificaFormText("Segnalazione Olaf, periodo DA", txtDataSegnalazioneDa.Text);
                    errori += VerificaFormText("Segnalazione Olaf, periodo A", txtDataSegnalazioneA.Text);
                }
                else //altrimenti la singola
                    errori += VerificaFormText("Data segnalazione Olaf", txtDataSegnalazione.Text);

                errori += VerificaFormText("Data prima informazione", txtDataPrimaInformazione.Text);
                errori += VerificaFormText("Fonte prima informazione", txtFontePrimaInformazione.Text);
            }

            return errori;
        }

        private void RiempiCampiIndividuazione(ref Irregolarita irregolarita)
        {
            //irregolarita.IdTipoIrregolarita = lstTipoElemento.SelectedValue;
            irregolarita.IdControlloOrigine = lstControlloOrigine.SelectedValue;
            irregolarita.DescrizioneControlloOrigine = txtDescrizioneControlloOrigineEsterno.Text;
            irregolarita.NumeroProtocollo = txtNumeroProtocollo.Text;
            irregolarita.DataCostatazioneAmministrativa = txtDataCostatazioneAmministrativa.Text;
            irregolarita.SospettoFrode = lstSospettoFrode.SelectedValue;
            irregolarita.DataSegnalazione = null;
            irregolarita.DataSegnalazioneA = null;
            irregolarita.DataSegnalazioneDa = null;
            if(rblDataPeriodo.SelectedValue=="0")
                irregolarita.DataSegnalazione = txtDataSegnalazione.Text;
            else
            {
                irregolarita.DataSegnalazioneA = txtDataSegnalazioneA.Text;
                irregolarita.DataSegnalazioneDa = txtDataSegnalazioneDa.Text;
            }
            //Campi OLAF
            irregolarita.SegnalazioneOlaf = lstSegnalazioneOlaf.SelectedValue;
            irregolarita.DataSegnalazioneOlaf = txtDataSegnalazioneOlaf.Text;
            irregolarita.NumeroOlaf = txtNumeroOLAF.Text;
            irregolarita.DataPrimaInformazione = txtDataPrimaInformazione.Text;
            irregolarita.FontePrimaInformazione = txtFontePrimaInformazione.Text;
            //Azione Irregolarita
            irregolarita.DaRecuperare = chkDaRecuperare.Checked;
            irregolarita.ImportoIrregolareDaRecuperare = chkDaRecuperare.Checked;
            irregolarita.Recuperato = chkRecuperato.Checked;
            irregolarita.AzioneCertificazione = lstAzione.SelectedValue;

        }

        private void RiempiFormIdentificazionePersone()
        {
            lstCommessaDa.SelectedValue = Irregolarita.IdImpresaCommessaDa;
            txtNoteCommessaDa.Text = Irregolarita.NoteCommessaDa;
            lstCategoriaIrregolarita.SelectedValue = Irregolarita.IdCategoria;
            lstTipoIrregolaritaIndividuazionePersone.SelectedValue = Irregolarita.IdTipo;
            lstClassificazioneIrregolarita.SelectedValue = Irregolarita.IdClassificazione;
            txtPraticheIrregolarita.Text = Irregolarita.PraticheUtilizzate;
        }

        private string VerificaFormIdentificazionePersone()
        {
            string errori = "";

            errori += VerificaFormComboBase(lstCommessaDa);
            //errori += VerificaFormText("Note commesa da", txtNoteCommessaDa.Text);
            errori += VerificaFormComboBase(lstCategoriaIrregolarita);
            errori += VerificaFormComboBase(lstTipoIrregolaritaIndividuazionePersone);
            errori += VerificaFormComboBase(lstClassificazioneIrregolarita);
            errori += VerificaFormText("Pratiche utilizzate", txtPraticheIrregolarita.Text);

            return errori;
        }

        private void RiempiCampiIdentificazionePersone(ref Irregolarita irregolarita)
        {
            irregolarita.IdImpresaCommessaDa = lstCommessaDa.SelectedValue;
            irregolarita.NoteCommessaDa = txtNoteCommessaDa.Text;
            irregolarita.IdCategoria = lstCategoriaIrregolarita.SelectedValue;
            irregolarita.IdTipo = lstTipoIrregolaritaIndividuazionePersone.SelectedValue;
            irregolarita.IdClassificazione = lstClassificazioneIrregolarita.SelectedValue;
            irregolarita.PraticheUtilizzate = txtPraticheIrregolarita.Text;
        }

        protected void btnResetGiustificativi_Click(object sender, EventArgs e)
        {
            if (!abilitatoModifiche())
            {
                throw new Exception("Non si hanno i permessi per poter salvare o modificare l'irregolarità");
            }
            try
            {
                InizializzaProvider();
                pagamentiIrregolaritaCollectionProvider.DbProviderObj.BeginTran();
                var pagamenti_irregolarità = pagamentiIrregolaritaCollectionProvider.Select(null, null, null, null, null, Irregolarita.IdIrregolarita, null, null, null, Progetto.IdProgetto, null, null, null);
                pagamentiIrregolaritaCollectionProvider.DeleteCollection(pagamenti_irregolarità);
                pagamentiIrregolaritaCollectionProvider.DbProviderObj.Commit();

            }
            catch (Exception ex)
            {
                pagamentiIrregolaritaCollectionProvider.DbProviderObj.Rollback();
                ShowError(ex);
            }
        }

        protected void btnDecurtaMassivo_Click(object sender, EventArgs e)
        {
            decimal percentualeDecurtamento;
            if (!decimal.TryParse(txtPercentuale.Text, out percentualeDecurtamento))
                throw new Exception("Inserire una percentuale valida");
            if (percentualeDecurtamento <= 0 || percentualeDecurtamento > 100)
                throw new Exception("Inserire una percentuale valida");
            if (lstDecurtaMassivo.SelectedValue == null)
                ShowError("Selezionare cosa decurtare");
            else if (lstDecurtaMassivo.SelectedValue.Equals("progetto"))
            {
                var domandePagamento = new DomandaDiPagamentoCollectionProvider().Find(null, null, Progetto.IdProgetto, null);
                foreach (DomandaDiPagamento d in domandePagamento)
                    if (!(d.Annullata == null || d.Annullata == true))
                        decurtaPercentualeMassivo(d.IdDomandaPagamento, percentualeDecurtamento);
            }
            else
                decurtaPercentualeMassivo(int.Parse(lstDecurtaMassivo.SelectedValue), percentualeDecurtamento);
        }

        private void decurtaPercentualeMassivo(int idDomandaPagamento, decimal percentuale)
        {
            if (!abilitatoModifiche())
            {
                throw new Exception("Non si hanno i permessi per poter salvare o modificare l'irregolarità");
            }
            try
            {
                InizializzaProvider();
                pagamentiIrregolaritaCollectionProvider.DbProviderObj.BeginTran();
                var domanda = riepilogo_provider.Find(Progetto.IdProgetto, idDomandaPagamento)[0];
                if (domanda.CodTipo == "ANT")
                {
                    PagamentiIrregolarita pagamentoIrregolareAnticipo;
                    var pagamentiIrregolaritaAnticipo = pagamentiIrregolaritaCollectionProvider.Find(null, null, idDomandaPagamento, null, null, null);
                    if (pagamentiIrregolaritaAnticipo.Count == 0)
                    {
                        pagamentoIrregolareAnticipo = new PagamentiIrregolarita();
                        pagamentoIrregolareAnticipo.CfInserimento = Operatore.Utente.CfUtente;
                        pagamentoIrregolareAnticipo.DataInserimento = DateTime.Now;
                    }
                    else
                        pagamentoIrregolareAnticipo = pagamentiIrregolaritaAnticipo[0];

                    pagamentoIrregolareAnticipo.CfModifica = Operatore.Utente.CfUtente;
                    pagamentoIrregolareAnticipo.DataModifica = DateTime.Now;
                    pagamentoIrregolareAnticipo.IdIrregolarita = Irregolarita.IdIrregolarita;
                    pagamentoIrregolareAnticipo.IdDomanda = idDomandaPagamento;
                    pagamentoIrregolareAnticipo.IdProgetto = Progetto.IdProgetto;
                    pagamentoIrregolareAnticipo.ImportoIrregolareAmmesso = 0;
                    pagamentoIrregolareAnticipo.ImportoIrregolareConcesso = domanda.ContributoAmmesso * percentuale / 100;
                    pagamentiIrregolaritaCollectionProvider.Save(pagamentoIrregolareAnticipo);
                }
                else
                {
                    var pagamenti_list = ricerca_spese_provider.FindSpeseProgetto(null, idDomandaPagamento, null, null, null);
                    PagamentiRichiestiCollection prichiesti = prichiesti_provider.Find(null, null, null, idDomandaPagamento);

                    if (pagamenti_list.Count > 0)
                    {
                        //cancello i vecchi giustificativi associati a tutta la domanda
                        var pagamenti_irregolari_old = pagamentiIrregolaritaCollectionProvider.Find(null, null, idDomandaPagamento, null, null, null);
                        pagamentiIrregolaritaCollectionProvider.DeleteCollection(pagamenti_irregolari_old);

                        //salva giustificativi
                        var pagamenti_irregolarita_new = new PagamentiIrregolaritaCollection();
                        foreach (VricercaSpeseIrregolari ricerca in pagamenti_list)
                        {
                            if (ricerca.ImportoAmmesso != null)
                            {
                                var pagamento_richiesto = new PagamentiRichiestiCollectionProvider().Find(ricerca.IdPagamentoRichiesto, null, null, null)[0];
                                var pagamento_irregolarita = new PagamentiIrregolarita();
                                pagamento_irregolarita.CfInserimento = pagamento_irregolarita.CfModifica = Operatore.Utente.CfUtente;
                                pagamento_irregolarita.DataInserimento = pagamento_irregolarita.DataModifica = DateTime.Now;
                                pagamento_irregolarita.IdIrregolarita = Irregolarita.IdIrregolarita;
                                pagamento_irregolarita.IdProgetto = Irregolarita.IdProgetto;
                                pagamento_irregolarita.IdGiustificativo = ricerca.IdGiustificativo;
                                pagamento_irregolarita.ImportoIrregolareAmmesso = ricerca.ImportoAmmesso * percentuale / 100;
                                pagamento_irregolarita.ImportoIrregolareConcesso = pagamento_irregolarita.ImportoIrregolareAmmesso * ricerca.QuotaContributoRichiesto / 100;
                                pagamento_irregolarita.IdDomanda = ricerca.IdDomandaPagamento;
                                pagamento_irregolarita.IdInvestimento = pagamento_richiesto.IdInvestimento;
                                pagamento_irregolarita.IdPagamentoBeneficiario = ricerca.IdPagamentoBeneficiario;
                                if (!(pagamento_irregolarita.ImportoIrregolareAmmesso == null || pagamento_irregolarita.ImportoIrregolareAmmesso == 0.00))
                                    pagamenti_irregolarita_new.Add(pagamento_irregolarita);
                            }
                        }
                        pagamentiIrregolaritaCollectionProvider.SaveCollection(pagamenti_irregolarita_new);
                        ShowMessage("Spese irregolari salvate correttamente");
                    }
                }
                pagamentiIrregolaritaCollectionProvider.DbProviderObj.Commit();
            }
            catch (Exception ex)
            {
                pagamentiIrregolaritaCollectionProvider.DbProviderObj.Rollback();
                ShowError(ex);
            }
        }

        private void RiempiFormDisposizioni()
        {
            divDisposizioniTrasgredite.Visible = true;
            Disposizione disposizione_selezionata = null;
            var disposizioni_collection = Irregolarita != null && Irregolarita.IdIrregolarita != null
                ? disposizione_provider.GetDisposizioniIrregolarita(Irregolarita.IdIrregolarita)
                : new DisposizioneCollection();
            var disposizioni_list = disposizioni_collection.ToArrayList<Disposizione>();

            int id_disposizione;
            if (int.TryParse(hdnIdDisposizione.Value, out id_disposizione))
                disposizione_selezionata = disposizione_provider.GetById(id_disposizione);

            if (disposizioni_list.Count > 0)
            {
                lblNumDisposizioni.Text = "Selezionare la disposizione per modificarne i dati";

                dgDisposizioni.DataSource = disposizioni_list;
                dgDisposizioni.ItemDataBound += new DataGridItemEventHandler(dgDisposizioni_ItemDataBound);
                dgDisposizioni.DataBind();

                if (disposizione_selezionata != null)
                {
                    lstTipoDisposizione.SelectedValue = disposizione_selezionata.IdTipoDisposizione;
                    txtNumeroDisposizione.Text = disposizione_selezionata.Numero;
                    txtAnnoDisposizione.Text = disposizione_selezionata.Anno;
                    txtArticoloParagrafoDisposizione.Text = disposizione_selezionata.ArticoloParagrafo;
                }
                else
                {
                    lstTipoDisposizione.SelectedValue = null;
                    txtNumeroDisposizione.Text = null;
                    txtAnnoDisposizione.Text = null;
                    txtArticoloParagrafoDisposizione.Text = null;
                }
            }
            else
            {
                lblNumDisposizioni.Text = "Nessuna disposizione associata.";
            }
        }

        protected void btnDecurtaAnticipo_Click(object sender, EventArgs e)
        {
            if (!abilitatoModifiche())
            {
                throw new Exception("Si deve essere il Rup del bando per poter salvare o modificare l'irregolarità");
            }
            try
            {
                pagamentiIrregolaritaCollectionProvider = new PagamentiIrregolaritaCollectionProvider();
                decimal importoAnticipoIrregolare;
                if (!decimal.TryParse(txtAnticipoIrregolare.Text.Replace("€",""), out importoAnticipoIrregolare))
                    throw new Exception("Inserire un valore corretto");
                if (importoAnticipoIrregolare < 0)
                    throw new Exception("Inserire una percentuale valida");

                
                pagamentiIrregolaritaCollectionProvider.DbProviderObj.BeginTran();
                int idDomandaPagamento = int.Parse(hdnIdDomandaPagamento.Value);
                PagamentiIrregolarita pagamentoIrregolareAnticipo;
                var pagamentiIrregolaritaAnticipo = pagamentiIrregolaritaCollectionProvider.Find(null, null, idDomandaPagamento, null, null, null);

                if (importoAnticipoIrregolare == 0 && pagamentiIrregolaritaAnticipo.Count != 0)
                    pagamentiIrregolaritaCollectionProvider.Delete(pagamentiIrregolaritaAnticipo[0]);
                else
                {
                    if (importoAnticipoIrregolare != 0)
                    {
                        if (pagamentiIrregolaritaAnticipo.Count == 0)
                        {
                            pagamentoIrregolareAnticipo = new PagamentiIrregolarita();
                            pagamentoIrregolareAnticipo.CfInserimento = Operatore.Utente.CfUtente;
                            pagamentoIrregolareAnticipo.DataInserimento = DateTime.Now;
                        }
                        else
                            pagamentoIrregolareAnticipo = pagamentiIrregolaritaAnticipo[0];
                        //aggiorno i dati
                        pagamentoIrregolareAnticipo.CfModifica = Operatore.Utente.CfUtente;
                        pagamentoIrregolareAnticipo.DataModifica = DateTime.Now;
                        pagamentoIrregolareAnticipo.IdIrregolarita = Irregolarita.IdIrregolarita;
                        pagamentoIrregolareAnticipo.IdDomanda = idDomandaPagamento;
                        pagamentoIrregolareAnticipo.IdProgetto = Progetto.IdProgetto;

                        //SiarLibrary.NotAutogeneratedClasses.RiepilogoDomandePagamentoCollection domande_pagamento_buone = new SiarLibrary.NotAutogeneratedClasses.RiepilogoDomandePagamentoCollection();
                        riepilogo_provider = new SiarLibrary.NotAutogeneratedClasses.RiepilogoDomandePagamentoCollectionProvider();
                        var domanda = riepilogo_provider.Find(Progetto.IdProgetto, idDomandaPagamento)[0];

                        if(importoAnticipoIrregolare > domanda.ContributoAmmesso)
                            throw new Exception("Importo maggiore del contributo concesso");

                        pagamentoIrregolareAnticipo.ImportoIrregolareAmmesso = 0;
                        pagamentoIrregolareAnticipo.ImportoIrregolareConcesso = importoAnticipoIrregolare;
                        pagamentiIrregolaritaCollectionProvider.Save(pagamentoIrregolareAnticipo);
                    }
                }
                pagamentiIrregolaritaCollectionProvider.DbProviderObj.Commit();
                ShowMessage("Anticipo salvato con successo");
            }
            catch (Exception ex)
            {
                pagamentiIrregolaritaCollectionProvider.DbProviderObj.Rollback();
                ShowError(ex);
            }

        }

        private void RiempiFormGiustificativi()
        {
            divGiustificativi.Visible = true;
            bool selezionatoAnticipo = false;
            SiarLibrary.NotAutogeneratedClasses.RiepilogoDomandePagamentoCollection domande_pagamento_buone = new SiarLibrary.NotAutogeneratedClasses.RiepilogoDomandePagamentoCollection();
            SiarLibrary.NotAutogeneratedClasses.RiepilogoDomandePagamentoCollection domande_pagamento;
            PianoInvestimentiCollection investimenti = new PianoInvestimentiCollection();
            txtNoteGiustificativi.Text = Irregolarita.NoteGiustificativi;
            domande_pagamento = riepilogo_provider.Find(Progetto.IdProgetto);
            int idDomandaPagamento;

            if (!int.TryParse(hdnIdDomandaPagamento.Value, out idDomandaPagamento))//TODO è qui che è da rompere tutto
            {
                foreach (SiarLibrary.NotAutogeneratedClasses.RiepilogoDomandePagamento domanda in domande_pagamento)
                {
                    if (domanda.Annullata == false)
                        domande_pagamento_buone.Add(domanda);
                }
                lblGDomanda.Text = "Selezionare la domanda di pagamento";
                divInvestimenti.Style.Add("display", "none");
                divDgGiustificativi.Style.Add("display", "none");
            }
            else
            {
                divDgGiustificativi.Style.Add("display", "none");
                foreach (SiarLibrary.NotAutogeneratedClasses.RiepilogoDomandePagamento domanda in domande_pagamento)
                {
                    if (domanda.IdDomandaPagamento == idDomandaPagamento)
                    {
                        domande_pagamento_buone.Add(domanda);
                        if (domanda.CodTipo == "ANT")
                        {
                            selezionatoAnticipo = true;
                            divAnticipoGiustificativi.Style.Remove("display");
                            divInvestimenti.Style.Add("display", "none");
                            lblContributoAmmessoAnticipo.Text = string.Format("{0:c}", domanda.ContributoAmmesso);
                            var pagamentiIrregolare = pagamentiIrregolaritaCollectionProvider.Find(null, null, idDomandaPagamento, null, null, null);
                            if (pagamentiIrregolare.Count != 0)
                                txtAnticipoIrregolare.Text = string.Format("{0:c}", pagamentiIrregolare[0].ImportoIrregolareConcesso);
                        }
                    }
                }
                lblGDomanda.Text = "Domanda di pagamento";
                if(!selezionatoAnticipo)
                    caricaInvestimenti(Progetto.IdProgetto, idDomandaPagamento);
            }
            dgGestioneLavori.DataSource = domande_pagamento_buone;
            dgGestioneLavori.DataBind();

            if (!string.IsNullOrEmpty(hdnIdInvestimento.Value) && !selezionatoAnticipo)
            {
                divDgGiustificativi.Style.Remove("display");


                VricercaSpeseIrregolariCollection spese_coll = new VricercaSpeseIrregolariCollection();
                PagamentiRichiesti prichiesto = null;
                PagamentiRichiestiCollection prichiesti = prichiesti_provider.Find(null, hdnIdInvestimento.Value, null, idDomandaPagamento);
                if (prichiesti.Count > 0)
                {
                    prichiesto = prichiesti[0];
                    spese_coll = ricerca_spese_provider.FindSpeseProgetto(null, null, null, null, prichiesto.IdPagamentoRichiesto);
                }

                if (spese_coll.Count > 0)
                {
                    lstRicercaModalitaPagamentoDomanda.Items.Add(new ListItem("", ""));
                    lstRicercaFornitoreGiustificativo.Items.Add(new ListItem("", ""));
                    lstRicercaSpesaIrregolare.Items.Add(new ListItem("Tutte", "Tutte"));
                    lstRicercaSpesaIrregolare.Items.Add(new ListItem("Sì", "Sì"));
                    lstRicercaSpesaIrregolare.Items.Add(new ListItem("No", "No"));
                    PagamentiBeneficiarioCollection pbeneficiario_attuali = new PagamentiBeneficiarioCollectionProvider().Find(prichiesto.IdPagamentoRichiesto, null, null, null, null, null);

                    //dgRicercaSpeseIrregolari.DataSource = pagamenti_irr_coll;
                    dgRicercaSpeseIrregolari.DataSource = spese_coll;

                    dgRicercaSpeseIrregolari.ItemDataBound += new DataGridItemEventHandler(dgRicercaSpeseIrregolari_ItemDataBound);
                    dgRicercaSpeseIrregolari.DataBind();

                    //DecimalNT totale_irregolare = 0.00;
                    //var pagamenti_irregolari_list = pagamentiIrregolaritaCollectionProvider
                    //    .Find(null, Irregolarita.IdIrregolarita, idDomandaPagamento, null, null, null)
                    //    .ToArrayList<PagamentiIrregolarita>();

                    //if (pagamenti_irregolari_list.Count > 0)
                    //    totale_irregolare = pagamenti_irregolari_list.Sum(s => s.ImportoIrregolareConcesso ?? 0.00);
                    //txtTotaleImportoIrregolare.Text = totale_irregolare;
                }
            }
            var pagamentiIrregolari = pagamentiIrregolaritaCollectionProvider.Select(null, null, null, null, null, Irregolarita.IdIrregolarita, null, null, null, Progetto.IdProgetto, null, null, null);
            decimal totaleIrregolare = 0;
            foreach (PagamentiIrregolarita pIrregolare in pagamentiIrregolari)
                totaleIrregolare += pIrregolare.ImportoIrregolareConcesso;
            txtTotaleImportoIrregolare.Text = totaleIrregolare.ToString();
            if (totaleIrregolare == 0)
                divAlert.Visible = true;
        }

        private void RiempiCampiGiustificativi(ref Irregolarita irregolarita)
        {
            irregolarita.NoteGiustificativi = txtNoteGiustificativi.Text;
        }

        private void RiempiFormImpattoFinanziario()
        {
            txtImportoAmmessoProgetto.Text = Irregolarita.ImportoSpesa;
            txtImportoAmmessoIrregolare.Text = Irregolarita.ContributoAmmesso;
            txtImportoAmmessoIrregolaritaCertificato.Text = Irregolarita.ContributoAmmessoCertificato;
            txtContributoAmmessoIrregolarita.Text = Irregolarita.ContributoPubblico;
            txtContributoAmmessoIrregolaritaCertificato.Text = Irregolarita.ContributoPubblicoCertificato;
            txtContributoAmmessoRevocare.Text = Irregolarita.ContributoPubblicoDaRecuperare;
            txtNoteImpattoFinanziario.Text = Irregolarita.CommentiImpattiFinanziario;
            txtContributoAmmessoRecuperare.Text = Irregolarita.ContributoRecuperareBeneficiario;
            txtContributoAmmessoProgetto.Text = Irregolarita.ContributoAmmessoProgetto;

        }

        private string VerificaFormImpattoFinanziario()
        {
            string errori = "";

            errori += VerificaFormText("Importo spesa", txtImportoAmmessoProgetto.Text);
            errori += VerificaFormText("Contributo ammesso", txtImportoAmmessoIrregolare.Text);
            errori += VerificaFormText("Contributo ammesso certificato", txtImportoAmmessoIrregolaritaCertificato.Text);
            errori += VerificaFormText("Contributo pubblico", txtContributoAmmessoIrregolarita.Text);
            errori += VerificaFormText("Contributo pubblico certificato", txtContributoAmmessoIrregolaritaCertificato.Text);
            errori += VerificaFormText("Contributo pubblico da recuperare", txtContributoAmmessoRevocare.Text);
            //errori += VerificaFormText("Note impatto finanziario", txtNoteImpattoFinanziario.Text);

            return errori;
        }

        private void RiempiCampiImpattoFinanziario(ref Irregolarita irregolarita)
        {
            irregolarita.ImportoSpesa = txtImportoAmmessoProgetto.Text;
            irregolarita.ContributoAmmesso = txtImportoAmmessoIrregolare.Text;
            irregolarita.ContributoAmmessoCertificato = txtImportoAmmessoIrregolaritaCertificato.Text;
            irregolarita.ContributoPubblico = txtContributoAmmessoIrregolarita.Text;
            irregolarita.ContributoPubblicoCertificato = txtContributoAmmessoIrregolaritaCertificato.Text;
            irregolarita.ContributoPubblicoDaRecuperare = txtContributoAmmessoRevocare.Text;
            irregolarita.CommentiImpattiFinanziario = txtNoteImpattoFinanziario.Text;
            irregolarita.ContributoAmmessoProgetto = txtContributoAmmessoProgetto.Text;
            irregolarita.ContributoRecuperareBeneficiario = txtContributoAmmessoRecuperare.Text;
        }

        private void RiempiFormProcedureRecupero()
        {
            chkProcedimentoAmministrativo.Checked = Irregolarita.ProcedimentoAmministrativo;
            chkAzioneGiudiziaria.Checked = Irregolarita.AzioneGiudiziaria;
            chkAzionePenale.Checked = Irregolarita.AzionePenale;
            lstStatoFinanziario.SelectedValue = Irregolarita.IdStatoFinanziario;
            lstStabilitaOperazioni.SelectedValue = CheckBoolLst(Irregolarita.StabilitaOperazioni);
        }

        private string VerificaFormProcedureRecupero()
        {
            string errori = "";

            errori += VerificaFormComboBase(lstStatoFinanziario);
            errori += VerificaFormComboBase(lstStabilitaOperazioni);
            return errori;
        }

        private void RiempiCampiProcedureRecupero(ref Irregolarita irregolarita)
        {
            irregolarita.ProcedimentoAmministrativo = chkProcedimentoAmministrativo.Checked;
            irregolarita.AzioneGiudiziaria = chkAzioneGiudiziaria.Checked;
            irregolarita.AzionePenale = chkAzionePenale.Checked;
            irregolarita.IdStatoFinanziario = lstStatoFinanziario.SelectedValue;
            irregolarita.StabilitaOperazioni = lstStabilitaOperazioni.SelectedValue;
        }

        protected void btnPost_Click(object sender, EventArgs e) { }

        protected void btnSalvaDisposizione_Click(object sender, EventArgs e)
        {
            if (!abilitatoModifiche())
            {
                throw new Exception("Si deve essere il Rup del bando per poter salvare o modificare l'irregolarità");
            }
            try
            {
                //InizializzaProvider();
                Disposizione disposizione;

                disposizione_provider = new DisposizioneCollectionProvider();
                irregolarita_provider = new IrregolaritaCollectionProvider(disposizione_provider.DbProviderObj);
                disposizione_provider.DbProviderObj.BeginTran();

                //Se ne ho selezionata una prendo quella e l'aggiorno
                int id_disposizione;
                if (int.TryParse(hdnIdDisposizione.Value, out id_disposizione))
                    disposizione = disposizione_provider.GetById(id_disposizione);
                else
                {
                    if (Irregolarita == null || Irregolarita.IdIrregolarita == null)
                        throw new Exception("Elemento ancora non salvato: salvare prima l'elemento e poi associare la disposizione trasgredita");

                    //Cerco eventuali disposizioni uguali prima di salvare
                    var disposizioni_coll = disposizione_provider.Find(
                        null, 
                        Irregolarita != null && Irregolarita.IdIrregolarita != null ? Irregolarita.IdIrregolarita : null, 
                        lstTipoDisposizione.SelectedValue, 
                        txtNumeroDisposizione.Text, 
                        txtAnnoDisposizione.Text, 
                        txtArticoloParagrafoDisposizione.Text);

                    if (disposizioni_coll.Count > 0)
                        disposizione = disposizioni_coll[0];
                    else
                    {
                        disposizione = new Disposizione();
                        disposizione.CfInserimento = Operatore.Utente.CfUtente;
                        disposizione.DataInserimento = DateTime.Now;
                        
                        disposizione.IdIrregolarita = Irregolarita.IdIrregolarita;
                    }
                }

                disposizione.CfModifica = Operatore.Utente.CfUtente;
                disposizione.DataModifica = DateTime.Now;

                disposizione.IdTipoDisposizione = lstTipoDisposizione.SelectedValue;
                disposizione.Numero = txtNumeroDisposizione.Text;
                disposizione.Anno = txtAnnoDisposizione.Text;
                disposizione.ArticoloParagrafo = txtArticoloParagrafoDisposizione.Text;

                
                var messaggio = "Disposizione aggiornata correttamente";
                if (disposizione.IdDisposizione == null)
                    messaggio = "Disposizione inserita correttamente";

                disposizione_provider.Save(disposizione);
                disposizione_provider.DbProviderObj.Commit();

                hdnIdDisposizione.Value = null;
                ShowMessage(messaggio);
            }
            catch (Exception ex)
            {
                disposizione_provider.DbProviderObj.Rollback();
                ShowError(ex);
            }
        }

        protected void btnEliminaDisposizione_Click(object sender, EventArgs e)
        {
            if (!abilitatoModifiche())
            {
                throw new Exception("Si deve essere il Rup del bando per poter salvare o modificare l'irregolarità");
            }
                try
            {
                Disposizione disposizione;
                disposizione_provider = new DisposizioneCollectionProvider();
                disposizione_provider.DbProviderObj.BeginTran();

                int id_disposizione;
                if (int.TryParse(hdnIdDisposizione.Value, out id_disposizione))
                {
                    disposizione = disposizione_provider.GetById(id_disposizione);
                    disposizione_provider.Delete(disposizione);
                    disposizione_provider.DbProviderObj.Commit();

                    ShowMessage("Disposizione eliminata correttamente");
                }
                else
                    throw new Exception("Disposizione non selezionata");
            }
            catch (Exception ex)
            {
                disposizione_provider.DbProviderObj.Rollback();
                ShowError(ex);
            }
            finally
            {
                hdnIdDisposizione.Value = null;
            }
        }

        protected void btnSalvaGiustificativiIrregolari_Click(object sender, EventArgs e)
        {
            if (!abilitatoModifiche())
            {
                throw new Exception("Si deve essere il Rup del bando per poter salvare o modificare l'irregolarità");
            }
            try
            {
                InizializzaProvider();

                if (Irregolarita == null || Irregolarita.IdIrregolarita == null)
                    throw new Exception("Elemento non ancora salvato: è necessario salvare prima gli altri dati e successivamente specificare le spese irregolari");

                //Salvo comunque le note dei giustificativi
                irregolarita_provider = new IrregolaritaCollectionProvider();
                Irregolarita.NoteGiustificativi = txtNoteGiustificativi.Text;
                irregolarita_provider.Save(Irregolarita);

                pagamentiIrregolaritaCollectionProvider.DbProviderObj.BeginTran();

                string[] selezionati = ((CheckColumn)dgRicercaSpeseIrregolari.Columns[colRic_Irregolare]).GetSelected();
               
                if (selezionati.Length > 0)
                {
                    List<int> id_pagamenti_list = selezionati.Select(int.Parse).ToList();
                    var pagamenti_irregolarita_new_coll = new PagamentiIrregolaritaCollection(); 

                    //Cerco le spese associate al progetto e le filtro per quelle selezionate
                    var ricerca_pagamenti_list = ricerca_spese_provider
                        .FindSpeseProgetto(Irregolarita.IdProgetto, null, null, null, null)
                        .ToArrayList<VricercaSpeseIrregolari>();

                    ricerca_pagamenti_list = ricerca_pagamenti_list
                        .Where(s => id_pagamenti_list.Any(id => id == s.IdPagamentoBeneficiario))
                        .ToList<VricercaSpeseIrregolari>();


                    //Cancello i pagamenti irregolari precedentemente salvate
                    var pagamenti_irregolari_old_coll = pagamentiIrregolaritaCollectionProvider.Find(null, Irregolarita.IdIrregolarita, int.Parse(hdnIdDomandaPagamento.Value), int.Parse(hdnIdInvestimento.Value), null, null);
                    foreach (PagamentiIrregolarita pagamenti_irr in pagamenti_irregolari_old_coll)
                        pagamentiIrregolaritaCollectionProvider.Delete(pagamenti_irr);

                    //Per ogni spesa selezionata creo il relativo record per la spesa irregolare
                    foreach (VricercaSpeseIrregolari ricerca in ricerca_pagamenti_list)
                    {
                        var pagamento_irregolarita = new PagamentiIrregolarita();
                        pagamento_irregolarita.CfInserimento = pagamento_irregolarita.CfModifica = Operatore.Utente.CfUtente;
                        pagamento_irregolarita.DataInserimento = pagamento_irregolarita.DataModifica = DateTime.Now;
                        pagamento_irregolarita.IdIrregolarita = Irregolarita.IdIrregolarita;
                        pagamento_irregolarita.IdProgetto = Irregolarita.IdProgetto;
                        pagamento_irregolarita.IdGiustificativo = ricerca.IdGiustificativo;
                        string importo = Request.Form["ImportoIrregolare" + ricerca.IdPagamentoBeneficiario.ToString() + "_text"].Replace("€.","").Replace("€","");
                        decimal importo2 = Convert.ToDecimal(importo);
                        pagamento_irregolarita.ImportoIrregolareAmmesso = Convert.ToDecimal(importo2);
                        
                        //pagamento_irregolarita.ImportoIrregolareConcesso = pagamento_irregolarita.ImportoIrregolareAmmesso * ricerca.QuotaContributoRichiesto / 100;
                        pagamento_irregolarita.ImportoIrregolareConcesso = Math.Round(pagamento_irregolarita.ImportoIrregolareAmmesso * ricerca.QuotaContributoRichiesto, 2, MidpointRounding.AwayFromZero) / 100;
                        pagamento_irregolarita.IdDomanda = int.Parse(hdnIdDomandaPagamento.Value);
                        pagamento_irregolarita.IdInvestimento = int.Parse(hdnIdInvestimento.Value);
                        pagamento_irregolarita.IdPagamentoBeneficiario = ricerca.IdPagamentoBeneficiario;
                        if (!(pagamento_irregolarita.ImportoIrregolareAmmesso == null || pagamento_irregolarita.ImportoIrregolareAmmesso == 0.00))
                            pagamenti_irregolarita_new_coll.Add(pagamento_irregolarita);
                    }
                    pagamentiIrregolaritaCollectionProvider.SaveCollection(pagamenti_irregolarita_new_coll);
                    //spesa_irregolare_provider.SaveCollection(spese_irregolari_new_coll);
                    pagamentiIrregolaritaCollectionProvider.DbProviderObj.Commit();
                    ShowMessage("Spese irregolari salvate correttamente");
                }
                else
                {
                    //Cancello i pagamenti irregolari precedentemente salvate
                    var pagamenti_irregolari_old_coll = pagamentiIrregolaritaCollectionProvider.Find(null, Irregolarita.IdIrregolarita, int.Parse(hdnIdDomandaPagamento.Value), int.Parse(hdnIdInvestimento.Value), null, null);
                    foreach (PagamentiIrregolarita pagamenti_irr in pagamenti_irregolari_old_coll)
                        pagamentiIrregolaritaCollectionProvider.Delete(pagamenti_irr);
                    pagamentiIrregolaritaCollectionProvider.DbProviderObj.Commit();
                    ShowMessage("Nessuna giustificativo associato");
                }
            }
            catch (Exception ex)
            {
                pagamentiIrregolaritaCollectionProvider.DbProviderObj.Rollback();
                ShowError(ex);
            }
        }
        protected void btnCalcolaPercentuali_Click(object sender, EventArgs e)
        {
            if (!abilitatoModifiche())
            {
                throw new Exception("Si deve essere il Rup del bando per poter salvare o modificare l'irregolarità");
            }
            pagamentiIrregolaritaCollectionProvider = new PagamentiIrregolaritaCollectionProvider();
            {
                try
                {
                    InizializzaProvider();

                    decimal percentuale;
                    if(!decimal.TryParse(txtPercentuale.Text, out percentuale))
                        throw new Exception("Inserire una percentuale corretta");
                    
                    if(percentuale>100 || percentuale<=0)
                        throw new Exception("Inserire una percentuale corretta");
                    

                    if (Irregolarita == null || Irregolarita.IdIrregolarita == null)
                        throw new Exception("Elemento non ancora salvato: è necessario salvare prima gli altri dati e successivamente specificare le spese irregolari");

                    

                    string[] selezionati = ((CheckColumn)dgRicercaSpeseIrregolari.Columns[colRic_Irregolare]).GetSelected();

                    if (selezionati.Length > 0)
                    {
                        List<int> id_pagamenti_list = selezionati.Select(int.Parse).ToList();
                        var pagamenti_irregolarita_new_coll = new PagamentiIrregolaritaCollection();

                        //Cerco le spese associate al progetto e le filtro per quelle selezionate
                        var ricerca_pagamenti_list = ricerca_spese_provider
                            .FindSpeseProgetto(Irregolarita.IdProgetto, null, null, null, null)
                            .ToArrayList<VricercaSpeseIrregolari>();

                        ricerca_pagamenti_list = ricerca_pagamenti_list
                            .Where(s => id_pagamenti_list.Any(id => id == s.IdPagamentoBeneficiario))
                            .ToList<VricercaSpeseIrregolari>();


                        //Cancello i pagamenti irregolari precedentemente salvate
                        var pagamenti_irregolari_old_coll = pagamentiIrregolaritaCollectionProvider.Find(null, Irregolarita.IdIrregolarita, int.Parse(hdnIdDomandaPagamento.Value), int.Parse(hdnIdInvestimento.Value), null, null);
                        foreach (PagamentiIrregolarita pagamenti_irr in pagamenti_irregolari_old_coll)
                            pagamentiIrregolaritaCollectionProvider.Delete(pagamenti_irr);

                        //Per ogni spesa selezionata creo il relativo record per la spesa irregolare
                        foreach (VricercaSpeseIrregolari ricerca in ricerca_pagamenti_list)
                        {

                            var pagamento_irregolarita = new PagamentiIrregolarita();
                            pagamento_irregolarita.CfInserimento = pagamento_irregolarita.CfModifica = Operatore.Utente.CfUtente;
                            pagamento_irregolarita.DataInserimento = pagamento_irregolarita.DataModifica = DateTime.Now;
                            pagamento_irregolarita.IdIrregolarita = Irregolarita.IdIrregolarita;
                            pagamento_irregolarita.IdProgetto = Irregolarita.IdProgetto;
                            pagamento_irregolarita.IdGiustificativo = ricerca.IdGiustificativo;
                            pagamento_irregolarita.ImportoIrregolareAmmesso = Convert.ToDecimal(Request.Form["ImportoIrregolare" + ricerca.IdPagamentoBeneficiario.ToString() + "_text"]) * percentuale / 100;
                            pagamento_irregolarita.ImportoIrregolareConcesso = pagamento_irregolarita.ImportoIrregolareAmmesso * ricerca.QuotaContributoRichiesto / 100;
                            pagamento_irregolarita.IdDomanda = int.Parse(hdnIdDomandaPagamento.Value);
                            pagamento_irregolarita.IdInvestimento = int.Parse(hdnIdInvestimento.Value);
                            pagamento_irregolarita.IdPagamentoBeneficiario = ricerca.IdPagamentoBeneficiario;
                            if (pagamento_irregolarita.ImportoIrregolareAmmesso == null || pagamento_irregolarita.ImportoIrregolareAmmesso == 0.00)
                                throw new Exception("Importo irregolare non trovato o non inserito");

                            pagamenti_irregolarita_new_coll.Add(pagamento_irregolarita);
                        }
                        pagamentiIrregolaritaCollectionProvider.SaveCollection(pagamenti_irregolarita_new_coll);
                        //spesa_irregolare_provider.SaveCollection(spese_irregolari_new_coll);
                        pagamentiIrregolaritaCollectionProvider.DbProviderObj.Commit();
                        ShowMessage("Spese irregolari salvate correttamente");
                    }
                    else
                        throw new Exception("Nessuna spesa selezionata.");
                }
                catch (Exception ex)
                {
                    pagamentiIrregolaritaCollectionProvider.DbProviderObj.Rollback();
                    ShowError(ex);
                }
            }
        }

        protected void btnSalvaIrregolarita_Click(object sender, EventArgs e)
        {
            if (!abilitatoModifiche())
            {
                throw new Exception("Si deve essere il Rup del bando per poter salvare o modificare l'irregolarità");
            }
            try
            {
                irregolarita_provider = new IrregolaritaCollectionProvider();
                irregolarita_provider.DbProviderObj.BeginTran();
                Irregolarita irregolarita_new;

                var esito = VerificaFormIrregolarita();
                if (esito != "")
                {
                    error_on_saving = true;
                    throw new Exception("IMPOSSIBILE CREARE L'ELEMENTO: <br/>" + esito);
                }

                if (Irregolarita == null)
                {
                    irregolarita_new = new Irregolarita();
                    irregolarita_new.CfInserimento = Operatore.Utente.CfUtente;
                    irregolarita_new.DataInserimento = DateTime.Now;
                    irregolarita_new.CfModifica = Operatore.Utente.CfUtente;
                    irregolarita_new.DataModifica = DateTime.Now;

                    if (Progetto != null && Progetto.IdProgetto != null)
                        irregolarita_new.IdProgetto = Progetto.IdProgetto;
                    else
                    {
                        error_on_saving = true;
                        throw new Exception("Impossibile creare l'elemento: riferimento alla domanda di aiuto mancante");
                    }
                }
                else
                    irregolarita_new = Irregolarita;

                RiempiCampiIrregolarita(ref irregolarita_new);
                irregolarita_new.IdTipoIrregolarita = "1";//irregolarita
                irregolarita_provider.Save(irregolarita_new);

                //Aggiorno Tabella Decertificazioni
                certDecertificazioneCollectionProvider = new CertDecertificazioneCollectionProvider();
                CertDecertificazione certDecertificazione = certDecertificazioneCollectionProvider.Find(null, null, null, irregolarita_new.IdIrregolarita, tipoDecertificazione.Irregolarita.ToString(), null, null, null, null, null, null, null).ToArrayList<CertDecertificazione>().FirstOrDefault();
                if (certDecertificazione == null)
                    certDecertificazione = new CertDecertificazione();
                certDecertificazione.IdProgetto = irregolarita_new.IdProgetto;
                certDecertificazione.IdDecertificazione = irregolarita_new.IdIrregolarita;
                certDecertificazione.TipoDecertificazione = tipoDecertificazione.Irregolarita.ToString();
                certDecertificazione.ImportoDecertificazioneAmmesso = irregolarita_new.ContributoAmmesso;
                certDecertificazione.ImportoDecertificazioneConcesso = irregolarita_new.ContributoPubblico;
                certDecertificazione.DataConstatazioneAmministrativa = irregolarita_new.DataCostatazioneAmministrativa;
                certDecertificazioneCollectionProvider.Save(certDecertificazione);

                irregolarita_provider.DbProviderObj.Commit();
                Irregolarita = irregolarita_new;
                Irregolarita.IdBando = Progetto.IdBando;
                ShowMessage("Elemento salvato correttamente.<br/>Ora è possibile salvare eventuali Disposizioni trasgredite o Giustificativi");
            }
            catch (Exception ex)
            {
                Irregolarita = null;
                irregolarita_provider.DbProviderObj.Rollback();
                ShowError(ex.Message);
            }
        }

        protected void btnEliminaIrregolarita_Click(object sender, EventArgs e)
        {
            if (!abilitatoModifiche())
            {
                throw new Exception("Si deve essere il Rup del bando per poter salvare o modificare l'irregolarità");
            }
            try
            {
                irregolarita_provider = new IrregolaritaCollectionProvider();
                disposizione_provider = new DisposizioneCollectionProvider(irregolarita_provider.DbProviderObj);
                pagamentiIrregolaritaCollectionProvider = new PagamentiIrregolaritaCollectionProvider(irregolarita_provider.DbProviderObj);
                certDecertificazioneCollectionProvider = new CertDecertificazioneCollectionProvider(irregolarita_provider.DbProviderObj);
                irregolarita_provider.DbProviderObj.BeginTran();

                if (Irregolarita != null && Irregolarita.IdIrregolarita != null)
                {
                    //Elimino le disposizioni associate all'irregolarità
                    var disposizioni_coll = disposizione_provider.GetDisposizioniIrregolarita(Irregolarita.IdIrregolarita);
                    if (disposizioni_coll.Count > 0)
                        disposizione_provider.DeleteCollection(disposizioni_coll);
 
                    //elimino i pagamenti_irregolarita
                    var pagamenti_irregolari_coll = pagamentiIrregolaritaCollectionProvider.Find(null, Irregolarita.IdIrregolarita, null, null, null, null);
                    foreach (PagamentiIrregolarita pagamenti_irr in pagamenti_irregolari_coll)
                        pagamentiIrregolaritaCollectionProvider.Delete(pagamenti_irr);

                    //elimino la decertificazione associata
                    var decert_col = certDecertificazioneCollectionProvider.Find(null, null, null, Irregolarita.IdIrregolarita, tipoDecertificazione.Irregolarita.ToString(), null, null, null, null, null, null, null);
                    if (decert_col.Count != 0)
                        certDecertificazioneCollectionProvider.Delete(decert_col[0]);

                    irregolarita_provider.Delete(Irregolarita);
                    Irregolarita = null;
                    irregolarita_provider.DbProviderObj.Commit();

                    //ShowMessage("Elemento eliminato correttamente");
                    Irregolarita = null;
                    Redirect(PATH_CONTROLLI + "RicercaIrregolaritaErroriRinunce.aspx", "Elemento eliminato correttamente", false);
                }
                else
                    throw new Exception("Elemento non trovato o mai salvato");
            }
            catch (Exception ex)
            {
                irregolarita_provider.DbProviderObj.Rollback();
                ShowError(ex);
            }
        }

        protected void btnVisualizzaRecupero_Click(object sender, EventArgs e)
        {
            try
            {
                RecuperoBeneficiarioCollectionProvider recuperoProvider = new RecuperoBeneficiarioCollectionProvider();
                int idRecupero;
                if (int.TryParse(hdnIdRecupero.Value, out idRecupero))
                {
                    var recupero = recuperoProvider.GetById(idRecupero);
                    Session["_recuperoBeneficiario"] = recupero;

                    Redirect(PATH_CONTROLLI + "RecuperoBeneficiario.aspx");
                }
                else
                    throw new Exception("Nessun recupero selezionato.");
            }
            catch (Exception ex)
            {
                ShowError(ex.Message);
            }
        }

        protected void btnCreaRecuperoDaIrregolarita_Click(object sender, EventArgs e)
        {
            RecuperoBeneficiarioCollectionProvider recuperoProvider = new RecuperoBeneficiarioCollectionProvider();

            try
            {
                SiarLibrary.RecuperoBeneficiario recupero = new SiarLibrary.RecuperoBeneficiario();
                recupero.IdProgetto = Irregolarita.IdProgetto;
                recupero.IdIrregolarita = Irregolarita.IdIrregolarita;
                recupero.Definitivo = false;
                recupero.FlagImportoIrrecuperabile = false;

                recuperoProvider.DbProviderObj.Commit();
                Session["_recuperoBeneficiario"] = recupero;
                Redirect(PATH_CONTROLLI + "RecuperoBeneficiario.aspx", "Recupero associato all'irregolarità creato con successo, si prega di completare le informazioni del recupero", false);
            }
            catch (Exception ex)
            {
                recuperoProvider.DbProviderObj.Rollback();
                ShowError(ex.Message);
            }
        }

        #region ItemDataBound

        void dgDisposizioni_ItemDataBound(object sender, DataGridItemEventArgs e)
        {
            DataGridItem dgi = (DataGridItem)e.Item;
            if (dgi.ItemType == ListItemType.Item || dgi.ItemType == ListItemType.AlternatingItem)
            {
                var disp = (Disposizione)e.Item.DataItem;

                if (disp.IdTipoDisposizione != null)
                {
                    var codifica = codifica_generica_provider.GetById(disp.IdTipoDisposizione);
                    if (codifica != null)
                        dgi.Cells[colDisp_Tipo].Text = codifica.Descrizione;
                }
            }
        }

        void dgGiustificativi_ItemDataBound(object sender, DataGridItemEventArgs e)
        {
            DataGridItem dgi = (DataGridItem)e.Item;
            if (dgi.ItemType == ListItemType.Item || dgi.ItemType == ListItemType.AlternatingItem)
            {
                var giustificativo = (PagamentiBeneficiario)e.Item.DataItem;
                if(giustificativo.ImportoAmmesso==null)
                {
                    giustificativo.ImportoAmmesso = 0;
                }
            }
        }

        void dgRicercaSpeseIrregolari_ItemDataBound(object sender, DataGridItemEventArgs e)
        {
            DataGridItem dgi = (DataGridItem)e.Item;
            
            if (dgi.ItemType == ListItemType.Item || dgi.ItemType == ListItemType.AlternatingItem)
            {
                var spesa = (VricercaSpeseIrregolari)e.Item.DataItem;

                dgi.Cells[4].Text = string.Format("{0:c}", spesa.IvaGiustificativo);
                dgi.Cells[5].Text = string.Format("{0:c}", spesa.ImportoRichiesto);
                dgi.Cells[6].Text = string.Format("{0:c}", spesa.ImportoAmmesso);
                dgi.Cells[7].Text = string.Format("{0:c}", spesa.ContributoAmmesso);
                if (spesa.IdLottoCertificazione != null)
                    dgi.Cells[colRic_LottoCert].Text = 
                        @"Id lotto: <b>" + spesa.IdLottoCertificazione + "</b><br/>" +
                        "Data inizio: <b>" + spesa.DataInizioLottoCertificazione + "</b><br/>" +
                        "Data fine: <b>" + spesa.DataFineLottoCertificazione + "</b>"; 
                else
                    dgi.Cells[colRic_LottoCert].Text = "La domanda di pagamento<br/> non risulta in nessuna <br/>certificazione definitiva.";

                if (spesa.IdDomandaPagamento != null)
                {
                    dgi.Cells[colRic_DomandaPagamento].Text =
                        @"Id domanda: <b>" + spesa.IdDomandaPagamento + "</b><br/>" +
                        "Modalità di pagamento: <b>" + spesa.TipoDomanda + "</b>";

                    var statoAttuale = new ListItem(spesa.TipoDomanda, spesa.TipoDomanda);
                    if (!lstRicercaModalitaPagamentoDomanda.Items.Contains(statoAttuale))
                        lstRicercaModalitaPagamentoDomanda.Items.Add(statoAttuale);
                }
                else
                    dgi.Cells[colRic_DomandaPagamento].Text = "Errore: domanda non trovata";

                if (spesa.IdGiustificativo != null)
                {
                    string fornitore = "";
                    if (spesa.CfFornitoreGiustificativo != null)
                    {
                        var fornitoreAttuale = new ListItem(spesa.CfFornitoreGiustificativo + " - " + spesa.DescrizioneFornitoreGiustificativo, spesa.CfFornitoreGiustificativo);
                        if (!lstRicercaFornitoreGiustificativo.Items.Contains(fornitoreAttuale))
                            lstRicercaFornitoreGiustificativo.Items.Add(fornitoreAttuale);

                        fornitore = ", Fornitore: <b>" + spesa.CfFornitoreGiustificativo + " - " + spesa.DescrizioneFornitoreGiustificativo + "</b>";
                    }

                    dgi.Cells[colRic_Giustificativo].Text =
                        @"Id giustificativo: <b>" + spesa.IdGiustificativo + "</b>, Numero: <b>" + spesa.NumeroGiustificativo + "</b>, " +
                        "Data: <b>" + spesa.DataGiustificativo + "</b><br/>" +
                        "Tipo: <b>" + spesa.TipoGiustificativo + "</b>, " +
                        "Importo netto: <b>" + string.Format("{0:c}", spesa.ImponibileGiustificativo) + "</b><br/>" +
                        "Oggetto: <b>" + spesa.DescrizioneGiustificativo + "</b>" + fornitore;
                }
                else
                    dgi.Cells[colRic_Giustificativo].Text = "Errore: giustificativo non trovato";

                if (spesa.IdPagamentoBeneficiario != null)
                {
                    dgi.Cells[colRic_Spesa].Text =
                        @"<span id='DatiSpesa" + spesa.IdPagamentoBeneficiario + "'>" +
                            "Id spesa: <b>" + spesa.IdSpesa + "</b>, Tipo: <b>" + spesa.TipoSpesa + "</b>, " +
                            "Data: <b>" + spesa.DataSpesa + "</b><br/>" +
                            "Estremi: <b>" + spesa.EstremiSpesa + "</b><br/>" +
                            "Importo lordo: <b>" + string.Format("{0:c}", spesa.ImportoSpesa) + "</b>, " +
                            "Importo netto: <b>" + string.Format("{0:c}", spesa.ImportoAmmesso) + "</b>" +
                        "</span>";

                    int? id_irregolarita = null;
                    if (Irregolarita != null && Irregolarita.IdIrregolarita != null)
                    {
                        id_irregolarita = Irregolarita.IdIrregolarita;
                        var pagamento_irr_coll = pagamentiIrregolaritaCollectionProvider.Find(null, id_irregolarita, null, null, null, spesa.IdPagamentoBeneficiario);
                        

                        if (pagamento_irr_coll.Count > 0)
                        {
                            var spesa_irregolare = pagamento_irr_coll[0];
                            dgi.Cells[colRic_Irregolare].Text = dgi.Cells[colRic_Irregolare].Text.Replace("<input", "<input checked");
                            dgi.Cells[colRic_ImportoIrregolare].Text = "<span class=\"CurrencyBox\" id=\"ImportoIrregolare" + spesa.IdPagamentoBeneficiario + "\"><input name=\"ImportoIrregolare" + spesa.IdPagamentoBeneficiario + "_text\" id=\"ImportoIrregolare" + spesa.IdPagamentoBeneficiario + "_text\" style=\"width: 100px; text-align: right;\" type=\"text\" value=\"" + spesa_irregolare.ImportoIrregolareAmmesso + "\"></span>";
                            dgi.Cells[colRic_IdSpesaIrregolare].Text = spesa_irregolare.IdPagamentoIrregolare;
                            dgi.Cells[colRic_ContributoIrregolare].Text = "<b>" + spesa_irregolare.ImportoIrregolareConcesso.ToString() + " €</b>";
                        }
                        else
                        {
                            dgi.Cells[colRic_Irregolare].Text = dgi.Cells[colRic_Irregolare].Text.Replace("checked", "");
                            dgi.Cells[colRic_ImportoIrregolare].Text = "<span class=\"CurrencyBox\" id=\"ImportoIrregolare" + spesa.IdPagamentoBeneficiario + "\"><input name=\"ImportoIrregolare" + spesa.IdPagamentoBeneficiario + "_text\" id=\"ImportoIrregolare" + spesa.IdPagamentoBeneficiario + "_text\" style=\"width: 100px; text-align: right;\" type=\"text\" value=\"0,00\"></span>";
                        }
                    }
                    else
                    {
                        dgi.Cells[colRic_Irregolare].Text = dgi.Cells[colRic_Irregolare].Text.Replace("checked", "");
                        dgi.Cells[colRic_ImportoIrregolare].Text = "<span class=\"CurrencyBox\" id=\"ImportoIrregolare" + spesa.IdPagamentoBeneficiario + "\"><input name=\"ImportoIrregolare" + spesa.IdPagamentoBeneficiario + "_text\" id=\"ImportoIrregolare" + spesa.IdPagamentoBeneficiario + "_text\" style=\"width: 100px; text-align: right;\" type=\"text\" value=\"0,00\"></span>";
                    } 
                }
                else
                {
                    dgi.Cells[colRic_Irregolare].Text = dgi.Cells[colRic_Irregolare].Text.Replace("checked", "");
                    dgi.Cells[colRic_ImportoIrregolare].Text = "<span class=\"CurrencyBox\" id=\"ImportoIrregolare" + spesa.IdPagamentoBeneficiario + "\"><input name=\"ImportoIrregolare" + spesa.IdPagamentoBeneficiario + "_text\" id=\"ImportoIrregolare" + spesa.IdPagamentoBeneficiario + "_text\" style=\"width: 100px; text-align: right;\" type=\"text\" value=\"0,00\"></span>";
                }
            }
        }

        decimal costo_investimenti = 0, contributo_investimenti = 0, pag_inv_costo_richiesto = 0, pag_inv_contributo_richiesto = 0,
            pag_inv_contributo_ammesso = 0, pag_inv_importo_ammesso = 0, pag_inv_disavanzo_assengato = 0, pag_inv_disavanzo_totale = 0, pag_inv_disavanzo_totale_contributo = 0;

        void dgRecuperi_ItemDataBound(object sender, DataGridItemEventArgs e)
        {
            DataGridItem dgi = (DataGridItem)e.Item;
            if (dgi.ItemType == ListItemType.Item || dgi.ItemType == ListItemType.AlternatingItem)
            {
                var recupero = (SiarLibrary.RecuperoBeneficiario)e.Item.DataItem;
                if (recupero.Definitivo != null)
                    if (recupero.Definitivo)
                        dgi.Cells[3].Text = dgi.Cells[3].Text.Replace("<input", "<input checked");
                    else
                        dgi.Cells[3].Text = dgi.Cells[3].Text.Replace("checked", "");
            }
        }

        #endregion

        #region PerPianoInvestimenti

        private void caricaInvestimenti(int idProgetto, int idDomandaPagamento)
        {
            BandoTipoInvestimentiCollection tipo_investimenti;
            investimenti = investimenti_provider.GetPianoInvestimentiDomandaPagamento(idProgetto, idDomandaPagamento);
            prichiesti_provider = new SiarBLL.PagamentiRichiestiCollectionProvider(investimenti_provider.DbProviderObj);
            pagamenti_richiesti = prichiesti_provider.Find(null, null, idProgetto, idDomandaPagamento);
            tipo_investimenti = new SiarBLL.BandoTipoInvestimentiCollectionProvider().GetTipoInvestimentiProgetto(Progetto.IdBando, true);
            int idInvestimento;
            divInvestimenti.Style.Remove("display");
            PianoInvestimentiCollection inv_supp = new PianoInvestimentiCollection();
            //investimenti ordinari
            if (tipo_investimenti.FiltroCodiceTipo(1).Count > 0)
            {
                if (int.TryParse(hdnIdInvestimento.Value, out idInvestimento))
                {
                    foreach (PianoInvestimenti inv in investimenti)
                    {
                        if (inv.IdInvestimento == idInvestimento)
                            inv_supp.Add(inv);
                    }
                    lblGInvestimento.Text = "Investimento"; 
                }
                else
                {

                    lblGInvestimento.Text = "Selezionare la voce d'investimento";
                    inv_supp = investimenti.FiltroTipoInvestimento(1);
                }
                if (inv_supp.Count == 0) dgInvestimenti.Titolo = "Nessun elemento trovato.";
                else
                {
                   dgInvestimenti.ItemDataBound += new DataGridItemEventHandler(dgInvestimenti_ItemDataBound);
                    dgInvestimenti.MostraTotale("DataField", 4, 5, 6);
                }
                dgInvestimenti.DataSource = inv_supp;
                dgInvestimenti.DataBind();
            }

        }

        void dgInvestimenti_ItemDataBound(object sender, DataGridItemEventArgs e)
        {
            DataGridItem dgi = (DataGridItem)e.Item;

            if (dgi.ItemType == ListItemType.Item || dgi.ItemType == ListItemType.AlternatingItem)
            {
                SiarLibrary.PianoInvestimenti f = (SiarLibrary.PianoInvestimenti)dgi.DataItem;
                if (f.IdPrioritaSettoriale != null) dgi.Cells[0].Text = "<img src='" + Request.ApplicationPath + "/images/star_red.gif'><br /><br />" + dgi.Cells[0].Text;
                dgi.Cells[2].Text = "<b>Codifica:</b> " + f.CodificaInvestimento + "<br /><b>Dettaglio:</b> " + f.DettaglioInvestimenti
                    + "<br /><b>Descrizione:</b> " + f.Descrizione;
                //Aggregazione
                string[] Aggregazione = new string[2];
                Aggregazione = investimenti_provider.GetImpresaAggregazioneInvestimento(f.IdInvestimento);
                if (Aggregazione[0] != null && Aggregazione[1] != null && Aggregazione[0] != "" && Aggregazione[1] != "")
                {
                    dgi.Cells[2].Text += "<br /><b>Impresa: </b>" + Aggregazione[0] + " - " + Aggregazione[1];
                    SiarLibrary.Impresa impresa = new SiarBLL.ImpresaCollectionProvider().GetByCuaa(Aggregazione[0]);
                    if (impresa.CodAteco2007 != null && impresa.CodAteco2007 != "")
                        dgi.Cells[2].Text += " - Ateco: " + impresa.CodAteco2007;
                }

                //Personalizzazione bando 6.2
                if (Progetto.IdBando == 39)
                {
                    string linea_intervento = "";
                    linea_intervento = investimenti_provider.GetLineaInterventoInvestimento(f.IdInvestimento);
                    if (linea_intervento != null && linea_intervento != "")
                        dgi.Cells[2].Text += "<br /><b>" + linea_intervento + "</b>";
                }

                if (f.NonCofinanziato) e.Item.Cells[5].Text = "(*)";
                decimal importo_pagamento_richiesti, quota_completamento = 0, quota_completamento_ammesso = 0, costo_investimento = f.CostoInvestimento.Value + (f.SpeseGenerali ?? 0), spese_ammesse = 0;

                // importo_pagamento_richiesti rappresenta il totale dei pagamenti già richiesti
                decimal.TryParse(f.AdditionalAttributes["ImportoPagamentoRichiesto"], out importo_pagamento_richiesti);
                SiarLibrary.PagamentiRichiestiCollection pagamenti = pagamenti_richiesti.FiltroInvestimento(f.IdInvestimento);
                if (pagamenti.Count > 0)
                {
                    // devo aggiungere il pagamento richiesto attuale non contato dalla query
                    importo_pagamento_richiesti += pagamenti[0].ImportoRichiesto;
                    pag_inv_costo_richiesto += pagamenti[0].ImportoRichiesto;
                    pag_inv_contributo_richiesto += pagamenti[0].ContributoRichiesto;
                    dgi.Cells[7].Text = string.Format("{0:c}", pagamenti[0].ImportoRichiesto);
                    dgi.Cells[8].Text = string.Format("{0:c}", pagamenti[0].ContributoRichiesto);
                    dgi.Cells[9].Text = string.Format("{0:c}", pagamenti[0].ImportoAmmesso);

                    // VERIFICARE SE DEVE ESSERE DIVERSO DA NULL???
                    if (pagamenti[0].ImportoAmmesso != null)
                        pag_inv_importo_ammesso += pagamenti[0].ImportoAmmesso;
                    if (pagamenti[0].ContributoAmmesso != null)
                    {
                        dgi.Cells[10].Text = string.Format("{0:c}", pagamenti[0].ContributoAmmesso);
                        pag_inv_contributo_ammesso += pagamenti[0].ContributoAmmesso;
                    }
                    if (pagamenti[0].ContributoDisavanzoCostiAmmessi != null)
                    {
                        dgi.Cells[14].Text = string.Format("{0:c}", pagamenti[0].ContributoDisavanzoCostiAmmessi);
                        pag_inv_disavanzo_assengato += pagamenti[0].ContributoDisavanzoCostiAmmessi;
                    }
                    else
                        dgi.Cells[14].Text = "0,00";
                }
                else
                    dgi.Cells[14].Text = "0,00";
                if (costo_investimento > 0 && pagamenti.Count > 0)
                {
                    quota_completamento = Math.Round(100 * importo_pagamento_richiesti / costo_investimento, 12, MidpointRounding.AwayFromZero);
                    decimal importoAmmessoInvestimento = 0;
                    if (pagamenti[0].ImportoAmmesso != null)
                        importoAmmessoInvestimento = pagamenti[0].ImportoAmmesso;
                    quota_completamento_ammesso = Math.Round(100 * (importoAmmessoInvestimento + (importo_pagamento_richiesti - pagamenti[0].ImportoRichiesto)) / costo_investimento, 12, MidpointRounding.AwayFromZero);
                    spese_ammesse = importoAmmessoInvestimento + (importo_pagamento_richiesti - pagamenti[0].ImportoRichiesto);
                }
                costo_investimenti += costo_investimento;
                contributo_investimenti += f.ContributoRichiesto;
                dgi.Cells[4].Text = string.Format("{0:c}", costo_investimento);
                dgi.Cells[11].Text = string.Format("{0:N12}", quota_completamento);
                dgi.Cells[16].Text = string.Format("{0:N12}", quota_completamento_ammesso);

                // importo pagamenti richiesti sarebbe il totale dei pagamenti richiesti finora, compreso il corrente, per l'investimento
                // se questo valore è maggiore del costo dell'investimento significa che ho un disavanzo e posso andarlo a spalmare su 
                // altri investimenti. Quindi lo mostro in griglia
                if (spese_ammesse > costo_investimento)
                {
                    decimal disavanzo = 0;
                    decimal disavanzo_contributo = 0;
                    // se il disavanzo è minore del 110% vuol dire che è nella soglia del 10% quindi lo calcolo come differenza
                    if (quota_completamento_ammesso <= 110)
                        disavanzo = spese_ammesse - costo_investimento;
                    // altrimenti lo calcolo come massimo 10% del costo dell'investimento
                    else
                        disavanzo = costo_investimento * 10 / 100;

                    disavanzo_contributo = disavanzo * f.QuotaContributoRichiesto / 100;

                    dgi.Cells[12].Text = string.Format("{0:c}", disavanzo);
                    dgi.Cells[12].ForeColor = System.Drawing.Color.Green;
                    dgi.Cells[13].Text = string.Format("{0:c}", disavanzo_contributo);
                    dgi.Cells[13].ForeColor = System.Drawing.Color.Green;
                    // questa è la somma totale dei disavanzi che così calcolata rientra sempre nel 10% del totale
                    decimal contributoDisavanzoCostiAmmessi = 0;
                    if (pagamenti[0].ContributoDisavanzoCostiAmmessi != null)
                        decimal.TryParse(pagamenti[0].ContributoDisavanzoCostiAmmessi, out contributoDisavanzoCostiAmmessi);
                    dgi.Cells[15].Text = string.Format("{0:c}", disavanzo_contributo - contributoDisavanzoCostiAmmessi);
                    dgi.Cells[15].ForeColor = System.Drawing.Color.Green;

                    pag_inv_disavanzo_totale += disavanzo;
                    pag_inv_disavanzo_totale_contributo += disavanzo_contributo;

                }
                else if (spese_ammesse < costo_investimento)
                {
                    decimal disavanzo = 0;
                    decimal disavanzo_contributo = 0;
                    // se il disavanzo è minore del 110% vuol dire che è nella soglia del 10% quindi lo calcolo come differenza
                    if (quota_completamento_ammesso >= 90)
                        disavanzo = -(costo_investimento - spese_ammesse);
                    // altrimenti lo calcolo come massimo 10% del costo dell'investimento
                    else
                        disavanzo = -costo_investimento * 10 / 100;

                    disavanzo_contributo = disavanzo * f.QuotaContributoRichiesto / 100;

                    dgi.Cells[12].Text = string.Format("{0:c}", disavanzo);
                    dgi.Cells[12].ForeColor = System.Drawing.Color.Red;
                    dgi.Cells[13].Text = string.Format("{0:c}", disavanzo_contributo);
                    dgi.Cells[13].ForeColor = System.Drawing.Color.Red;
                    // questa è la somma totale dei disavanzi che così calcolata rientra sempre nel 10% del totale
                    decimal contributoDisavanzoCostiAmmessi = 0;
                    if (pagamenti.Count > 0 && pagamenti[0].ContributoDisavanzoCostiAmmessi != null)
                        decimal.TryParse(pagamenti[0].ContributoDisavanzoCostiAmmessi, out contributoDisavanzoCostiAmmessi);
                    dgi.Cells[15].Text = string.Format("{0:c}", disavanzo_contributo + contributoDisavanzoCostiAmmessi);
                    dgi.Cells[15].ForeColor = System.Drawing.Color.Red;

                    pag_inv_disavanzo_totale += disavanzo;
                    pag_inv_disavanzo_totale_contributo += disavanzo_contributo;
                }
                else
                {
                    dgi.Cells[12].Text = string.Format("{0:c}", 0);
                    dgi.Cells[13].Text = string.Format("{0:c}", 0);
                }
                if (dgi.Cells[2].Text.Length > 250)
                    dgi.Cells[2].Text = dgi.Cells[2].Text.Substring(0, 250);
                //Controllo che all'interno ci siano giustificativi già salvati
                PagamentiIrregolaritaCollection pagamentiIrregolaritaCollection = new PagamentiIrregolaritaCollectionProvider().Find(null, Irregolarita.IdIrregolarita, hdnIdDomandaPagamento.Value, f.IdInvestimento, null, null);
                if (pagamentiIrregolaritaCollection.Count != 0)
                    e.Item.BackColor = System.Drawing.Color.FromArgb(253, 190, 80);
            }
            else if (dgi.ItemType == ListItemType.Footer)
            {
                decimal quota = 0;
                if (costo_investimenti > 0) quota = 100 * contributo_investimenti / costo_investimenti;

                SiarLibrary.NullTypes.DecimalNT contributo_calcolato = investimenti_provider.
                    CalcoloContributoInvestimentiProgetto(Progetto.IdProgetto, true, investimenti[0].IdVariante);
                if (contributo_calcolato != null && contributo_calcolato < contributo_investimenti)
                    dgi.Cells[5].Text = "** " + String.Format("{0:c}", contributo_calcolato.Value);
                else dgi.Cells[5].Text = string.Format("{0:c}", contributo_investimenti);

                //controllo se il progetto ha un massimale di contributo, e al massimale le altre domande di pagamento gia istruite
                if (contributo_calcolato != null && contributo_calcolato < contributo_investimenti)
                {
                    //calcolo il contributo gia erogato nelle precedenti domande di pagamento 
                    decimal contributo_erogato = 0;
                    SiarBLL.DomandaDiPagamentoEsportazioneCollectionProvider dom_pag_esp = new SiarBLL.DomandaDiPagamentoEsportazioneCollectionProvider();
                    SiarLibrary.DomandaDiPagamentoCollection dom_coll = new SiarBLL.DomandaDiPagamentoCollectionProvider().Find(null, null, Progetto.IdProgetto, null);
                    DomandaDiPagamento domandaPagamento = new SiarBLL.DomandaDiPagamentoCollectionProvider().GetById(int.Parse(hdnIdDomandaPagamento.Value));
                    foreach (SiarLibrary.DomandaDiPagamento dp in dom_coll)
                    {
                        if (dp.IdDomandaPagamento < domandaPagamento.IdDomandaPagamento &&
                            dp.Approvata == true && dp.SegnaturaApprovazione != null && dp.SegnaturaApprovazione != "")
                        {
                            SiarLibrary.DomandaDiPagamentoEsportazione esp_coll = dom_pag_esp.GetById(dp.IdDomandaPagamento, Progetto.IdProgetto);
                            contributo_erogato += esp_coll.ImportoAmmesso;
                        }
                    }
                    decimal contributo_rimanenza = contributo_calcolato - contributo_erogato;
                    if (contributo_rimanenza < pag_inv_contributo_richiesto)
                        dgi.Cells[8].Text = "** " + String.Format("{0:c}", contributo_rimanenza);
                    else
                        dgi.Cells[8].Text = String.Format("{0:c}", pag_inv_contributo_richiesto);


                    if (contributo_rimanenza < (pag_inv_contributo_ammesso + pag_inv_disavanzo_assengato))
                    {
                        if (contributo_rimanenza < pag_inv_contributo_ammesso)
                        {
                            dgi.Cells[10].Text = "** " + String.Format("{0:c}", contributo_rimanenza);
                            if (pag_inv_disavanzo_assengato > 0)
                                dgi.Cells[14].Text = "** " + string.Format("{0:c}", 0);
                            else
                                dgi.Cells[14].Text = string.Format("{0:c}", pag_inv_disavanzo_assengato);
                        }
                        else
                        {
                            dgi.Cells[10].Text = String.Format("{0:c}", pag_inv_contributo_ammesso);
                            if (contributo_rimanenza - pag_inv_contributo_ammesso < pag_inv_disavanzo_assengato)
                                dgi.Cells[14].Text = "** " + string.Format("{0:c}", contributo_rimanenza - pag_inv_contributo_ammesso);
                            else
                                dgi.Cells[14].Text = string.Format("{0:c}", pag_inv_disavanzo_assengato);
                        }


                    }
                    else
                    {
                        dgi.Cells[10].Text = String.Format("{0:c}", pag_inv_contributo_ammesso);
                        dgi.Cells[14].Text = string.Format("{0:c}", pag_inv_disavanzo_assengato);
                    }
                }
                else
                {
                    dgi.Cells[8].Text = string.Format("{0:c}", pag_inv_contributo_richiesto);
                    dgi.Cells[10].Text = string.Format("{0:c}", pag_inv_contributo_ammesso);
                    dgi.Cells[14].Text = string.Format("{0:c}", pag_inv_disavanzo_assengato);
                }


                dgi.Cells[4].Text = string.Format("{0:c}", costo_investimenti);
                dgi.Cells[6].Text = string.Format("{0:N}", Math.Round(quota, 2, MidpointRounding.AwayFromZero));
                dgi.Cells[7].Text = string.Format("{0:c}", pag_inv_costo_richiesto);
                //dgi.Cells[8].Text = string.Format("{0:c}", pag_inv_contributo_richiesto);
                dgi.Cells[9].Text = string.Format("{0:c}", pag_inv_importo_ammesso);
                //dgi.Cells[10].Text = string.Format("{0:c}", pag_inv_contributo_ammesso);
                //dgi.Cells[14].Text = string.Format("{0:c}", pag_inv_disavanzo_assengato);
            }
        }

        #endregion

        void ControllaResponsabileBando()
        {   
            if(!abilitatoModifiche())
            {
                btnDecurtaMassivo.Enabled = false;
                btnEliminaDIrregolarita.Enabled = false;
                btnEliminaDisposizione.Enabled = false;
                btnSalvaDisposizione.Enabled = false;
                btnSalvaIrregolarita.Enabled = false;
                btnSalvaGiustificativiIrregolari.Enabled = false;
                btnDecurtaAnticipo.Enabled = false;
            }
        }


        private bool InCertificazione()
        {
            var certDecert = new CertDecertificazioneCollectionProvider().Find(null, null, null, Irregolarita.IdIrregolarita, "Irregolarita", null, null, null, null, null, null, null);
            if (certDecert.Count > 0)
                if (!(certDecert[0].Definitiva == null))
                    return certDecert[0].Definitiva;
            return false;
        }
        private bool abilitatoModifiche()
        {
            BandoResponsabiliCollectionProvider bandoResponsabiliCollectionProvider = new BandoResponsabiliCollectionProvider();
            BandoResponsabiliCollection bandoResponsabiliCollection;
            if (Irregolarita == null)
                bandoResponsabiliCollection = bandoResponsabiliCollectionProvider.Find(Progetto.IdBando, Operatore.Utente.IdUtente, null, 1, 1);
            else
                bandoResponsabiliCollection = bandoResponsabiliCollectionProvider.Find(Irregolarita.IdBando, Operatore.Utente.IdUtente, null, 1, 1);

            if (bandoResponsabiliCollection.Count != 1 && Operatore.Utente.Profilo != "Amministratore")
            {
                if (Operatore.Utente.IdProfilo == 82)//condizione Pellei
                {
                    return true;
                }
                return false;
            }
            return true;
        }

    }
}