CREATE PROCEDURE [dbo].[SpReportisticaBandi]
(
 @ID_BANDO INT = NULL, 
@COD_STATO VARCHAR(1)
)
AS
--
--DECLARE @ID_BANDO INT
--DECLARE @COD_STATO CHAR(1)
----SET @id_bando = 27
--SET @COD_STATO = 'L'

DECLARE @IDBANDO INT, @DESCRIZIONE VARCHAR(1000),@DATA_SCADENZA DATETIME,@DISPOSIZIONI_ATTUATIVE BIT,
	@NUM_DOMANDE INT, @TOTALE_INVESTIMENTI DECIMAL(18,2),@TOTALE_CONTRIBUTO DECIMAL(18,2), @TOT_INTERESSI DECIMAL(18,2), @VARIANTE INT,  
	@FASE_ISTRUTTORIA BIT, @PREMIO INT,  @INTERESSE_FILIERA BIT
--IMPOSTO LA FASE IN BASE ALLO STATO CHE MI VIENE PASSATO
SET @FASE_ISTRUTTORIA=(SELECT CASE WHEN F.ORDINE>2 THEN 1 ELSE 0 END  FROM STATO_PROGETTO S INNER JOIN FASI_PROCEDURALI F ON S.COD_FASE=F.COD_FASE WHERE COD_STATO=@COD_STATO)
IF @FASE_ISTRUTTORIA IS NULL SET @FASE_ISTRUTTORIA=0

CREATE TABLE #REPORT_BANDI(ID_BANDO INT,DESCRIZIONE VARCHAR(1000),DATA_SCADENZA DATETIME,DISPOSIZIONI_ATTUATIVE BIT, INTERESSE_FILIERA BIT, 
	NUM_DOMANDE INT, TOTALE_INVESTIMENTI DECIMAL(18,2),TOTALE_CONTRIBUTO DECIMAL(18,2),	TOT_INTERESSI DECIMAL(18,2))


DECLARE BANDI CURSOR FOR
(SELECT ID_BANDO, DESCRIZIONE, DATA_SCADENZA, DISPOSIZIONI_ATTUATIVE, INTERESSE_FILIERA FROM VBANDOATTUALE WHERE (@ID_BANDO IS NULL OR ID_BANDO=@ID_BANDO))

OPEN BANDI
FETCH NEXT FROM BANDI INTO @IDBANDO, @DESCRIZIONE, @DATA_SCADENZA, @DISPOSIZIONI_ATTUATIVE, @INTERESSE_FILIERA
WHILE @@FETCH_STATUS = 0
BEGIN
	--VERIFICO SE SUL BANDO è PRESENTE IL PREMIO IN CONTO CAPITALE
	SET @PREMIO = (SELECT COUNT(*) FROM BANDO_TIPO_INVESTIMENTI WHERE COD_TIPO_INVESTIMENTO=3 AND ID_BANDO = @IDBANDO)

	SET @TOTALE_INVESTIMENTI = 0		
	SET @TOTALE_CONTRIBUTO = 0
	SET @TOT_INTERESSI = 0
	SET @NUM_DOMANDE = 0

-- CASO DI MANIFESTAZIONE DI INTERESSE
IF(@INTERESSE_FILIERA = 1)
BEGIN
IF(@COD_STATO = 'P')
	SET @NUM_DOMANDE = (SELECT COUNT (*)  
							FROM MANIFESTAZIONE_DI_INTERESSE
							WHERE SEGNATURA IS NULL AND ID_BANDO = @IDBANDO)
ELSE IF(@COD_STATO = 'L')

	SET @NUM_DOMANDE = (SELECT COUNT (*)  
							FROM MANIFESTAZIONE_DI_INTERESSE
							WHERE SEGNATURA IS NOT NULL AND ID_BANDO = @IDBANDO)
END

ELSE 
BEGIN
--SE LA FASE ISTRUTTORIA è ZERO ALLORA FACCIO SEMPLICI SELECT
IF(@FASE_ISTRUTTORIA = 0)
BEGIN

	IF(@DISPOSIZIONI_ATTUATIVE = 1) 
			BEGIN
					SET @NUM_DOMANDE = (SELECT COUNT(P.ID_PROGETTO) FROM PROGETTO AS P INNER JOIN MON_STATO_PROGETTO AS M 
											ON P.ID_PROGETTO = M.ID_PROGETTO INNER JOIN
											(SELECT PIANO_INVESTIMENTI.ID_PROGETTO  FROM  PIANO_INVESTIMENTI GROUP BY PIANO_INVESTIMENTI.ID_PROGETTO)  
											AS PIANO ON P.ID_PROGETTO = PIANO.ID_PROGETTO
												WHERE (P.ID_BANDO = @IDBANDO) AND (M.COD_STATO = @COD_STATO))
					SET @DATA_SCADENZA = NULL
			END 
	ELSE 
			BEGIN
					SET @NUM_DOMANDE = (SELECT COUNT(P.ID_PROGETTO) FROM  PROGETTO P INNER JOIN MON_STATO_PROGETTO M on P.ID_PROGETTO = M.ID_PROGETTO 
								WHERE P.ID_BANDO=@IDBANDO AND M.COD_STATO=@COD_STATO)

					-- SE IL BANDO HA IL PREMIO CONTO CAPITALE, ALLORA CALCOLO IL VALORE DEL PREMIO PER OGNI PROGETTO E POI LO SOMMO AL TOTALE_CONTRIBUTO
--					IF(@PREMIO>0) BEGIN
--						DECLARE @ID_PROGETTO INT
--						DECLARE @PARZIALE DECIMAL(18,2)
--						DECLARE PROGETTI CURSOR FOR
--						(SELECT P.ID_PROGETTO FROM PROGETTO P INNER JOIN MON_STATO_PROGETTO M ON P.ID_PROGETTO = M.ID_PROGETTO 
--											WHERE ID_BANDO=@IDBANDO AND COD_STATO = @COD_STATO)
--						OPEN PROGETTI
--						FETCH NEXT FROM PROGETTI INTO @ID_PROGETTO
--						WHILE @@FETCH_STATUS=0 BEGIN
--							SET @PARZIALE=DBO.calcoloPremioContoCapitale(@ID_PROGETTO, 0, NULL)			
--							SET @TOTALE_CONTRIBUTO=ISNULL(@TOTALE_CONTRIBUTO, 0) + ISNULL(@PARZIALE, 0)
--							FETCH NEXT FROM PROGETTI INTO @ID_PROGETTO
--						END
--						CLOSE PROGETTI
--						DEALLOCATE PROGETTI
--					END 
			END

	SET @TOTALE_INVESTIMENTI = (SELECT ISNULL(SUM(CASE COD_TIPO_INVESTIMENTO WHEN 2 /*PER IL MUTUO SOMMO SOLO L'AMMONTARE*/ THEN ISNULL(COSTO_INVESTIMENTO,0)
									ELSE ISNULL(COSTO_INVESTIMENTO,0)+ISNULL(SPESE_GENERALI,0) END),0) 
									FROM VPIANO_INVESTIMENTI PI INNER JOIN MON_STATO_PROGETTO ON PI.ID_PROGETTO = MON_STATO_PROGETTO.ID_PROGETTO 
									INNER JOIN PROGETTO P ON PI.ID_PROGETTO = P.ID_PROGETTO  
									WHERE P.ID_BANDO = @IDBANDO AND
										ID_INVESTIMENTO_ORIGINALE IS NULL AND COD_STATO = @COD_STATO) 

	SET @TOTALE_CONTRIBUTO = ISNULL(@TOTALE_CONTRIBUTO, 0) + (SELECT ISNULL(SUM(ISNULL(CASE WHEN (B.IMPORTO_MAX IS NOT NULL AND B.IMPORTO_MAX < CONTRIBUTO) THEN B.IMPORTO_MAX ELSE CONTRIBUTO END,0)), 0)
									FROM (SELECT I.ID_PROGETTO, ISNULL(SUM(ISNULL(CONTRIBUTO_RICHIESTO, 0)), 0) AS CONTRIBUTO
										FROM  PIANO_INVESTIMENTI AS I INNER JOIN
										PROGETTO AS P ON I.ID_PROGETTO = P.ID_PROGETTO 
										INNER JOIN MON_STATO_PROGETTO M ON I.ID_PROGETTO = M.ID_PROGETTO
									WHERE ID_BANDO = @IDBANDO AND  ID_INVESTIMENTO_ORIGINALE IS NULL AND COD_STATO = @COD_STATO 
									GROUP BY I.ID_PROGETTO
									) AS Q1
									LEFT JOIN BANDO_TIPO_INVESTIMENTI AS B ON B.ID_BANDO = @IDBANDO AND B.COD_TIPO_INVESTIMENTO=7)

	SET @TOT_INTERESSI = (SELECT ISNULL(SUM(ISNULL(CASE WHEN (B.IMPORTO_MAX IS NOT NULL AND B.IMPORTO_MAX < CONTRIBUTO) THEN B.IMPORTO_MAX ELSE CONTRIBUTO END,0)), 0)
									FROM (SELECT I.ID_PROGETTO, SUM(ISNULL(CONTRIBUTO_RICHIESTO, 0)) AS CONTRIBUTO
										FROM  PIANO_INVESTIMENTI AS I INNER JOIN
										PROGETTO AS P ON I.ID_PROGETTO = P.ID_PROGETTO 
										INNER JOIN MON_STATO_PROGETTO M ON I.ID_PROGETTO = M.ID_PROGETTO
									WHERE ID_BANDO = @IDBANDO AND  ID_INVESTIMENTO_ORIGINALE IS NULL AND COD_STATO = @COD_STATO AND  I.COD_TIPO_INVESTIMENTO = 2
									GROUP BY I.ID_PROGETTO
									) AS Q1
									LEFT JOIN BANDO_TIPO_INVESTIMENTI AS B ON B.ID_BANDO = @IDBANDO AND B.COD_TIPO_INVESTIMENTO=7)

END
-- SE LA FASE ISTRUTTORIA è UGUALE A 1 UTILIZZO LE FUNZIONI CREATE DA GIORGIO 
ELSE 
BEGIN
		-- SE IL BANDO è UNA DISPOSIZIONE ATTUATIVA CALCOLO IL NUMERO DEI PROGETTI IN BASE AL FATTO CHE CI SIA UN INVESTIMENTO NEL PIANO DEGLI INVESTIMENTI
		IF(@DISPOSIZIONI_ATTUATIVE = 1) 
		BEGIN
			-- IL CALCOLO DELLE DOMANDE PRESENTATE PER UN BANDO VIENE EFFETTUATO TENENDO CONTO DEL FATTO CHE NELLA FASE DI AMMISSIBILITà 
			-- SI PUò AVERE PIù DI UNO STATO, QUINDI PRENDE L'ULTIMO ID_MON_STATO_PROGETTO PER UNA STESSA FASE.
			SET @NUM_DOMANDE = (SELECT COUNT(DISTINCT P.ID_PROGETTO) 
						FROM PROGETTO AS P INNER JOIN
                          (SELECT dbo.vMONSTATO_PROGETTO.ID_PROGETTO, dbo.vMONSTATO_PROGETTO.COD_STATO
                            FROM dbo.vMONSTATO_PROGETTO INNER JOIN
                                                       (SELECT MAX(ID_MON_STATO_PROGETTO) AS MAX_ID_MON_STATO_PROGETTO, ID_PROGETTO, COD_FASE
                                                        FROM  dbo.vMONSTATO_PROGETTO AS vMONSTATO_PROGETTO_1
														
                                                        GROUP BY ID_PROGETTO, COD_FASE) AS Q2 ON 
                                                   dbo.vMONSTATO_PROGETTO.ID_MON_STATO_PROGETTO = Q2.MAX_ID_MON_STATO_PROGETTO 
							WHERE COD_STATO = @COD_STATO AND Q2.MAX_ID_MON_STATO_PROGETTO IS NOT NULL) AS M ON P.ID_PROGETTO = M.ID_PROGETTO 
								INNER JOIN
									(SELECT PIANO_INVESTIMENTI.ID_PROGETTO  FROM  PIANO_INVESTIMENTI GROUP BY PIANO_INVESTIMENTI.ID_PROGETTO)  
									AS PIANO ON P.ID_PROGETTO = PIANO.ID_PROGETTO
							WHERE (P.ID_BANDO = @IDBANDO))

			SET @DATA_SCADENZA = NULL
		END 
		ELSE 
			SET @NUM_DOMANDE = (SELECT COUNT(DISTINCT P.ID_PROGETTO) 
						FROM PROGETTO AS P INNER JOIN
                          (SELECT dbo.vMONSTATO_PROGETTO.ID_PROGETTO, dbo.vMONSTATO_PROGETTO.COD_STATO
                            FROM dbo.vMONSTATO_PROGETTO INNER JOIN
                                                       (SELECT MAX(ID_MON_STATO_PROGETTO) AS MAX_ID_MON_STATO_PROGETTO, ID_PROGETTO, COD_FASE
                                                        FROM  dbo.vMONSTATO_PROGETTO AS vMONSTATO_PROGETTO_1													
                                                        GROUP BY ID_PROGETTO, COD_FASE) AS Q2 ON 
                                                   dbo.vMONSTATO_PROGETTO.ID_MON_STATO_PROGETTO = Q2.MAX_ID_MON_STATO_PROGETTO 
						WHERE COD_STATO = @COD_STATO AND Q2.MAX_ID_MON_STATO_PROGETTO IS NOT NULL) AS M ON P.ID_PROGETTO = M.ID_PROGETTO 
						WHERE (P.ID_BANDO = @IDBANDO))
		
	DECLARE @ID_PROGETT INT, @ORDINE INT 
	DECLARE PROGETTO CURSOR FOR ( 
								SELECT dbo.vMONSTATO_PROGETTO.ID_PROGETTO, ORDINE_FASE
                            FROM dbo.vMONSTATO_PROGETTO INNER JOIN
                                                       (
								SELECT  MAX(ID_MON_STATO_PROGETTO) AS MON_STATO, COD_FASE 
									FROM  vMONSTATO_PROGETTO MON INNER JOIN PROGETTO P ON MON.ID_PROGETTO = P.ID_PROGETTO
									WHERE  ID_BANDO = @IDBANDO
									GROUP BY P.ID_PROGETTO, COD_FASE) AS Q2 ON 
                                                   dbo.vMONSTATO_PROGETTO.ID_MON_STATO_PROGETTO = Q2.MON_STATO 
						WHERE COD_STATO = @COD_STATO AND Q2.MON_STATO IS NOT NULL)
	OPEN PROGETTO
	FETCH NEXT FROM PROGETTO INTO @ID_PROGETT, @ORDINE
	WHILE @@FETCH_STATUS=0 BEGIN
		IF(@ORDINE > 3) SET @VARIANTE = NULL
		-- NEL CASO SIA PRESENTE PIù DI UNA VARIANTE PRENDO L'ULTIMA
		ELSE  SET @VARIANTE = (SELECT MAX(I.ID_VARIANTE) 
								FROM PIANO_INVESTIMENTI AS I INNER JOIN PROGETTO AS P ON I.ID_PROGETTO = P.ID_PROGETTO INNER JOIN
									VARIANTI ON I.ID_VARIANTE = VARIANTI.ID_VARIANTE AND P.ID_PROGETTO = VARIANTI.ID_PROGETTO
								where (VARIANTI.APPROVATA = 1) and ((P.ID_PROG_INTEGRATO IS NULL AND P.ID_PROGETTO=@ID_PROGETT) OR P.ID_PROG_INTEGRATO=@ID_PROGETT)) 

		SET @TOTALE_INVESTIMENTI = @TOTALE_INVESTIMENTI + ISNULL((SELECT dbo.[calcoloCostoTotaleProgettoCorrelato] (@ID_PROGETT, 1, @VARIANTE)), 0)

		SET @TOTALE_CONTRIBUTO = @TOTALE_CONTRIBUTO + ISNULL((SELECT dbo.[calcoloContributoTotaleProgettoCorrelato] (@ID_PROGETT, 1, @VARIANTE)), 0)

		SET @TOT_INTERESSI = @TOT_INTERESSI +  ISNULL((SELECT dbo.[calcoloInteressiTotaleProgettoCorrelato] (@ID_PROGETT, 1, @VARIANTE)), 0)
		
--		IF(@DISPOSIZIONI_ATTUATIVE = 0)
--		BEGIN
--			--PREMIO IN CONTO CAPITALE
--			IF @PREMIO>0 BEGIN
--				DECLARE @AMMONTARE DECIMAL(18,2)
--				SET @AMMONTARE=DBO.calcoloPremioContoCapitale(@ID_PROGETT, @FASE_ISTRUTTORIA, @VARIANTE)
--				SET @TOTALE_CONTRIBUTO = ISNULL(@TOTALE_CONTRIBUTO, 0) + ISNULL(@AMMONTARE, 0)
--			END
--		END
		FETCH NEXT FROM PROGETTO INTO @ID_PROGETT, @ORDINE
		END
		CLOSE PROGETTO
		DEALLOCATE PROGETTO	
END
END
	INSERT INTO #REPORT_BANDI SELECT @IDBANDO, @DESCRIZIONE, @DATA_SCADENZA, @DISPOSIZIONI_ATTUATIVE, @INTERESSE_FILIERA,
				@NUM_DOMANDE, ISNULL(@TOTALE_INVESTIMENTI,0), ISNULL(@TOTALE_CONTRIBUTO, 0),
				ISNULL(@TOT_INTERESSI, 0)
	FETCH NEXT FROM BANDI INTO @IDBANDO, @DESCRIZIONE, @DATA_SCADENZA, @DISPOSIZIONI_ATTUATIVE, @INTERESSE_FILIERA
END

CLOSE BANDI
DEALLOCATE BANDI

SELECT ID_BANDO, DESCRIZIONE, DATA_SCADENZA, DISPOSIZIONI_ATTUATIVE, NUM_DOMANDE, 
	TOTALE_INVESTIMENTI, TOTALE_CONTRIBUTO,	TOT_INTERESSI
FROM #REPORT_BANDI 
DROP TABLE #REPORT_BANDI
