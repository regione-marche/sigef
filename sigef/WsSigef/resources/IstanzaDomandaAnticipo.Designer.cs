// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 6.0.106.0. www.xsd2code.com
//    {"TargetFramework":"Net47","NameSpace":"WsSigef","Properties":{"AutomaticProperties":true},"XmlAttribute":{"Enabled":true},"ClassParams":{},"Serialization":{"ShouldSerialize":{},"AdditionalSerializers":{},"XmlSerializerEvent":{},"XmlOutput":{},"JsonOutput":{},"Enabled":true},"Miscellaneous":{}}
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace WsSigef
{
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Runtime.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using System.Xml;
    using System.IO;
    using System.Text;
    using System.Collections.Generic;


    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.9037.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true)]
    [XmlRootAttribute(Namespace = "", IsNullable = false)]
    public partial class DomandaAnticipo
    {
        private static XmlSerializer _serializerXml;

        public DatiGeneraliDomandaAnticipoType DatiGenerali { get; set; }
        public DomandaAnticipoFidejussioniImpresa FidejussioniImpresa { get; set; }
        public DomandaAnticipoRequisitiDomandaAnticipo RequisitiDomandaAnticipo { get; set; }
        public DomandaAnticipoIndicatoriMonitoraggio IndicatoriMonitoraggio { get; set; }

        public DomandaAnticipo()
        {
            IndicatoriMonitoraggio = new DomandaAnticipoIndicatoriMonitoraggio();
            RequisitiDomandaAnticipo = new DomandaAnticipoRequisitiDomandaAnticipo();
            FidejussioniImpresa = new DomandaAnticipoFidejussioniImpresa();
            DatiGenerali = new DatiGeneraliDomandaAnticipoType();
        }

        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(DomandaAnticipo));
                }
                return _serializerXml;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serialize DomandaAnticipo object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes DomandaAnticipo object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output DomandaAnticipo object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out DomandaAnticipo obj, out Exception exception)
        {
            exception = null;
            obj = default(DomandaAnticipo);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out DomandaAnticipo obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static DomandaAnticipo Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((DomandaAnticipo)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static DomandaAnticipo Deserialize(Stream s)
        {
            return ((DomandaAnticipo)(SerializerXml.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current DomandaAnticipo object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an DomandaAnticipo object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output DomandaAnticipo object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out DomandaAnticipo obj, out Exception exception)
        {
            exception = null;
            obj = default(DomandaAnticipo);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out DomandaAnticipo obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static DomandaAnticipo LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.9037.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    public partial class DatiGeneraliDomandaAnticipoType
    {
        private static XmlSerializer _serializerXml;

        public string SistemaMittente { get; set; }
        [XmlElement(DataType = "date")]
        public System.DateTime DataPresentazione { get; set; }
        public string SegnaturaProtocollo { get; set; }
        public int IdProgettoSigef { get; set; }
        public decimal ImportoAnticipo { get; set; }
        public string CodiceFondo { get; set; }

        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(DatiGeneraliDomandaAnticipoType));
                }
                return _serializerXml;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serialize DatiGeneraliDomandaAnticipoType object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes DatiGeneraliDomandaAnticipoType object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output DatiGeneraliDomandaAnticipoType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out DatiGeneraliDomandaAnticipoType obj, out Exception exception)
        {
            exception = null;
            obj = default(DatiGeneraliDomandaAnticipoType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out DatiGeneraliDomandaAnticipoType obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static DatiGeneraliDomandaAnticipoType Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((DatiGeneraliDomandaAnticipoType)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static DatiGeneraliDomandaAnticipoType Deserialize(Stream s)
        {
            return ((DatiGeneraliDomandaAnticipoType)(SerializerXml.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current DatiGeneraliDomandaAnticipoType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an DatiGeneraliDomandaAnticipoType object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output DatiGeneraliDomandaAnticipoType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out DatiGeneraliDomandaAnticipoType obj, out Exception exception)
        {
            exception = null;
            obj = default(DatiGeneraliDomandaAnticipoType);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out DatiGeneraliDomandaAnticipoType obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static DatiGeneraliDomandaAnticipoType LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.9037.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    public partial class IndicatoreDAType
    {
        private static XmlSerializer _serializerXml;

        public string CodiceProgrammazione { get; set; }
        public string Codice { get; set; }
        public decimal Valore { get; set; }

        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(IndicatoreDAType));
                }
                return _serializerXml;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serialize IndicatoreDAType object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes IndicatoreDAType object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output IndicatoreDAType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out IndicatoreDAType obj, out Exception exception)
        {
            exception = null;
            obj = default(IndicatoreDAType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out IndicatoreDAType obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static IndicatoreDAType Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((IndicatoreDAType)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static IndicatoreDAType Deserialize(Stream s)
        {
            return ((IndicatoreDAType)(SerializerXml.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current IndicatoreDAType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an IndicatoreDAType object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output IndicatoreDAType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out IndicatoreDAType obj, out Exception exception)
        {
            exception = null;
            obj = default(IndicatoreDAType);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out IndicatoreDAType obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static IndicatoreDAType LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.9037.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    public partial class RequisitoDAType
    {
        private static XmlSerializer _serializerXml;

        public string ChiaveDescrizione { get; set; }
        public string Valore { get; set; }

        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(RequisitoDAType));
                }
                return _serializerXml;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serialize RequisitoDAType object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes RequisitoDAType object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output RequisitoDAType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out RequisitoDAType obj, out Exception exception)
        {
            exception = null;
            obj = default(RequisitoDAType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out RequisitoDAType obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static RequisitoDAType Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((RequisitoDAType)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static RequisitoDAType Deserialize(Stream s)
        {
            return ((RequisitoDAType)(SerializerXml.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current RequisitoDAType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an RequisitoDAType object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output RequisitoDAType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out RequisitoDAType obj, out Exception exception)
        {
            exception = null;
            obj = default(RequisitoDAType);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out RequisitoDAType obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static RequisitoDAType LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.9037.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    public partial class FidejussioneType
    {
        private static XmlSerializer _serializerXml;

        public string Numero { get; set; }
        public string Barcode { get; set; }
        [XmlElement(DataType = "date")]
        public System.DateTime DataSottoscrizione { get; set; }
        public string LuogoSottoscrizione { get; set; }
        public decimal Importo { get; set; }
        public decimal AmmontareRichiesto { get; set; }
        [XmlElement(DataType = "date")]
        public System.DateTime DataFineLavori { get; set; }
        [XmlElement(DataType = "date")]
        public System.DateTime DataScadenza { get; set; }
        public string PartitaIvaGarante { get; set; }
        public string RagioneSocialeGarante { get; set; }
        public string LocalitaGarante { get; set; }
        public string NomeRappresentanteLegaleGarante { get; set; }
        public string CognomeRappresentanteLegaleGarante { get; set; }
        public string CodiceFiscaleRappresentanteLegaleGarante { get; set; }
        [XmlElement(DataType = "date")]
        public System.DateTime DataNascitaRappresentanteLegaleGarante { get; set; }

        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(FidejussioneType));
                }
                return _serializerXml;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serialize FidejussioneType object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes FidejussioneType object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output FidejussioneType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out FidejussioneType obj, out Exception exception)
        {
            exception = null;
            obj = default(FidejussioneType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out FidejussioneType obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static FidejussioneType Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((FidejussioneType)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static FidejussioneType Deserialize(Stream s)
        {
            return ((FidejussioneType)(SerializerXml.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current FidejussioneType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an FidejussioneType object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output FidejussioneType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out FidejussioneType obj, out Exception exception)
        {
            exception = null;
            obj = default(FidejussioneType);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out FidejussioneType obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static FidejussioneType LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.9037.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true)]
    public partial class DomandaAnticipoFidejussioniImpresa
    {
        private static XmlSerializer _serializerXml;
        [XmlElement("FidejussioneImpresa")]
        public List<DomandaAnticipoFidejussioniImpresaFidejussioneImpresa> FidejussioneImpresa { get; set; }

        public DomandaAnticipoFidejussioniImpresa()
        {
            FidejussioneImpresa = new List<DomandaAnticipoFidejussioniImpresaFidejussioneImpresa>();
        }

        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(DomandaAnticipoFidejussioniImpresa));
                }
                return _serializerXml;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serialize DomandaAnticipoFidejussioniImpresa object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes DomandaAnticipoFidejussioniImpresa object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output DomandaAnticipoFidejussioniImpresa object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out DomandaAnticipoFidejussioniImpresa obj, out Exception exception)
        {
            exception = null;
            obj = default(DomandaAnticipoFidejussioniImpresa);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out DomandaAnticipoFidejussioniImpresa obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static DomandaAnticipoFidejussioniImpresa Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((DomandaAnticipoFidejussioniImpresa)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static DomandaAnticipoFidejussioniImpresa Deserialize(Stream s)
        {
            return ((DomandaAnticipoFidejussioniImpresa)(SerializerXml.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current DomandaAnticipoFidejussioniImpresa object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an DomandaAnticipoFidejussioniImpresa object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output DomandaAnticipoFidejussioniImpresa object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out DomandaAnticipoFidejussioniImpresa obj, out Exception exception)
        {
            exception = null;
            obj = default(DomandaAnticipoFidejussioniImpresa);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out DomandaAnticipoFidejussioniImpresa obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static DomandaAnticipoFidejussioniImpresa LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.9037.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true)]
    public partial class DomandaAnticipoFidejussioniImpresaFidejussioneImpresa
    {
        private static XmlSerializer _serializerXml;

        public string PartitaIvaImpresa { get; set; }
        public bool FlagRichiestaAnticipo { get; set; }
        [XmlElement(IsNullable = true)]
        public FidejussioneType Fidejussione { get; set; }

        public DomandaAnticipoFidejussioniImpresaFidejussioneImpresa()
        {
            Fidejussione = new FidejussioneType();
        }

        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(DomandaAnticipoFidejussioniImpresaFidejussioneImpresa));
                }
                return _serializerXml;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serialize DomandaAnticipoFidejussioniImpresaFidejussioneImpresa object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes DomandaAnticipoFidejussioniImpresaFidejussioneImpresa object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output DomandaAnticipoFidejussioniImpresaFidejussioneImpresa object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out DomandaAnticipoFidejussioniImpresaFidejussioneImpresa obj, out Exception exception)
        {
            exception = null;
            obj = default(DomandaAnticipoFidejussioniImpresaFidejussioneImpresa);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out DomandaAnticipoFidejussioniImpresaFidejussioneImpresa obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static DomandaAnticipoFidejussioniImpresaFidejussioneImpresa Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((DomandaAnticipoFidejussioniImpresaFidejussioneImpresa)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static DomandaAnticipoFidejussioniImpresaFidejussioneImpresa Deserialize(Stream s)
        {
            return ((DomandaAnticipoFidejussioniImpresaFidejussioneImpresa)(SerializerXml.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current DomandaAnticipoFidejussioniImpresaFidejussioneImpresa object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an DomandaAnticipoFidejussioniImpresaFidejussioneImpresa object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output DomandaAnticipoFidejussioniImpresaFidejussioneImpresa object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out DomandaAnticipoFidejussioniImpresaFidejussioneImpresa obj, out Exception exception)
        {
            exception = null;
            obj = default(DomandaAnticipoFidejussioniImpresaFidejussioneImpresa);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out DomandaAnticipoFidejussioniImpresaFidejussioneImpresa obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static DomandaAnticipoFidejussioniImpresaFidejussioneImpresa LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.9037.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true)]
    public partial class DomandaAnticipoRequisitiDomandaAnticipo
    {
        private static XmlSerializer _serializerXml;
        [XmlElement("RequisitoDomandaAnticipo")]
        public List<RequisitoDAType> RequisitoDomandaAnticipo { get; set; }

        public DomandaAnticipoRequisitiDomandaAnticipo()
        {
            RequisitoDomandaAnticipo = new List<RequisitoDAType>();
        }

        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(DomandaAnticipoRequisitiDomandaAnticipo));
                }
                return _serializerXml;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serialize DomandaAnticipoRequisitiDomandaAnticipo object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes DomandaAnticipoRequisitiDomandaAnticipo object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output DomandaAnticipoRequisitiDomandaAnticipo object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out DomandaAnticipoRequisitiDomandaAnticipo obj, out Exception exception)
        {
            exception = null;
            obj = default(DomandaAnticipoRequisitiDomandaAnticipo);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out DomandaAnticipoRequisitiDomandaAnticipo obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static DomandaAnticipoRequisitiDomandaAnticipo Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((DomandaAnticipoRequisitiDomandaAnticipo)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static DomandaAnticipoRequisitiDomandaAnticipo Deserialize(Stream s)
        {
            return ((DomandaAnticipoRequisitiDomandaAnticipo)(SerializerXml.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current DomandaAnticipoRequisitiDomandaAnticipo object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an DomandaAnticipoRequisitiDomandaAnticipo object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output DomandaAnticipoRequisitiDomandaAnticipo object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out DomandaAnticipoRequisitiDomandaAnticipo obj, out Exception exception)
        {
            exception = null;
            obj = default(DomandaAnticipoRequisitiDomandaAnticipo);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out DomandaAnticipoRequisitiDomandaAnticipo obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static DomandaAnticipoRequisitiDomandaAnticipo LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.9037.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true)]
    public partial class DomandaAnticipoIndicatoriMonitoraggio
    {
        private static XmlSerializer _serializerXml;
        [XmlElement("Indicatore")]
        public List<IndicatoreDAType> Indicatore { get; set; }

        public DomandaAnticipoIndicatoriMonitoraggio()
        {
            Indicatore = new List<IndicatoreDAType>();
        }

        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(DomandaAnticipoIndicatoriMonitoraggio));
                }
                return _serializerXml;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serialize DomandaAnticipoIndicatoriMonitoraggio object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes DomandaAnticipoIndicatoriMonitoraggio object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output DomandaAnticipoIndicatoriMonitoraggio object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out DomandaAnticipoIndicatoriMonitoraggio obj, out Exception exception)
        {
            exception = null;
            obj = default(DomandaAnticipoIndicatoriMonitoraggio);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out DomandaAnticipoIndicatoriMonitoraggio obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static DomandaAnticipoIndicatoriMonitoraggio Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((DomandaAnticipoIndicatoriMonitoraggio)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static DomandaAnticipoIndicatoriMonitoraggio Deserialize(Stream s)
        {
            return ((DomandaAnticipoIndicatoriMonitoraggio)(SerializerXml.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current DomandaAnticipoIndicatoriMonitoraggio object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an DomandaAnticipoIndicatoriMonitoraggio object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output DomandaAnticipoIndicatoriMonitoraggio object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out DomandaAnticipoIndicatoriMonitoraggio obj, out Exception exception)
        {
            exception = null;
            obj = default(DomandaAnticipoIndicatoriMonitoraggio);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out DomandaAnticipoIndicatoriMonitoraggio obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static DomandaAnticipoIndicatoriMonitoraggio LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
}
#pragma warning restore
