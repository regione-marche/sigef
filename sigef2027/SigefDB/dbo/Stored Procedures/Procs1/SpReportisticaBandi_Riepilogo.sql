CREATE PROCEDURE [dbo].[SpReportisticaBandi_Riepilogo]
(
@ID_BANDO INT = NULL,
@ID_PROGRAMMAZIONE INT = NULL,
@COD_STATO VARCHAR(1)
)
AS

--DECLARE @ID_BANDO INT, @COD_STATO VARCHAR(1), @ID_PROGRAMMAZIONE VARCHAR(10)
----SET @ID_BANDO = 110
--SET @COD_STATO = 'L'
--SET @ID_PROGRAMMAZIONE = 10

DECLARE @IDBANDO INT, @DESCRIZIONE VARCHAR(1000),@DATA_SCADENZA DATETIME,@DISPOSIZIONI_ATTUATIVE BIT,
	@NUM_DOMANDE INT, @TOTALE_INVESTIMENTI DECIMAL(18,2),@TOTALE_CONTRIBUTO DECIMAL(18,2), @TOT_INTERESSI DECIMAL(18,2), @VARIANTE INT,  
	@FASE_ISTRUTTORIA BIT, @PREMIO INT,  @INTERESSE_FILIERA BIT, @DATA_AGGIORNAMENTO DATETIME, @DATA_GRADUATORIA DATETIME
----IMPOSTO LA FASE IN BASE ALLO STATO CHE MI VIENE PASSATO
--SET @FASE_ISTRUTTORIA=(SELECT CASE WHEN F.ORDINE>2 THEN 1 ELSE 0 END  FROM STATO_PROGETTO S INNER JOIN FASI_PROCEDURALI F ON S.COD_FASE=F.COD_FASE WHERE COD_STATO=@COD_STATO)
--IF @FASE_ISTRUTTORIA IS NULL SET @FASE_ISTRUTTORIA=0

--CREATE TABLE #REPORT_BANDI(ID_BANDO INT, DESCRIZIONE VARCHAR(1000),DATA_SCADENZA DATETIME,DISPOSIZIONI_ATTUATIVE BIT, INTERESSE_FILIERA BIT, 
--	NUM_DOMANDE INT, TOTALE_INVESTIMENTI DECIMAL(18,2),TOTALE_CONTRIBUTO DECIMAL(18,2),	TOT_INTERESSI DECIMAL(18,2))
--IF(@MISURA IS NOT NULL) 
--BEGIN 
DECLARE BANDI CURSOR FOR
( 
/* PROGRAMMAZIONE 2007 2013*/
  SELECT ID_BANDO, DESCRIZIONE, DATA_SCADENZA, DISPOSIZIONI_ATTUATIVE, INTERESSE_FILIERA  FROM vBANDO WHERE ID_BANDO IN (  
  SELECT DISTINCT ID_BANDO FROM vBANDO_PROGRAMMAZIONE WHERE ID_BANDO IN (SELECT ID_BANDO FROM vBANDO_PROGRAMMAZIONE WHERE ID_PROGRAMMAZIONE IN (SELECT ID FROM zPROGRAMMAZIONE WHERE ID_PADRE = @ID_PROGRAMMAZIONE) AND								   MISURA_PREVALENTE = 1 )) AND DISPOSIZIONI_ATTUATIVE = 0
   UNION 
  SELECT ID_BANDO, DESCRIZIONE, DATA_SCADENZA, DISPOSIZIONI_ATTUATIVE, INTERESSE_FILIERA FROM vBANDO WHERE ID_BANDO IN (  
  SELECT DISTINCT ID_DISPOSIZIONI_ATTUATIVE FROM vBANDO_PROGRAMMAZIONE WHERE ID_BANDO IN (SELECT ID_BANDO FROM vBANDO_PROGRAMMAZIONE WHERE ID_PROGRAMMAZIONE IN  (SELECT ID FROM zPROGRAMMAZIONE WHERE ID_PADRE = @ID_PROGRAMMAZIONE) AND MISURA_PREVALENTE = 1 ))

UNION/* PROGRAMMAZIONE 2014 2020*/
    SELECT ID_BANDO, DESCRIZIONE, DATA_SCADENZA, DISPOSIZIONI_ATTUATIVE, INTERESSE_FILIERA  FROM vBANDO WHERE ID_BANDO IN (  
  SELECT DISTINCT ID_BANDO FROM vBANDO_PROGRAMMAZIONE WHERE ID_BANDO IN (SELECT ID_BANDO FROM vBANDO_PROGRAMMAZIONE WHERE ID_PADRE IN (SELECT ID FROM zPROGRAMMAZIONE WHERE ID_PADRE in  (SELECT ID FROM zPROGRAMMAZIONE WHERE ID_PADRE = @ID_PROGRAMMAZIONE) ) AND MISURA_PREVALENTE = 1 )) AND DISPOSIZIONI_ATTUATIVE = 0
   UNION 
  SELECT ID_BANDO, DESCRIZIONE, DATA_SCADENZA, DISPOSIZIONI_ATTUATIVE, INTERESSE_FILIERA FROM vBANDO WHERE ID_BANDO IN (  
  SELECT DISTINCT ID_DISPOSIZIONI_ATTUATIVE FROM vBANDO_PROGRAMMAZIONE WHERE ID_BANDO IN (SELECT ID_BANDO FROM vBANDO_PROGRAMMAZIONE WHERE ID_PADRE IN (SELECT ID FROM zPROGRAMMAZIONE WHERE ID_PADRE in  (SELECT ID FROM zPROGRAMMAZIONE WHERE ID_PADRE = @ID_PROGRAMMAZIONE) ) AND MISURA_PREVALENTE = 1))

	--SELECT DISTINCT B.ID_BANDO, DESCRIZIONE, (
	--CASE WHEN DISPOSIZIONI_ATTUATIVE = 1 THEN (SELECT DATA_SCADENZA 
	--FROM vBANDO WHERE ID_BANDO = (SELECT TOP(1) ID_BANDO FROM PROGRAMMAZIONE_BANDO 
	--WHERE ID_DISPOSIZIONI_ATTUATIVE = B.ID_BANDO)) ELSE DATA_SCADENZA END) AS DATA_SCADENZA, 
	--DISPOSIZIONI_ATTUATIVE, INTERESSE_FILIERA 
	--FROM VBANDO B
	--INNER JOIN 
	--PROGRAMMAZIONE_BANDO PB ON B.ID_BANDO = ISNULL(PB.ID_DISPOSIZIONI_ATTUATIVE, PB.ID_BANDO)
	--WHERE PB.ID_BANDO IN (
	--SELECT ID_BANDO FROM vBANDO_PROGRAMMAZIONE B INNER JOIN 
	--		zPROGRAMMAZIONE P ON B.ID_PROGRAMMAZIONE=P.ID
	--WHERE ID_PSR = PARSENAME(REPLACE(@MISURA, '|', '.'), 4)
	--AND COD_ASSE = PARSENAME(REPLACE(@MISURA, '|', '.'), 2)
	--AND COD_MISURA = PARSENAME(REPLACE(@MISURA, '|', '.'), 1))
	--AND B.ID_BANDO NOT IN(55,56,57) 
)
--END 
--ELSE IF(@MISURA IS NULL) 
--BEGIN 
--DECLARE BANDI CURSOR FOR
--(
--	SELECT ID_BANDO, DESCRIZIONE, (
--	CASE WHEN DISPOSIZIONI_ATTUATIVE = 1 THEN (SELECT DATA_SCADENZA 
--	FROM VBANDO WHERE ID_BANDO = (SELECT TOP(1) ID_BANDO FROM PROGRAMMAZIONE_BANDO 
--	WHERE ID_DISPOSIZIONI_ATTUATIVE = B.ID_BANDO)) ELSE DATA_SCADENZA END) AS DATA_SCADENZA, 
--	DISPOSIZIONI_ATTUATIVE, INTERESSE_FILIERA 
--	FROM VBANDO B
--	WHERE ((@ID_BANDO IS NOT NULL AND ID_BANDO =@ID_BANDO) OR @ID_BANDO IS NULL)
--	AND ID_BANDO NOT IN(55,56,57) -- ESCLUDO I PRE-BANDI!
--)
--END
OPEN BANDI
FETCH NEXT FROM BANDI INTO @IDBANDO, @DESCRIZIONE, @DATA_SCADENZA, @DISPOSIZIONI_ATTUATIVE, @INTERESSE_FILIERA
WHILE @@FETCH_STATUS = 0
BEGIN
	--VERIFICO SE SUL BANDO è PRESENTE IL PREMIO IN CONTO CAPITALE
	SET @PREMIO = (SELECT COUNT(*) FROM BANDO_TIPO_INVESTIMENTI WHERE COD_TIPO_INVESTIMENTO=3 AND ID_BANDO = @IDBANDO)

	SET @TOTALE_INVESTIMENTI = 0		
	SET @TOTALE_CONTRIBUTO = 0
	SET @TOT_INTERESSI = 0
	SET @NUM_DOMANDE = 0

	SET @DATA_AGGIORNAMENTO = (SELECT DATA_AGGIORNAMENTO FROM REPORTISTICA_BANDO WHERE ID_BANDO = @IDBANDO  AND COD_STATO = @COD_STATO)
	SET @DATA_GRADUATORIA = (SELECT MAX(DATA) FROM PROGETTO_STORICO M INNER JOIN PROGETTO P ON M.ID_PROGETTO = P.ID_PROGETTO 
												WHERE ID_BANDO = @IDBANDO AND COD_STATO = @COD_STATO)

-- MANIFESTAZIONE DI INTERESSE
IF(@INTERESSE_FILIERA = 1)
BEGIN
IF(@COD_STATO = 'P')
BEGIN 
	SET @NUM_DOMANDE = (SELECT COUNT (*)  
							FROM MANIFESTAZIONE_DI_INTERESSE
							WHERE SEGNATURA IS NULL AND ID_BANDO = @IDBANDO)
END 
ELSE IF(@COD_STATO = 'L')
	SET @NUM_DOMANDE = (SELECT COUNT (*)  
							FROM MANIFESTAZIONE_DI_INTERESSE
							WHERE SEGNATURA IS NOT NULL AND ID_BANDO = @IDBANDO)
END

ELSE 


BEGIN -- 
--SE LA FASE ISTRUTTORIA è ZERO ALLORA FACCIO SEMPLICI SELECT
IF(@COD_STATO IN ('P', 'I', 'Q', 'L'))
BEGIN
	IF((@COD_STATO = 'P' AND (@DATA_AGGIORNAMENTO IS NULL OR @DATA_AGGIORNAMENTO <= @DATA_SCADENZA)) OR
		(@COD_STATO IN ('I','Q','L')  
			AND (@DATA_AGGIORNAMENTO IS NULL OR @DATA_AGGIORNAMENTO <= ISNULL(@DATA_GRADUATORIA, @DATA_AGGIORNAMENTO))))
	BEGIN
	IF(@DISPOSIZIONI_ATTUATIVE = 1) 
			BEGIN

					SET @NUM_DOMANDE = (SELECT COUNT(DISTINCT P.ID_PROGETTO) 
										FROM PROGETTO AS P INNER JOIN PROGETTO_STORICO AS M 
											ON P.ID_PROGETTO = M.ID_PROGETTO INNER JOIN
											(SELECT PIANO_INVESTIMENTI.ID_PROGETTO  FROM  PIANO_INVESTIMENTI GROUP BY PIANO_INVESTIMENTI.ID_PROGETTO)  
											AS PIANO ON P.ID_PROGETTO = PIANO.ID_PROGETTO
												WHERE (P.ID_BANDO = @IDBANDO) AND (M.COD_STATO = @COD_STATO))
					--SET @DATA_SCADENZA = NULL
			END 
	ELSE 

			SELECT @NUM_DOMANDE = COUNT(DISTINCT P.ID_PROGETTO)
					FROM  PROGETTO P INNER JOIN PROGETTO_STORICO M on P.ID_PROGETTO = M.ID_PROGETTO 
					WHERE P.ID_BANDO=@IDBANDO AND M.COD_STATO=@COD_STATO


		IF(@IDBANDO IN(114,89, 165, 260,261))
			SELECT
			@TOTALE_CONTRIBUTO =
			SUM(ISNULL(dbo.calcoloContributoTotaleProgetto (P.ID_PROGETTO, 0,null), 0))
			FROM PROGETTO P inner join PROGETTO_STORICO m
			ON P.ID_PROGETTO = M.ID_PROGETTO 
			WHERE ID_BANDO = @IDBANDO and cod_stato= @COD_STATO

		ELSE 	
			SET @TOTALE_CONTRIBUTO = ISNULL((SELECT ISNULL(SUM(ISNULL(CASE WHEN (B.IMPORTO_MAX IS NOT NULL AND B.IMPORTO_MAX < CONTRIBUTO) THEN B.IMPORTO_MAX ELSE CONTRIBUTO END,0)), 0)
			+  SUM(ISNULL(DBO.calcoloPremioContoCapitale(Q1.ID_PROGETTO, 0, NULL), 0))
						FROM (SELECT P.ID_PROGETTO, ISNULL(SUM(ISNULL(CONTRIBUTO_RICHIESTO, 0)), 0) AS CONTRIBUTO
								FROM PROGETTO P
								INNER JOIN PROGETTO_STORICO M ON P.ID_PROGETTO = M.ID_PROGETTO
								LEFT JOIN PIANO_INVESTIMENTI AS I ON I.ID_PROGETTO = P.ID_PROGETTO
						WHERE ID_BANDO = @IDBANDO AND  ID_INVESTIMENTO_ORIGINALE IS NULL AND COD_STATO = @COD_STATO AND ID_VARIANTE IS NULL
						GROUP BY P.ID_PROGETTO
						) AS Q1
						LEFT JOIN BANDO_TIPO_INVESTIMENTI AS B ON B.ID_BANDO = @IDBANDO AND B.COD_TIPO_INVESTIMENTO=7), 0)

			SET @TOTALE_INVESTIMENTI = (SELECT ISNULL(SUM(CASE COD_TIPO_INVESTIMENTO WHEN 2 /*PER IL MUTUO SOMMO SOLO L'AMMONTARE*/ THEN ISNULL(COSTO_INVESTIMENTO,0)
											ELSE ISNULL(COSTO_INVESTIMENTO,0)+ISNULL(SPESE_GENERALI,0) END),0) 
											FROM VPIANO_INVESTIMENTI PI INNER JOIN PROGETTO_STORICO ON PI.ID_PROGETTO = PROGETTO_STORICO.ID_PROGETTO 
											INNER JOIN PROGETTO P ON PI.ID_PROGETTO = P.ID_PROGETTO  
											WHERE P.ID_BANDO = @IDBANDO AND ID_VARIANTE IS NULL AND
												ID_INVESTIMENTO_ORIGINALE IS NULL AND COD_STATO = @COD_STATO) 

			SET @TOT_INTERESSI = (SELECT ISNULL(SUM(ISNULL(CASE WHEN (B.IMPORTO_MAX IS NOT NULL AND B.IMPORTO_MAX < CONTRIBUTO) THEN B.IMPORTO_MAX ELSE CONTRIBUTO END,0)), 0)
											FROM (SELECT I.ID_PROGETTO, SUM(ISNULL(CONTRIBUTO_RICHIESTO, 0)) AS CONTRIBUTO
												FROM  PIANO_INVESTIMENTI AS I INNER JOIN
												PROGETTO AS P ON I.ID_PROGETTO = P.ID_PROGETTO 
												INNER JOIN PROGETTO_STORICO M ON I.ID_PROGETTO = M.ID_PROGETTO
											WHERE ID_BANDO = @IDBANDO AND  ID_INVESTIMENTO_ORIGINALE IS NULL AND ID_VARIANTE IS NULL
												AND COD_STATO = @COD_STATO AND  I.COD_TIPO_INVESTIMENTO = 2
											GROUP BY I.ID_PROGETTO
											) AS Q1
											LEFT JOIN BANDO_TIPO_INVESTIMENTI AS B ON B.ID_BANDO = @IDBANDO AND B.COD_TIPO_INVESTIMENTO=7)


END -- FINE DEL CONTROLLO DELLA DATA DI AGGIORNAMENTO
END -- FINE DEL CONTROLLO DELLO STATO DEL BANDO

-- SE LA FASE è DA AMMISSIBILE IN POI ESEGUO IL SEGUENTE CODICE
ELSE IF((@COD_STATO IN ('A', 'B')) OR (@COD_STATO IN ('F', 'N') AND (@PREMIO > 0)))
BEGIN 
	IF((@DATA_AGGIORNAMENTO IS NULL OR @DATA_AGGIORNAMENTO <= ISNULL(@DATA_GRADUATORIA, @DATA_AGGIORNAMENTO)))
	BEGIN

---- SE IL BANDO è UNA DISPOSIZIONE ATTUATIVA CALCOLO IL NUMERO DEI PROGETTI IN BASE AL FATTO CHE CI SIA UN INVESTIMENTO NEL PIANO DEGLI INVESTIMENTI
		IF(@DISPOSIZIONI_ATTUATIVE = 1) 
		BEGIN
			-- IL CALCOLO DELLE DOMANDE PRESENTATE PER UN BANDO VIENE EFFETTUATO TENENDO CONTO DEL FATTO CHE NELLA FASE DI AMMISSIBILITà 
			-- SI PUò AVERE PIù DI UNO STATO, QUINDI PRENDE L'ULTIMO ID_MON_STATO_PROGETTO PER UNA STESSA FASE.
			SET @NUM_DOMANDE = (SELECT COUNT(DISTINCT P.ID_PROGETTO) 
						FROM PROGETTO AS P INNER JOIN
                          (SELECT PS.ID_PROGETTO, COD_STATO
                            FROM PROGETTO_STORICO PS INNER JOIN
                                                       (SELECT MAX(ID) AS MAX_ID, ID_PROGETTO, COD_FASE
                                                        FROM  VPROGETTO_STORICO AS PS														
                                                        GROUP BY ID_PROGETTO, COD_FASE) AS Q2 ON PS.ID = Q2.MAX_ID 
							WHERE COD_STATO = @COD_STATO AND Q2.MAX_ID IS NOT NULL) AS M ON P.ID_PROGETTO = M.ID_PROGETTO 
								INNER JOIN
									(SELECT PIANO_INVESTIMENTI.ID_PROGETTO  FROM  PIANO_INVESTIMENTI GROUP BY PIANO_INVESTIMENTI.ID_PROGETTO)  
									AS PIANO ON P.ID_PROGETTO = PIANO.ID_PROGETTO
							WHERE (P.ID_BANDO = @IDBANDO))

			SET @DATA_SCADENZA = NULL
		END 
		ELSE 
			SET @NUM_DOMANDE = (SELECT COUNT(DISTINCT P.ID_PROGETTO) 
						FROM PROGETTO AS P INNER JOIN
                          (SELECT PS.ID_PROGETTO, PS.COD_STATO
                            FROM PROGETTO_STORICO PS INNER JOIN
                                                       (SELECT MAX(ID) AS MAX_ID, ID_PROGETTO, COD_FASE
                                                        FROM  VPROGETTO_STORICO AS PS_1													
                                                        GROUP BY ID_PROGETTO, COD_FASE) AS Q2 ON PS.ID = Q2.MAX_ID
						WHERE COD_STATO = @COD_STATO AND Q2.MAX_ID IS NOT NULL) AS M ON P.ID_PROGETTO = M.ID_PROGETTO 
						WHERE (P.ID_BANDO = @IDBANDO))

		IF(@ID_BANDO IN(114,89, 165, 260,261, 385,370))
			SELECT @TOTALE_INVESTIMENTI =
			SUM(DBO.[calcoloCostoTotaleProgettoCorrelato] (P.ID_PROGETTO, 1, NULL)) ,
			@TOTALE_CONTRIBUTO =
			SUM(dbo.calcoloContributoTotaleProgetto (P.ID_PROGETTO, 1, NULL))
			, @TOT_INTERESSI = 0
			FROM PROGETTO P INNER JOIN 
						( SELECT Max(ID) AS MAX_ID, PS.ID_PROGETTO 
						FROM PROGETTO_STORICO PS WHERE PS.COD_STATO = @COD_STATO 
						GROUP BY PS.ID_PROGETTO, PS.COD_STATO) AS M
			ON P.ID_PROGETTO = M.ID_PROGETTO 
			WHERE ID_BANDO = @IDBANDO

			ELSE
			BEGIN
			DECLARE @ID_PROGETT INT, @ORDINE INT 
			DECLARE PROGETTO CURSOR FOR ( 
										SELECT PS.ID_PROGETTO, ORDINE_FASE
									FROM VPROGETTO_STORICO PS INNER JOIN
															   (
										SELECT  MAX(ID) AS MAX_ID, COD_FASE 
											FROM  VPROGETTO_STORICO PS_1 INNER JOIN PROGETTO P ON PS_1.ID_PROGETTO = P.ID_PROGETTO
											WHERE  ID_BANDO = @IDBANDO
											GROUP BY P.ID_PROGETTO, COD_FASE) AS Q2 ON PS.ID = Q2.MAX_ID
								WHERE COD_STATO = @COD_STATO AND Q2.MAX_ID IS NOT NULL)
			OPEN PROGETTO
			FETCH NEXT FROM PROGETTO INTO @ID_PROGETT, @ORDINE
			WHILE @@FETCH_STATUS=0 BEGIN
				SET @TOTALE_INVESTIMENTI = @TOTALE_INVESTIMENTI + ISNULL((SELECT dbo.[calcoloCostoTotaleProgettoCorrelato] (@ID_PROGETT, 1, NULL)), 0)

				SET @TOTALE_CONTRIBUTO = @TOTALE_CONTRIBUTO + ISNULL((SELECT dbo.[calcoloContributoTotaleProgettoCorrelato] (@ID_PROGETT, 1, NULL)), 0)
											
				SET @TOT_INTERESSI = @TOT_INTERESSI +  ISNULL((SELECT dbo.[calcoloInteressiTotaleProgettoCorrelato] (@ID_PROGETT, 1, NULL)), 0)
				
--				IF(@DISPOSIZIONI_ATTUATIVE = 0)
--				BEGIN
					--PREMIO IN CONTO CAPITALE
					IF @PREMIO>0 BEGIN

						DECLARE @AMMONTARE DECIMAL(18,2)
						SET @AMMONTARE=DBO.calcoloPremioContoCapitale(@ID_PROGETT, 1, NULL)
						SET @TOTALE_CONTRIBUTO = ISNULL(@TOTALE_CONTRIBUTO, 0) + ISNULL(@AMMONTARE, 0)
					END
				--END
				FETCH NEXT FROM PROGETTO INTO @ID_PROGETT, @ORDINE
			END
				CLOSE PROGETTO
				DEALLOCATE PROGETTO	
			END -- PRIMA DEL DECLARE @ID_PROGETT E @ORDINE
		

END -- DOPO IL CONTROLLO DELLO STATO A E B CON LA DATA_GRADUATORIA
END -- DOPO IL CONTROLLO DELLO STATO A E B
--
ELSE IF (@COD_STATO IN ('F', 'N') AND @PREMIO = 0)

	BEGIN
		IF(@DISPOSIZIONI_ATTUATIVE = 1)
		SELECT @NUM_DOMANDE = COUNT(DISTINCT G.ID_PROGETTO), @TOTALE_INVESTIMENTI = SUM(G.COSTO_TOTALE), @TOTALE_CONTRIBUTO = SUM(CONTRIBUTO_DI_MISURA)
		FROM GRADUATORIA_PROGETTI_FINANZIABILITA G INNER JOIN GRADUATORIA_PROGETTI GR ON G.ID_PROG_INTEGRATO = GR.ID_PROGETTO
		WHERE (G.ID_BANDO = @IDBANDO) and G.COSTO_TOTALE > 0  
		AND ((@COD_STATO = 'F' AND FINANZIABILITA <> 'N') OR (@COD_STATO = 'N' AND FINANZIABILITA = 'N'))
		ELSE 
		SELECT @NUM_DOMANDE = COUNT(DISTINCT ID_PROGETTO), @TOTALE_INVESTIMENTI = SUM(COSTO_TOTALE), @TOTALE_CONTRIBUTO = SUM(CONTRIBUTO_TOTALE)
		FROM GRADUATORIA_PROGETTI WHERE ID_BANDO = @IDBANDO
		AND ((@COD_STATO = 'F' AND FINANZIABILITA <> 'N') OR (@COD_STATO = 'N' AND FINANZIABILITA = 'N'))

	END -- FINE DEL CONTROLLO DELLO STATO 'F' E 'N'

ELSE IF (@COD_STATO = 'R') -- RINUNCIA
BEGIN
			-- *** PRENDO SOLO LE RINUNCE DOPO LA FINANZIABILITà
			--SET @TOTALE_CONTRIBUTO = ISNULL((SELECT ISNULL(SUM(ISNULL(CASE WHEN (B.IMPORTO_MAX IS NOT NULL AND B.IMPORTO_MAX < CONTRIBUTO) THEN B.IMPORTO_MAX ELSE CONTRIBUTO END,0)), 0)
			--+  SUM(ISNULL(DBO.calcoloPremioContoCapitale(Q1.ID_PROGETTO, 1, NULL), 0))
			--			FROM (SELECT P.ID_PROGETTO, ISNULL(SUM(ISNULL(CONTRIBUTO_RICHIESTO, 0)), 0) AS CONTRIBUTO
			--					FROM VSTATO_PROGETTO P
			--					LEFT JOIN PIANO_INVESTIMENTI AS I ON I.ID_PROGETTO = P.ID_PROGETTO AND ID_INVESTIMENTO_ORIGINALE IS NOT NULL
			--						AND ID_VARIANTE IS NULL
			--			WHERE ID_BANDO = @IDBANDO AND COD_STATO = @COD_STATO 
			--			GROUP BY P.ID_PROGETTO
			--			) AS Q1
			--			LEFT JOIN BANDO_TIPO_INVESTIMENTI AS B ON B.ID_BANDO = @IDBANDO AND B.COD_TIPO_INVESTIMENTO=7), 0)

			--SET @TOTALE_INVESTIMENTI = (SELECT ISNULL(SUM(CASE COD_TIPO_INVESTIMENTO WHEN 2 /*PER IL MUTUO SOMMO SOLO L'AMMONTARE*/ THEN ISNULL(COSTO_INVESTIMENTO,0)
			--								ELSE ISNULL(COSTO_INVESTIMENTO,0)+ISNULL(SPESE_GENERALI,0) END),0) 
			--								FROM PIANO_INVESTIMENTI PI RIGHT JOIN VSTATO_PROGETTO P ON PI.ID_PROGETTO = P.ID_PROGETTO  
			--									AND ID_VARIANTE IS NULL AND	ID_INVESTIMENTO_ORIGINALE IS NOT NULL
			--								WHERE P.ID_BANDO = @IDBANDO  AND COD_STATO = @COD_STATO) 

			--SET @TOT_INTERESSI = (SELECT ISNULL(SUM(ISNULL(CASE WHEN (B.IMPORTO_MAX IS NOT NULL AND B.IMPORTO_MAX < CONTRIBUTO) THEN B.IMPORTO_MAX ELSE CONTRIBUTO END,0)), 0)
			--								FROM (SELECT I.ID_PROGETTO, SUM(ISNULL(CONTRIBUTO_RICHIESTO, 0)) AS CONTRIBUTO
			--									FROM  PIANO_INVESTIMENTI AS I RIGHT JOIN
			--									VSTATO_PROGETTO P ON I.ID_PROGETTO = P.ID_PROGETTO 
			--										AND ID_INVESTIMENTO_ORIGINALE IS NOT NULL AND ID_VARIANTE IS NULL AND I.COD_TIPO_INVESTIMENTO = 2
			--								WHERE ID_BANDO = @IDBANDO AND COD_STATO = @COD_STATO 
			--								GROUP BY I.ID_PROGETTO
			--								) AS Q1
			--								LEFT JOIN BANDO_TIPO_INVESTIMENTI AS B ON B.ID_BANDO = @IDBANDO AND B.COD_TIPO_INVESTIMENTO=7)
			
		SELECT @TOTALE_CONTRIBUTO = SUM(ISNULL(CONTRIBUTO_DI_MISURA, GP.CONTRIBUTO_TOTALE)), 
			   @TOTALE_INVESTIMENTI = SUM(ISNULL(T.COSTO_TOTALE, GP.COSTO_TOTALE))
		FROM PROGETTO P INNER JOIN PROGETTO_STORICO M ON P.ID_PROGETTO = M.ID_PROGETTO
		LEFT OUTER JOIN GRADUATORIA_PROGETTI AS GP ON P.ID_PROGETTO = GP.ID_PROGETTO AND FINANZIABILITA!= 'N' 
				AND GP.ID_BANDO NOT IN (27,76,107,135, 376)  
			LEFT OUTER JOIN (SELECT M.ID_PROGETTO,GPF.CONTRIBUTO_DI_MISURA, GPF.COSTO_TOTALE, GPF.ID_BANDO
							FROM GRADUATORIA_PROGETTI_FINANZIABILITA  GPF INNER JOIN
								(SELECT MAX(ID) ID,ID_PROGETTO 
								FROM PROGETTO_STORICO WHERE COD_STATO = 'F' 
								GROUP BY ID_PROGETTO) M ON M.ID_PROGETTO = GPF.ID_PROGETTO) T 
									ON T.ID_PROGETTO = P.ID_PROGETTO
		WHERE COD_STATO = @COD_STATO AND P.ID_BANDO = @IDBANDO
									
		IF(@DISPOSIZIONI_ATTUATIVE = 1) 
			SET @NUM_DOMANDE = (SELECT COUNT(DISTINCT P.ID_PROGETTO) 
										FROM PROGETTO P INNER JOIN PROGETTO_STORICO M ON P.ID_PROGETTO = M.ID_PROGETTO INNER JOIN 
											(SELECT PIANO_INVESTIMENTI.ID_PROGETTO  FROM  PIANO_INVESTIMENTI GROUP BY PIANO_INVESTIMENTI.ID_PROGETTO)  
											AS PIANO ON P.ID_PROGETTO = PIANO.ID_PROGETTO
												WHERE (P.ID_BANDO = @IDBANDO) AND (M.COD_STATO = @COD_STATO))
		ELSE 
			SELECT @NUM_DOMANDE = COUNT(DISTINCT P.ID_PROGETTO)
					FROM  PROGETTO P INNER JOIN PROGETTO_STORICO M ON P.ID_PROGETTO = M.ID_PROGETTO
					WHERE P.ID_BANDO=@IDBANDO AND M.COD_STATO=@COD_STATO
END 

ELSE IF (@COD_STATO = 'E') -- ESCLUSO
	BEGIN
		SELECT  @TOTALE_CONTRIBUTO = SUM(ISNULL(CONTRIBUTO_DI_MISURA, GP.CONTRIBUTO_TOTALE)), 
			   @TOTALE_INVESTIMENTI = SUM(ISNULL(T.COSTO_TOTALE, GP.COSTO_TOTALE))
		FROM  PROGETTO P 
			LEFT OUTER JOIN GRADUATORIA_PROGETTI AS GP ON P.ID_PROGETTO = GP.ID_PROGETTO AND FINANZIABILITA!= 'N'  AND GP.ID_BANDO NOT IN (27,76,107,135, 376)  
			LEFT OUTER JOIN (SELECT M.ID_PROGETTO,GPF.CONTRIBUTO_DI_MISURA, GPF.COSTO_TOTALE, GPF.ID_BANDO
											FROM GRADUATORIA_PROGETTI_FINANZIABILITA  GPF 
													INNER JOIN (SELECT MAX(ID) ID,ID_PROGETTO FROM PROGETTO_STORICO WHERE COD_STATO = 'F'  GROUP BY ID_PROGETTO) M ON M.ID_PROGETTO = GPF.ID_PROGETTO) T 
									ON T.ID_PROGETTO = P.ID_PROGETTO
			 INNER JOIN (SELECT PS.ID_PROGETTO, COD_STATO 
								FROM PROGETTO_STORICO PS
											INNER JOIN PROGETTO P ON PS.ID_PROGETTO = P.ID_PROGETTO
											INNER JOIN BANDO BA ON P.ID_BANDO = BA.ID_BANDO
							    WHERE PS.ID_PROGETTO = ID_PROG_INTEGRATO OR ID_PROG_INTEGRATO IS NULL) AS PROG_PRINC 
										ON ISNULL(P.ID_PROG_INTEGRATO, P.ID_PROGETTO) = PROG_PRINC.ID_PROGETTO --PER VEDERE LO STATO E IL BANDO DEL PROGETTO PRINCIPALE IN CASO DI BANDO MULTIMISURA
		WHERE PROG_PRINC.COD_STATO = @COD_STATO AND P.ID_BANDO = @IDBANDO
											
		IF(@DISPOSIZIONI_ATTUATIVE = 1) 
		BEGIN 
			 SELECT @NUM_DOMANDE = COUNT(DISTINCT P.ID_PROGETTO) 
					FROM PROGETTO P 
					INNER JOIN (SELECT PIANO_INVESTIMENTI.ID_PROGETTO  FROM  PIANO_INVESTIMENTI GROUP BY PIANO_INVESTIMENTI.ID_PROGETTO) AS PIANO ON P.ID_PROGETTO = PIANO.ID_PROGETTO
					INNER JOIN (SELECT PS.ID_PROGETTO, COD_STATO 
											FROM PROGETTO_STORICO PS
											INNER JOIN PROGETTO P ON PS.ID_PROGETTO = P.ID_PROGETTO
											INNER JOIN BANDO BA ON P.ID_BANDO = BA.ID_BANDO
										WHERE PS.ID_PROGETTO = ID_PROG_INTEGRATO OR ID_PROG_INTEGRATO IS NULL) AS PROG_PRINC ON ISNULL(P.ID_PROG_INTEGRATO, P.ID_PROGETTO) = PROG_PRINC.ID_PROGETTO --PER VEDERE LO STATO E IL BANDO DEL PROGETTO PRINCIPALE IN CASO DI BANDO MULTIMISURA
					WHERE PROG_PRINC.COD_STATO = @COD_STATO AND  (P.ID_BANDO = @IDBANDO) 
		END 
		ELSE 
			SELECT @NUM_DOMANDE = COUNT(DISTINCT P.ID_PROGETTO)
					FROM  PROGETTO P
								INNER JOIN (SELECT PS.ID_PROGETTO, COD_STATO 
											FROM PROGETTO_STORICO PS
											INNER JOIN PROGETTO P ON PS.ID_PROGETTO = P.ID_PROGETTO
											INNER JOIN BANDO BA ON P.ID_BANDO = BA.ID_BANDO
										WHERE PS.ID_PROGETTO = ID_PROG_INTEGRATO OR ID_PROG_INTEGRATO IS NULL) AS PROG_PRINC ON ISNULL(P.ID_PROG_INTEGRATO, P.ID_PROGETTO) = PROG_PRINC.ID_PROGETTO --PER VEDERE LO STATO E IL BANDO DEL PROGETTO PRINCIPALE IN CASO DI BANDO MULTIMISURA
					WHERE P.ID_BANDO=@IDBANDO AND PROG_PRINC.COD_STATO=@COD_STATO
	END

ELSE IF (@COD_STATO IN ('V', 'S', 'T')) -- DOMANDE DI PAGAMENTO
BEGIN
SELECT @NUM_DOMANDE = COUNT(DISTINCT ISNULL(P.ID_PROG_INTEGRATO, P.ID_PROGETTO)), @TOTALE_INVESTIMENTI = 0, 
@TOTALE_CONTRIBUTO = SUM(ISNULL(DPE.IMPORTO_AMMESSO, 0)) 
FROM DOMANDA_DI_PAGAMENTO_ESPORTAZIONE DPE INNER JOIN PROGETTO P ON DPE.ID_PROGETTO = P.ID_PROGETTO
INNER JOIN DOMANDA_DI_PAGAMENTO D ON D.ID_PROGETTO = ISNULL(P.ID_PROG_INTEGRATO, P.ID_PROGETTO)
AND DPE.ID_DOMANDA_PAGAMENTO = D.ID_DOMANDA_PAGAMENTO AND DPE.IMPORTO_AMMESSO > 0
WHERE P.ID_BANDO = @IDBANDO AND APPROVATA = 1 AND
((@COD_STATO = 'V' AND COD_TIPO = 'ANT') OR 
(@COD_STATO = 'S' AND COD_TIPO = 'SAL') OR
(@COD_STATO = 'T' AND COD_TIPO = 'SLD'))
END





END -- FINE BEGIN DELL'INTERESSE FILIERA = 0


IF(@DATA_AGGIORNAMENTO IS NULL) 
BEGIN 
INSERT INTO REPORTISTICA_BANDO (ID_BANDO, DESCRIZIONE, DATA_SCADENZA, DISPOSIZIONI_ATTUATIVE, COD_STATO, 
				NUM_DOMANDE, TOTALE_INVESTIMENTI, 
				TOTALE_CONTRIBUTO, TOT_INTERESSI, DATA_AGGIORNAMENTO)
VALUES (@IDBANDO, @DESCRIZIONE, @DATA_SCADENZA, @DISPOSIZIONI_ATTUATIVE, @COD_STATO, @NUM_DOMANDE, ISNULL(@TOTALE_INVESTIMENTI, 0), 
				ISNULL(@TOTALE_CONTRIBUTO, 0), ISNULL(@TOT_INTERESSI, 0), GETDATE())
END
ELSE IF ((@COD_STATO = 'P' AND (@DATA_AGGIORNAMENTO <= @DATA_SCADENZA)) OR
		 (@COD_STATO IN ('I','Q','L') AND (@DATA_AGGIORNAMENTO <= ISNULL(@DATA_GRADUATORIA, @DATA_AGGIORNAMENTO))) OR
		 ((@COD_STATO IN ('A','B') OR (@COD_STATO IN ('F','N') AND @PREMIO > 0)) AND (@DATA_AGGIORNAMENTO <= ISNULL(@DATA_GRADUATORIA, @DATA_AGGIORNAMENTO))) OR
		 ((@COD_STATO IN ('F', 'N')) AND @PREMIO = 0) OR (@COD_STATO IN ('E', 'R', 'V', 'T', 'S')))
BEGIN
UPDATE REPORTISTICA_BANDO
SET NUM_DOMANDE = @NUM_DOMANDE, TOTALE_INVESTIMENTI = ISNULL(@TOTALE_INVESTIMENTI, 0), TOTALE_CONTRIBUTO = ISNULL(@TOTALE_CONTRIBUTO, 0),
					TOT_INTERESSI = ISNULL(@TOT_INTERESSI, 0), DATA_AGGIORNAMENTO = GETDATE()
WHERE ID_BANDO = @IDBANDO AND COD_STATO = @COD_STATO
END

--Aggiorno sempre data scadenza se il bando viene prorogato
UPDATE REPORTISTICA_BANDO
SET DATA_SCADENZA = @DATA_SCADENZA
WHERE ID_BANDO = @IDBANDO AND COD_STATO = @COD_STATO

--	INSERT INTO #REPORT_BANDI SELECT @IDBANDO, @DESCRIZIONE, @DATA_SCADENZA, @DISPOSIZIONI_ATTUATIVE, @INTERESSE_FILIERA,
--				@NUM_DOMANDE, ISNULL(@TOTALE_INVESTIMENTI,0), ISNULL(@TOTALE_CONTRIBUTO, 0),
--				ISNULL(@TOT_INTERESSI, 0)
FETCH NEXT FROM BANDI INTO @IDBANDO, @DESCRIZIONE, @DATA_SCADENZA, @DISPOSIZIONI_ATTUATIVE, @INTERESSE_FILIERA
END
CLOSE BANDI
DEALLOCATE BANDI

SELECT ID_BANDO, DESCRIZIONE, CASE WHEN DISPOSIZIONI_ATTUATIVE = 1 THEN  NULL ELSE DATA_SCADENZA END DATA_SCADENZA,
DISPOSIZIONI_ATTUATIVE, COD_STATO, NUM_DOMANDE, TOTALE_INVESTIMENTI, TOTALE_CONTRIBUTO, TOT_INTERESSI, DATA_AGGIORNAMENTO
FROM REPORTISTICA_BANDO 
WHERE ((@ID_BANDO IS NOT NULL AND ID_BANDO = @ID_BANDO)
OR @ID_BANDO IS NULL AND (ID_BANDO IN (  
  SELECT ID_DISPOSIZIONI_ATTUATIVE FROM vBANDO_PROGRAMMAZIONE WHERE ID_BANDO IN (SELECT ID_BANDO FROM vBANDO_PROGRAMMAZIONE WHERE ID_PROGRAMMAZIONE  IN (SELECT ID FROM zPROGRAMMAZIONE WHERE ID_PADRE = @ID_PROGRAMMAZIONE)  AND MISURA_PREVALENTE = 1 ) AND DISPOSIZIONI_ATTUATIVE = 1) 
  OR ID_BANDO IN (  
  SELECT ID_BANDO FROM vBANDO_PROGRAMMAZIONE WHERE ID_BANDO IN (SELECT ID_BANDO FROM vBANDO_PROGRAMMAZIONE WHERE ID_PROGRAMMAZIONE  IN (SELECT ID FROM zPROGRAMMAZIONE WHERE ID_PADRE = @ID_PROGRAMMAZIONE)  AND MISURA_PREVALENTE = 1 ) AND DISPOSIZIONI_ATTUATIVE = 0)
  ))
AND COD_STATO = @COD_STATO
ORDER BY ID_BANDO
--DROP TABLE #REPORT_BANDI
