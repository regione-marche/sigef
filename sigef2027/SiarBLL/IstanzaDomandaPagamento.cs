// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 4.4.0.7
//    <NameSpace>SchemaProvider</NameSpace><Collection>List</Collection><codeType>CSharp</codeType><EnableDataBinding>False</EnableDataBinding><GenerateCloneMethod>True</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><DataMemberNameArg>OnlyIfDifferent</DataMemberNameArg><DataMemberOnXmlIgnore>False</DataMemberOnXmlIgnore><CodeBaseTag>Net35</CodeBaseTag><InitializeFields>All</InitializeFields><GenerateUnusedComplexTypes>False</GenerateUnusedComplexTypes><GenerateUnusedSimpleTypes>False</GenerateUnusedSimpleTypes><GenerateXMLAttributes>True</GenerateXMLAttributes><OrderXMLAttrib>False</OrderXMLAttrib><EnableLazyLoading>False</EnableLazyLoading><VirtualProp>False</VirtualProp><PascalCase>False</PascalCase><AutomaticProperties>True</AutomaticProperties><PropNameSpecified>None</PropNameSpecified><PrivateFieldName>StartWithUnderscore</PrivateFieldName><PrivateFieldNamePrefix></PrivateFieldNamePrefix><EnableRestriction>False</EnableRestriction><RestrictionMaxLenght>False</RestrictionMaxLenght><RestrictionRegEx>False</RestrictionRegEx><RestrictionRange>False</RestrictionRange><ValidateProperty>False</ValidateProperty><ClassNamePrefix></ClassNamePrefix><ClassLevel>Public</ClassLevel><PartialClass>True</PartialClass><ClassesInSeparateFiles>False</ClassesInSeparateFiles><ClassesInSeparateFilesDir></ClassesInSeparateFilesDir><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>False</HidePrivateFieldInIDE><EnableSummaryComment>False</EnableSummaryComment><EnableAppInfoSettings>False</EnableAppInfoSettings><EnableExternalSchemasCache>False</EnableExternalSchemasCache><EnableDebug>False</EnableDebug><EnableWarn>False</EnableWarn><ExcludeImportedTypes>False</ExcludeImportedTypes><ExpandNesteadAttributeGroup>False</ExpandNesteadAttributeGroup><CleanupCode>False</CleanupCode><EnableXmlSerialization>True</EnableXmlSerialization><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><EnableEncoding>False</EnableEncoding><EnableXMLIndent>False</EnableXMLIndent><IndentChar>Indent2Space</IndentChar><NewLineAttr>False</NewLineAttr><OmitXML>True</OmitXML><Encoder>UTF8</Encoder><Serializer>XmlSerializer</Serializer><sspNullable>False</sspNullable><sspString>False</sspString><sspCollection>False</sspCollection><sspComplexType>False</sspComplexType><sspSimpleType>False</sspSimpleType><sspEnumType>False</sspEnumType><XmlSerializerEvent>False</XmlSerializerEvent><BaseClassName>EntityBase</BaseClassName><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><CustomUsings></CustomUsings><AttributesToExlude></AttributesToExlude>
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable

namespace SiarBLL
{
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using System.IO;
    using System.Text;
    using System.Xml;
    using System.Collections.Generic;

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = false)]

    public class DomandaPagamento
    {
        private static XmlSerializer serializer;

        public DOMANDA_DI_PAGAMENTO_ESPORTAZIONEType DOMANDA_DI_PAGAMENTO_ESPORTAZIONE { get; set; }
        public DOMANDA_DI_PAGAMENTOType DOMANDA_DI_PAGAMENTO { get; set; }
        public DomandaPagamentoDOMANDA_PAGAMENTO_LIQUIDAZIONI DOMANDA_PAGAMENTO_LIQUIDAZIONI { get; set; }
        public DomandaPagamentoPAGAMENTI_BENEFICIARIO PAGAMENTI_BENEFICIARIO { get; set; }
        public DomandaPagamentoPAGAMENTI_RICHIESTI PAGAMENTI_RICHIESTI { get; set; }
        public DomandaPagamentoGIUSTIFICATIVI GIUSTIFICATIVI { get; set; }
        public DomandaPagamentoSPESE_SOSTENUTE SPESE_SOSTENUTE { get; set; }
        public DomandaPagamentoDOMANDA_PAGAMENTO_ALLEGATI DOMANDA_PAGAMENTO_ALLEGATI { get; set; }

        public DomandaPagamento()
        {
            this.SPESE_SOSTENUTE = new DomandaPagamentoSPESE_SOSTENUTE();
            this.GIUSTIFICATIVI = new DomandaPagamentoGIUSTIFICATIVI();
            this.PAGAMENTI_RICHIESTI = new DomandaPagamentoPAGAMENTI_RICHIESTI();
            this.PAGAMENTI_BENEFICIARIO = new DomandaPagamentoPAGAMENTI_BENEFICIARIO();
            this.DOMANDA_PAGAMENTO_LIQUIDAZIONI = new DomandaPagamentoDOMANDA_PAGAMENTO_LIQUIDAZIONI();
            this.DOMANDA_DI_PAGAMENTO = new DOMANDA_DI_PAGAMENTOType();
            this.DOMANDA_DI_PAGAMENTO_ESPORTAZIONE = new DOMANDA_DI_PAGAMENTO_ESPORTAZIONEType();
            this.DOMANDA_PAGAMENTO_ALLEGATI = new DomandaPagamentoDOMANDA_PAGAMENTO_ALLEGATI();
        }

        public DomandaPagamento(SiarLibrary.DomandaDiPagamento domanda)
        {
            this.SPESE_SOSTENUTE = new DomandaPagamentoSPESE_SOSTENUTE();
            this.GIUSTIFICATIVI = new DomandaPagamentoGIUSTIFICATIVI();
            this.PAGAMENTI_RICHIESTI = new DomandaPagamentoPAGAMENTI_RICHIESTI();
            this.PAGAMENTI_BENEFICIARIO = new DomandaPagamentoPAGAMENTI_BENEFICIARIO();
            this.DOMANDA_PAGAMENTO_LIQUIDAZIONI = new DomandaPagamentoDOMANDA_PAGAMENTO_LIQUIDAZIONI();
            this.DOMANDA_DI_PAGAMENTO = new DOMANDA_DI_PAGAMENTOType();
            this.DOMANDA_DI_PAGAMENTO_ESPORTAZIONE = new DOMANDA_DI_PAGAMENTO_ESPORTAZIONEType();
            this.DOMANDA_PAGAMENTO_ALLEGATI = new DomandaPagamentoDOMANDA_PAGAMENTO_ALLEGATI();

            DOMANDA_DI_PAGAMENTO.carica(domanda);

            SiarBLL.PagamentiRichiestiCollectionProvider pagamenti_richiesti_provider = new PagamentiRichiestiCollectionProvider();
            foreach (SiarLibrary.PagamentiRichiesti pagamento_richiesto in pagamenti_richiesti_provider.Find(null, null, domanda.IdProgetto, domanda.IdDomandaPagamento))
            {
                PAGAMENTO_RICHIESTOType pagamento_richiesto_type = new PAGAMENTO_RICHIESTOType();
                pagamento_richiesto_type.carica(pagamento_richiesto);
                PAGAMENTI_RICHIESTI.PAGAMENTO_RICHIESTO.Add(pagamento_richiesto_type);

                SiarBLL.PagamentiBeneficiarioCollectionProvider pagamenti_beneficiario_provider = new PagamentiBeneficiarioCollectionProvider();
                foreach (SiarLibrary.PagamentiBeneficiario pagamento_beneficiario in pagamenti_beneficiario_provider.Find(pagamento_richiesto_type.ID_PAGAMENTO_RICHIESTO, null, domanda.IdProgetto, null, null, null))
                {
                    PAGAMENTO_BENEFICIARIOType pagamento_beneficiario_type = new PAGAMENTO_BENEFICIARIOType();
                    pagamento_beneficiario_type.carica(pagamento_beneficiario);
                    PAGAMENTI_BENEFICIARIO.PAGAMENTO_BENEFICIARIO.Add(pagamento_beneficiario_type);
                }
            }

            SiarBLL.GiustificativiCollectionProvider giustificativi_provider = new GiustificativiCollectionProvider();
            foreach (SiarLibrary.Giustificativi giustificativo in giustificativi_provider.GetGiustificativiDomandaPagamento(domanda.IdDomandaPagamento, null, null))
            {
                GIUSTIFICATIVOType giustificativo_type = new GIUSTIFICATIVOType();
                giustificativo_type.carica(giustificativo);
                GIUSTIFICATIVI.GIUSTIFICATIVO.Add(giustificativo_type);
            }

            SiarBLL.SpeseSostenuteCollectionProvider spese_provider = new SpeseSostenuteCollectionProvider();
            foreach (SiarLibrary.SpeseSostenute spesa in spese_provider.Find(domanda.IdDomandaPagamento, null, domanda.IdProgetto))
            {
                SPESA_SOSTENUTAType spesa_type = new SPESA_SOSTENUTAType();
                spesa_type.carica(spesa);
                SPESE_SOSTENUTE.SPESA_SOSTENUTA.Add(spesa_type);
            }

            SiarBLL.DomandaPagamentoLiquidazioneCollectionProvider liquidazioni_provider = new DomandaPagamentoLiquidazioneCollectionProvider();
            foreach (SiarLibrary.DomandaPagamentoLiquidazione liquidazione in liquidazioni_provider.Find(domanda.IdDomandaPagamento, domanda.IdProgetto, null, null))
            {
                DOMANDA_PAGAMENTO_LIQUIDAZIONEType liquidazione_type = new DOMANDA_PAGAMENTO_LIQUIDAZIONEType();
                liquidazione_type.carica(liquidazione);
                DOMANDA_PAGAMENTO_LIQUIDAZIONI.DOMANDA_PAGAMENTO_LIQUIDAZIONE.Add(liquidazione_type);
            }

            SiarBLL.DomandaDiPagamentoEsportazioneCollectionProvider domanda_esportazione_provider = new DomandaDiPagamentoEsportazioneCollectionProvider();
            foreach (SiarLibrary.DomandaDiPagamentoEsportazione domanda_esportazione in domanda_esportazione_provider.Find(domanda.IdDomandaPagamento, domanda.IdProgetto, null))
            {
                //DOMANDA_DI_PAGAMENTO_ESPORTAZIONEType domanda_esportazione_type = new DOMANDA_DI_PAGAMENTO_ESPORTAZIONEType();
                //domanda_esportazione_type.carica(domanda_esportazione);
                DOMANDA_DI_PAGAMENTO_ESPORTAZIONE.carica(domanda_esportazione);
            }

            SiarBLL.DomandaPagamentoAllegatiCollectionProvider allegati_provider = new DomandaPagamentoAllegatiCollectionProvider();
            foreach (SiarLibrary.DomandaPagamentoAllegati allegato in allegati_provider.Find(domanda.IdDomandaPagamento, null, null))
            {
                DOMANDA_PAGAMENTO_ALLEGATOType allegato_type = new DOMANDA_PAGAMENTO_ALLEGATOType();
                allegato_type.carica(allegato);
                DOMANDA_PAGAMENTO_ALLEGATI.DOMANDA_PAGAMENTO_ALLEGATO.Add(allegato_type);
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(DomandaPagamento));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current DomandaPagamento object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.OmitXmlDeclaration = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an DomandaPagamento object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output DomandaPagamento object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out DomandaPagamento obj, out System.Exception exception)
        {
            exception = null;
            obj = default(DomandaPagamento);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out DomandaPagamento obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static DomandaPagamento Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((DomandaPagamento)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static DomandaPagamento Deserialize(System.IO.Stream s)
        {
            return ((DomandaPagamento)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current DomandaPagamento object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an DomandaPagamento object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output DomandaPagamento object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out DomandaPagamento obj, out System.Exception exception)
        {
            exception = null;
            obj = default(DomandaPagamento);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out DomandaPagamento obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static DomandaPagamento LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Clone method
        /// <summary>
        /// Create a clone of this DomandaPagamento object
        /// </summary>
        public virtual DomandaPagamento Clone()
        {
            return ((DomandaPagamento)(this.MemberwiseClone()));
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public class DOMANDA_DI_PAGAMENTO_ESPORTAZIONEType
    {
        private static XmlSerializer serializer;

        public int ID_DOMANDA_PAGAMENTO { get; set; }
        public int ID_PROGETTO { get; set; }
        public string BARCODE { get; set; }
        public bool MISURA_PREVALENTE { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<decimal> IMPORTO_AMMISSIBILE { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<decimal> IMPORTO_SANZIONE { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<decimal> IMPORTO_RECUPERO_ANTICIPO { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<decimal> IMPORTO_AMMESSO { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<decimal> IMPORTO_LIQUIDATO { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<bool> FLAG_LIQUIDATO { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<int> ID_DECRETO { get; set; }

        public void carica(SiarLibrary.DomandaDiPagamentoEsportazione domanda_esportazione)
        {
            ID_DOMANDA_PAGAMENTO = domanda_esportazione.IdDomandaPagamento;
            ID_PROGETTO = domanda_esportazione.IdProgetto;
            BARCODE = domanda_esportazione.Barcode;
            MISURA_PREVALENTE = domanda_esportazione.MisuraPrevalente;
            IMPORTO_AMMISSIBILE = domanda_esportazione.ImportoAmmissibile;
            IMPORTO_SANZIONE = domanda_esportazione.ImportoSanzione;
            IMPORTO_RECUPERO_ANTICIPO = domanda_esportazione.ImportoRecuperoAnticipo;
            IMPORTO_AMMESSO = domanda_esportazione.ImportoAmmesso;
            IMPORTO_LIQUIDATO = domanda_esportazione.ImportoLiquidato;
            FLAG_LIQUIDATO = domanda_esportazione.FlagLiquidato;
            ID_DECRETO = domanda_esportazione.IdDecreto;
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(DOMANDA_DI_PAGAMENTO_ESPORTAZIONEType));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current DOMANDA_DI_PAGAMENTO_ESPORTAZIONEType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.OmitXmlDeclaration = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an DOMANDA_DI_PAGAMENTO_ESPORTAZIONEType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output DOMANDA_DI_PAGAMENTO_ESPORTAZIONEType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out DOMANDA_DI_PAGAMENTO_ESPORTAZIONEType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(DOMANDA_DI_PAGAMENTO_ESPORTAZIONEType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out DOMANDA_DI_PAGAMENTO_ESPORTAZIONEType obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static DOMANDA_DI_PAGAMENTO_ESPORTAZIONEType Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((DOMANDA_DI_PAGAMENTO_ESPORTAZIONEType)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static DOMANDA_DI_PAGAMENTO_ESPORTAZIONEType Deserialize(System.IO.Stream s)
        {
            return ((DOMANDA_DI_PAGAMENTO_ESPORTAZIONEType)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current DOMANDA_DI_PAGAMENTO_ESPORTAZIONEType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an DOMANDA_DI_PAGAMENTO_ESPORTAZIONEType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output DOMANDA_DI_PAGAMENTO_ESPORTAZIONEType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out DOMANDA_DI_PAGAMENTO_ESPORTAZIONEType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(DOMANDA_DI_PAGAMENTO_ESPORTAZIONEType);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out DOMANDA_DI_PAGAMENTO_ESPORTAZIONEType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static DOMANDA_DI_PAGAMENTO_ESPORTAZIONEType LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Clone method
        /// <summary>
        /// Create a clone of this DOMANDA_DI_PAGAMENTO_ESPORTAZIONEType object
        /// </summary>
        public virtual DOMANDA_DI_PAGAMENTO_ESPORTAZIONEType Clone()
        {
            return ((DOMANDA_DI_PAGAMENTO_ESPORTAZIONEType)(this.MemberwiseClone()));
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public class SPESA_SOSTENUTAType
    {

        private static XmlSerializer serializer;

        public int ID_SPESA { get; set; }
        public int ID_DOMANDA_PAGAMENTO { get; set; }
        public int ID_GIUSTIFICATIVO { get; set; }
        public string COD_TIPO { get; set; }
        public string ESTREMI { get; set; }
        public System.DateTime DATA { get; set; }
        public decimal IMPORTO { get; set; }
        public decimal NETTO { get; set; }
        public bool AMMESSO { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<System.DateTime> DATA_APPROVAZIONE { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<int> OPERATORE_APPROVAZIONE { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<int> ID_FILE { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<bool> IN_INTEGRAZIONE { get; set; }

        public void carica(SiarLibrary.SpeseSostenute spese)
        {
            ID_SPESA = spese.IdSpesa;
            ID_DOMANDA_PAGAMENTO = spese.IdDomandaPagamento;
            ID_GIUSTIFICATIVO = spese.IdGiustificativo;
            COD_TIPO = spese.CodTipo;
            ESTREMI = spese.Estremi;
            DATA = spese.Data;
            IMPORTO = spese.Importo;
            NETTO = spese.Netto;
            AMMESSO = spese.Ammesso;
            DATA_APPROVAZIONE = spese.DataApprovazione;
            OPERATORE_APPROVAZIONE = spese.OperatoreApprovazione;
            ID_FILE = spese.IdFile;
            IN_INTEGRAZIONE = spese.InIntegrazione;
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(SPESA_SOSTENUTAType));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SPESA_SOSTENUTAType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.OmitXmlDeclaration = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an SPESA_SOSTENUTAType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output SPESA_SOSTENUTAType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out SPESA_SOSTENUTAType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SPESA_SOSTENUTAType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out SPESA_SOSTENUTAType obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static SPESA_SOSTENUTAType Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((SPESA_SOSTENUTAType)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static SPESA_SOSTENUTAType Deserialize(System.IO.Stream s)
        {
            return ((SPESA_SOSTENUTAType)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current SPESA_SOSTENUTAType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an SPESA_SOSTENUTAType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output SPESA_SOSTENUTAType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out SPESA_SOSTENUTAType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SPESA_SOSTENUTAType);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out SPESA_SOSTENUTAType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static SPESA_SOSTENUTAType LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Clone method
        /// <summary>
        /// Create a clone of this SPESA_SOSTENUTAType object
        /// </summary>
        public virtual SPESA_SOSTENUTAType Clone()
        {
            return ((SPESA_SOSTENUTAType)(this.MemberwiseClone()));
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public class GIUSTIFICATIVOType
    {

        private static XmlSerializer serializer;

        public int ID_GIUSTIFICATIVO { get; set; }
        public int ID_PROGETTO { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string NUMERO { get; set; }
        public string COD_TIPO { get; set; }
        public System.DateTime DATA { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string NUMERO_DOCTRASPORTO { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<System.DateTime> DATA_DOCTRASPORTO { get; set; }
        public decimal IMPONIBILE { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<decimal> IVA { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<decimal> ALTRI_ONERI { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string DESCRIZIONE { get; set; }
        public string CF_FORNITORE { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string DESCRIZIONE_FORNITORE { get; set; }
        public bool IVA_NON_RECUPERABILE { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<int> ID_FILE { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<bool> IN_INTEGRAZIONE { get; set; }

        public void carica(SiarLibrary.Giustificativi giustificativo)
        {
            ID_GIUSTIFICATIVO = giustificativo.IdGiustificativo;
            ID_PROGETTO = giustificativo.IdProgetto;
            NUMERO = giustificativo.Numero;
            COD_TIPO = giustificativo.CodTipo;
            DATA = giustificativo.Data;
            NUMERO_DOCTRASPORTO = giustificativo.NumeroDoctrasporto;
            DATA_DOCTRASPORTO = giustificativo.DataDoctrasporto;
            IMPONIBILE = giustificativo.Imponibile;
            IVA = giustificativo.Iva;
            ALTRI_ONERI = giustificativo.AltriOneri;
            DESCRIZIONE = giustificativo.Descrizione;
            CF_FORNITORE = giustificativo.CfFornitore;
            DESCRIZIONE_FORNITORE = giustificativo.DescrizioneFornitore;
            IVA_NON_RECUPERABILE = giustificativo.IvaNonRecuperabile;
            ID_FILE = giustificativo.IdFile;
            IN_INTEGRAZIONE = giustificativo.InIntegrazione;
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(GIUSTIFICATIVOType));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current GIUSTIFICATIVOType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.OmitXmlDeclaration = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an GIUSTIFICATIVOType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output GIUSTIFICATIVOType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out GIUSTIFICATIVOType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(GIUSTIFICATIVOType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out GIUSTIFICATIVOType obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static GIUSTIFICATIVOType Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((GIUSTIFICATIVOType)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static GIUSTIFICATIVOType Deserialize(System.IO.Stream s)
        {
            return ((GIUSTIFICATIVOType)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current GIUSTIFICATIVOType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an GIUSTIFICATIVOType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output GIUSTIFICATIVOType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out GIUSTIFICATIVOType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(GIUSTIFICATIVOType);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out GIUSTIFICATIVOType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static GIUSTIFICATIVOType LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Clone method
        /// <summary>
        /// Create a clone of this GIUSTIFICATIVOType object
        /// </summary>
        public virtual GIUSTIFICATIVOType Clone()
        {
            return ((GIUSTIFICATIVOType)(this.MemberwiseClone()));
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public class PAGAMENTO_RICHIESTOType
    {

        private static XmlSerializer serializer;

        public int ID_PAGAMENTO_RICHIESTO { get; set; }
        public int ID_DOMANDA_PAGAMENTO { get; set; }
        public int ID_INVESTIMENTO { get; set; }
        public System.DateTime DATA_RICHIESTA_PAGAMENTO { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<decimal> IMPORTO_COMPUTO_METRICO { get; set; }
        public decimal IMPORTO_RICHIESTO { get; set; }
        public decimal CONTRIBUTO_RICHIESTO { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<decimal> IMPORTO_DISAVANZO_COSTI_AMMESSI { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<decimal> CONTRIBUTO_DISAVANZO_COSTI_AMMESSI { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<decimal> CONTRIBUTO_RICHIESTO_RECUPERO_ANTICIPO { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<decimal> IMPORTO_COMPUTO_METRICO_AMMESSO { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<decimal> IMPORTO_AMMESSO { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<decimal> CONTRIBUTO_AMMESSO { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<decimal> CONTRIBUTO_AMMESSO_RECUPERO_ANTICIPO { get; set; }
        public bool AMMESSO { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string ISTRUTTORE { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<System.DateTime> DATA_VALUTAZIONE { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string NOTE_ISTRUTTORE { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string COD_SANZIONE_VARIAZIONE_INVESTIMENTI { get; set; }

        public void carica(SiarLibrary.PagamentiRichiesti pagamento)
        {
            ID_PAGAMENTO_RICHIESTO = pagamento.IdPagamentoRichiesto;
            ID_DOMANDA_PAGAMENTO = pagamento.IdDomandaPagamento;
            ID_INVESTIMENTO = pagamento.IdInvestimento;
            DATA_RICHIESTA_PAGAMENTO = pagamento.DataRichiestaPagamento;
            IMPORTO_COMPUTO_METRICO = pagamento.ImportoComputoMetrico;
            IMPORTO_RICHIESTO = pagamento.ImportoRichiesto;
            CONTRIBUTO_RICHIESTO = pagamento.ContributoRichiesto;
            IMPORTO_DISAVANZO_COSTI_AMMESSI = pagamento.ImportoDisavanzoCostiAmmessi;
            CONTRIBUTO_DISAVANZO_COSTI_AMMESSI = pagamento.ContributoDisavanzoCostiAmmessi;
            CONTRIBUTO_RICHIESTO_RECUPERO_ANTICIPO = pagamento.ContributoRichiestoRecuperoAnticipo;
            IMPORTO_COMPUTO_METRICO_AMMESSO = pagamento.ImportoComputoMetricoAmmesso;
            IMPORTO_AMMESSO = pagamento.ImportoAmmesso;
            CONTRIBUTO_AMMESSO = pagamento.ContributoAmmesso;
            CONTRIBUTO_AMMESSO_RECUPERO_ANTICIPO = pagamento.ContributoAmmessoRecuperoAnticipo;
            AMMESSO = pagamento.Ammesso;
            ISTRUTTORE = pagamento.Istruttore;
            DATA_VALUTAZIONE = pagamento.DataValutazione;
            NOTE_ISTRUTTORE = pagamento.NoteIstruttore;
            COD_SANZIONE_VARIAZIONE_INVESTIMENTI = pagamento.CodSanzioneVariazioneInvestimenti;
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(PAGAMENTO_RICHIESTOType));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current PAGAMENTO_RICHIESTOType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.OmitXmlDeclaration = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an PAGAMENTO_RICHIESTOType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output PAGAMENTO_RICHIESTOType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out PAGAMENTO_RICHIESTOType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(PAGAMENTO_RICHIESTOType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out PAGAMENTO_RICHIESTOType obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static PAGAMENTO_RICHIESTOType Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((PAGAMENTO_RICHIESTOType)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static PAGAMENTO_RICHIESTOType Deserialize(System.IO.Stream s)
        {
            return ((PAGAMENTO_RICHIESTOType)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current PAGAMENTO_RICHIESTOType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an PAGAMENTO_RICHIESTOType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output PAGAMENTO_RICHIESTOType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out PAGAMENTO_RICHIESTOType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(PAGAMENTO_RICHIESTOType);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out PAGAMENTO_RICHIESTOType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static PAGAMENTO_RICHIESTOType LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Clone method
        /// <summary>
        /// Create a clone of this PAGAMENTO_RICHIESTOType object
        /// </summary>
        public virtual PAGAMENTO_RICHIESTOType Clone()
        {
            return ((PAGAMENTO_RICHIESTOType)(this.MemberwiseClone()));
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public class PAGAMENTO_BENEFICIARIOType
    {

        private static XmlSerializer serializer;

        public int ID_PAGAMENTO_BENEFICIARIO { get; set; }
        public int ID_PAGAMENTO_RICHIESTO { get; set; }
        public int ID_GIUSTIFICATIVO { get; set; }
        public decimal IMPORTO_RICHIESTO { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<decimal> IMPORTO_AMMESSO { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<decimal> CONTRIBUTO_AMMESSO { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<decimal> QUOTA_CONTRIBUTO_AMMESSO { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<decimal> IMPORTO_NONAMM_NONRESP { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<decimal> IMPORTO_AMMESSO_CONTR { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<decimal> IMPORTO_NONAMM_CONTR_NONRESP { get; set; }
        public bool SPESA_TECNICA_RICHIESTA { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<bool> SPESA_TECNICA_AMMESSA { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<bool> SPESA_TECNICA_AMMESSA_CONTR { get; set; }
        public bool COSTITUISCE_VARIANTE { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string COD_RIDUZIONE { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<int> MOTIVAZIONE_RIDUZIONE { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string COD_RIDUZIONE_CONTR { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<int> MOTIVAZIONE_RIDUZIONE_CONTR { get; set; }

        public void carica(SiarLibrary.PagamentiBeneficiario pagamento)
        {
            ID_PAGAMENTO_BENEFICIARIO = pagamento.IdPagamentoBeneficiario;
            ID_PAGAMENTO_RICHIESTO = pagamento.IdPagamentoRichiesto;
            ID_GIUSTIFICATIVO = pagamento.IdGiustificativo;
            IMPORTO_RICHIESTO = pagamento.ImportoRichiesto;
            IMPORTO_AMMESSO = pagamento.ImportoAmmesso;
            CONTRIBUTO_AMMESSO = pagamento.ContributoAmmesso;
            QUOTA_CONTRIBUTO_AMMESSO = pagamento.QuotaContributoAmmesso;
            COD_RIDUZIONE = pagamento.CodRiduzione;
            MOTIVAZIONE_RIDUZIONE = pagamento.MotivazioneRiduzione;
            IMPORTO_NONAMM_NONRESP = pagamento.ImportoNonammNonresp;
            IMPORTO_AMMESSO_CONTR = pagamento.ImportoAmmessoContr;
            IMPORTO_NONAMM_CONTR_NONRESP = pagamento.ImportoNonammContrNonresp;
            SPESA_TECNICA_RICHIESTA = pagamento.SpesaTecnicaRichiesta;
            SPESA_TECNICA_AMMESSA = pagamento.SpesaTecnicaAmmessa;
            SPESA_TECNICA_AMMESSA_CONTR = pagamento.SpesaTecnicaAmmessaContr;
            COSTITUISCE_VARIANTE = pagamento.CostituisceVariante;
            COD_RIDUZIONE_CONTR = pagamento.CodRiduzioneContr;
            MOTIVAZIONE_RIDUZIONE_CONTR = pagamento.MotivazioneRiduzioneContr;
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(PAGAMENTO_BENEFICIARIOType));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current PAGAMENTO_BENEFICIARIOType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.OmitXmlDeclaration = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an PAGAMENTO_BENEFICIARIOType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output PAGAMENTO_BENEFICIARIOType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out PAGAMENTO_BENEFICIARIOType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(PAGAMENTO_BENEFICIARIOType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out PAGAMENTO_BENEFICIARIOType obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static PAGAMENTO_BENEFICIARIOType Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((PAGAMENTO_BENEFICIARIOType)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static PAGAMENTO_BENEFICIARIOType Deserialize(System.IO.Stream s)
        {
            return ((PAGAMENTO_BENEFICIARIOType)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current PAGAMENTO_BENEFICIARIOType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an PAGAMENTO_BENEFICIARIOType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output PAGAMENTO_BENEFICIARIOType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out PAGAMENTO_BENEFICIARIOType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(PAGAMENTO_BENEFICIARIOType);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out PAGAMENTO_BENEFICIARIOType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static PAGAMENTO_BENEFICIARIOType LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Clone method
        /// <summary>
        /// Create a clone of this PAGAMENTO_BENEFICIARIOType object
        /// </summary>
        public virtual PAGAMENTO_BENEFICIARIOType Clone()
        {
            return ((PAGAMENTO_BENEFICIARIOType)(this.MemberwiseClone()));
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public class DOMANDA_PAGAMENTO_LIQUIDAZIONEType
    {

        private static XmlSerializer serializer;

        public int ID { get; set; }
        public int ID_DOMANDA_PAGAMENTO { get; set; }
        public int ID_PROGETTO { get; set; }
        public int ID_IMPRESA_BENEFICIARIA { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<int> ID_DECRETO { get; set; }
        public System.Nullable<decimal> RICHIESTA_MANDATO_IMPORTO { get; set; }
        public string RICHIESTA_MANDATO_SEGNATURA { get; set; } 
        public System.Nullable<System.DateTime> RICHIESTA_MANDATO_DATA { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string MANDATO_NUMERO { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<System.DateTime> MANDATO_DATA { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<decimal> MANDATO_IMPORTO { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<int> MANDATO_ID_FILE { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<System.DateTime> QUIETANZA_DATA { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<decimal> QUIETANZA_IMPORTO { get; set; }
        public bool LIQUIDATO { get; set; }

        public void carica(SiarLibrary.DomandaPagamentoLiquidazione liquidazione)
        {
            ID = liquidazione.Id;
            ID_DOMANDA_PAGAMENTO = liquidazione.IdDomandaPagamento;
            ID_PROGETTO = liquidazione.IdProgetto;
            ID_IMPRESA_BENEFICIARIA = liquidazione.IdImpresaBeneficiaria;
            ID_DECRETO = liquidazione.IdDecreto;
            RICHIESTA_MANDATO_IMPORTO = liquidazione.RichiestaMandatoImporto;
            RICHIESTA_MANDATO_SEGNATURA = liquidazione.RichiestaMandatoSegnatura;
            RICHIESTA_MANDATO_DATA = liquidazione.RichiestaMandatoData;
            MANDATO_NUMERO = liquidazione.MandatoNumero;
            MANDATO_DATA = liquidazione.MandatoData;
            MANDATO_IMPORTO = liquidazione.MandatoImporto;
            MANDATO_ID_FILE = liquidazione.MandatoIdFile;
            QUIETANZA_DATA = liquidazione.QuietanzaData;
            QUIETANZA_IMPORTO = liquidazione.QuietanzaImporto;
            LIQUIDATO = liquidazione.Liquidato;
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(DOMANDA_PAGAMENTO_LIQUIDAZIONEType));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current DOMANDA_PAGAMENTO_LIQUIDAZIONEType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.OmitXmlDeclaration = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an DOMANDA_PAGAMENTO_LIQUIDAZIONEType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output DOMANDA_PAGAMENTO_LIQUIDAZIONEType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out DOMANDA_PAGAMENTO_LIQUIDAZIONEType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(DOMANDA_PAGAMENTO_LIQUIDAZIONEType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out DOMANDA_PAGAMENTO_LIQUIDAZIONEType obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static DOMANDA_PAGAMENTO_LIQUIDAZIONEType Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((DOMANDA_PAGAMENTO_LIQUIDAZIONEType)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static DOMANDA_PAGAMENTO_LIQUIDAZIONEType Deserialize(System.IO.Stream s)
        {
            return ((DOMANDA_PAGAMENTO_LIQUIDAZIONEType)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current DOMANDA_PAGAMENTO_LIQUIDAZIONEType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an DOMANDA_PAGAMENTO_LIQUIDAZIONEType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output DOMANDA_PAGAMENTO_LIQUIDAZIONEType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out DOMANDA_PAGAMENTO_LIQUIDAZIONEType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(DOMANDA_PAGAMENTO_LIQUIDAZIONEType);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out DOMANDA_PAGAMENTO_LIQUIDAZIONEType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static DOMANDA_PAGAMENTO_LIQUIDAZIONEType LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Clone method
        /// <summary>
        /// Create a clone of this DOMANDA_PAGAMENTO_LIQUIDAZIONEType object
        /// </summary>
        public virtual DOMANDA_PAGAMENTO_LIQUIDAZIONEType Clone()
        {
            return ((DOMANDA_PAGAMENTO_LIQUIDAZIONEType)(this.MemberwiseClone()));
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public class DOMANDA_DI_PAGAMENTOType
    {

        private static XmlSerializer serializer;

        public int ID_DOMANDA_PAGAMENTO { get; set; }
        public string COD_TIPO { get; set; }
        public int ID_PROGETTO { get; set; }
        public System.DateTime DATA_INSERIMENTO { get; set; }
        public string CF_OPERATORE { get; set; }
        public System.DateTime DATA_MODIFICA { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string COD_ENTE { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string SEGNATURA { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string SEGNATURA_ALLEGATI { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<int> ID_FIDEJUSSIONE { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<System.DateTime> DATA_CERTIFICAZIONE_ANTIMAFIA { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<bool> APPROVATA { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string SEGNATURA_APPROVAZIONE { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string SEGNATURA_SECONDA_APPROVAZIONE { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string CF_ISTRUTTORE { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<System.DateTime> DATA_APPROVAZIONE { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string VALUTAZIONE_ISTRUTTORE { get; set; }
        public bool ANNULLATA { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string SEGNATURA_ANNULLAMENTO { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string CF_OPERATORE_ANNULLAMENTO { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<System.DateTime> DATA_ANNULLAMENTO { get; set; }
        public bool VALIDITA_VERSIONE_ADC { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<int> ID_VARIAZIONE_ACCERTATA { get; set; }
        public bool PREDISPOSTA_A_CONTROLLO { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<System.DateTime> DATA_PREDISPOSIZIONE_A_CONTROLLO { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string VISITA_INSITU_ESITO { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string VISITA_INSITU_NOTE { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string CONTROLLO_INLOCO_ESITO { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string CONTROLLO_INLOCO_NOTE { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string VERIFICA_PAGAMENTI_ESITO { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string VERIFICA_PAGAMENTI_MESSAGGIO { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<System.DateTime> VERIFICA_PAGAMENTI_DATA { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<bool> FIRMA_PREDISPOSTA { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<bool> FIRMA_PREDISPOSTA_RUP { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<bool> IN_INTEGRAZIONE { get; set; }

        public void carica(SiarLibrary.DomandaDiPagamento domanda)
        {
            ID_DOMANDA_PAGAMENTO = domanda.IdDomandaPagamento;
            COD_TIPO = domanda.CodTipo;
            ID_PROGETTO = domanda.IdProgetto;
            DATA_INSERIMENTO = domanda.DataInserimento;
            CF_OPERATORE = domanda.CfOperatore;
            DATA_MODIFICA = domanda.DataModifica;
            COD_ENTE = domanda.CodEnte;
            SEGNATURA = domanda.Segnatura;
            SEGNATURA_ALLEGATI = domanda.SegnaturaAllegati;
            ID_FIDEJUSSIONE = domanda.IdFidejussione;
            DATA_CERTIFICAZIONE_ANTIMAFIA = domanda.DataCertificazioneAntimafia;
            APPROVATA = domanda.Approvata;
            SEGNATURA_APPROVAZIONE = domanda.SegnaturaApprovazione;
            SEGNATURA_SECONDA_APPROVAZIONE = domanda.SegnaturaSecondaApprovazione;
            CF_ISTRUTTORE = domanda.CfIstruttore;
            DATA_APPROVAZIONE = domanda.DataApprovazione;
            VALUTAZIONE_ISTRUTTORE = domanda.ValutazioneIstruttore;
            ANNULLATA = domanda.Annullata;
            SEGNATURA_ANNULLAMENTO = domanda.SegnaturaAnnullamento;
            CF_OPERATORE_ANNULLAMENTO = domanda.CfOperatoreAnnullamento;
            DATA_ANNULLAMENTO = domanda.DataAnnullamento;
            VALIDITA_VERSIONE_ADC = domanda.ValiditaVersioneAdc;
            ID_VARIAZIONE_ACCERTATA = domanda.IdVariazioneAccertata;
            PREDISPOSTA_A_CONTROLLO = domanda.PredispostaAControllo;
            DATA_PREDISPOSIZIONE_A_CONTROLLO = domanda.DataPredisposizioneAControllo;
            VISITA_INSITU_ESITO = domanda.VisitaInsituEsito;
            VISITA_INSITU_NOTE = domanda.VisitaInsituNote;
            CONTROLLO_INLOCO_ESITO = domanda.ControlloInlocoEsito;
            CONTROLLO_INLOCO_NOTE = domanda.ControlloInlocoNote;
            VERIFICA_PAGAMENTI_ESITO = domanda.VerificaPagamentiEsito;
            VERIFICA_PAGAMENTI_MESSAGGIO = domanda.VerificaPagamentiMessaggio;
            VERIFICA_PAGAMENTI_DATA = domanda.VerificaPagamentiData;
            FIRMA_PREDISPOSTA = domanda.FirmaPredisposta;
            FIRMA_PREDISPOSTA_RUP = domanda.FirmaPredispostaRup;
            IN_INTEGRAZIONE = domanda.InIntegrazione;
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(DOMANDA_DI_PAGAMENTOType));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current DOMANDA_DI_PAGAMENTOType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.OmitXmlDeclaration = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an DOMANDA_DI_PAGAMENTOType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output DOMANDA_DI_PAGAMENTOType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out DOMANDA_DI_PAGAMENTOType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(DOMANDA_DI_PAGAMENTOType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out DOMANDA_DI_PAGAMENTOType obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static DOMANDA_DI_PAGAMENTOType Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((DOMANDA_DI_PAGAMENTOType)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static DOMANDA_DI_PAGAMENTOType Deserialize(System.IO.Stream s)
        {
            return ((DOMANDA_DI_PAGAMENTOType)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current DOMANDA_DI_PAGAMENTOType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an DOMANDA_DI_PAGAMENTOType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output DOMANDA_DI_PAGAMENTOType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out DOMANDA_DI_PAGAMENTOType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(DOMANDA_DI_PAGAMENTOType);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out DOMANDA_DI_PAGAMENTOType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static DOMANDA_DI_PAGAMENTOType LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Clone method
        /// <summary>
        /// Create a clone of this DOMANDA_DI_PAGAMENTOType object
        /// </summary>
        public virtual DOMANDA_DI_PAGAMENTOType Clone()
        {
            return ((DOMANDA_DI_PAGAMENTOType)(this.MemberwiseClone()));
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public class DomandaPagamentoDOMANDA_PAGAMENTO_LIQUIDAZIONI
    {

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute("DOMANDA_PAGAMENTO_LIQUIDAZIONE")]
        public List<DOMANDA_PAGAMENTO_LIQUIDAZIONEType> DOMANDA_PAGAMENTO_LIQUIDAZIONE { get; set; }

        public DomandaPagamentoDOMANDA_PAGAMENTO_LIQUIDAZIONI()
        {
            this.DOMANDA_PAGAMENTO_LIQUIDAZIONE = new List<DOMANDA_PAGAMENTO_LIQUIDAZIONEType>();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(DomandaPagamentoDOMANDA_PAGAMENTO_LIQUIDAZIONI));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current DomandaPagamentoDOMANDA_PAGAMENTO_LIQUIDAZIONI object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.OmitXmlDeclaration = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an DomandaPagamentoDOMANDA_PAGAMENTO_LIQUIDAZIONI object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output DomandaPagamentoDOMANDA_PAGAMENTO_LIQUIDAZIONI object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out DomandaPagamentoDOMANDA_PAGAMENTO_LIQUIDAZIONI obj, out System.Exception exception)
        {
            exception = null;
            obj = default(DomandaPagamentoDOMANDA_PAGAMENTO_LIQUIDAZIONI);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out DomandaPagamentoDOMANDA_PAGAMENTO_LIQUIDAZIONI obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static DomandaPagamentoDOMANDA_PAGAMENTO_LIQUIDAZIONI Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((DomandaPagamentoDOMANDA_PAGAMENTO_LIQUIDAZIONI)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static DomandaPagamentoDOMANDA_PAGAMENTO_LIQUIDAZIONI Deserialize(System.IO.Stream s)
        {
            return ((DomandaPagamentoDOMANDA_PAGAMENTO_LIQUIDAZIONI)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current DomandaPagamentoDOMANDA_PAGAMENTO_LIQUIDAZIONI object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an DomandaPagamentoDOMANDA_PAGAMENTO_LIQUIDAZIONI object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output DomandaPagamentoDOMANDA_PAGAMENTO_LIQUIDAZIONI object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out DomandaPagamentoDOMANDA_PAGAMENTO_LIQUIDAZIONI obj, out System.Exception exception)
        {
            exception = null;
            obj = default(DomandaPagamentoDOMANDA_PAGAMENTO_LIQUIDAZIONI);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out DomandaPagamentoDOMANDA_PAGAMENTO_LIQUIDAZIONI obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static DomandaPagamentoDOMANDA_PAGAMENTO_LIQUIDAZIONI LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Clone method
        /// <summary>
        /// Create a clone of this DomandaPagamentoDOMANDA_PAGAMENTO_LIQUIDAZIONI object
        /// </summary>
        public virtual DomandaPagamentoDOMANDA_PAGAMENTO_LIQUIDAZIONI Clone()
        {
            return ((DomandaPagamentoDOMANDA_PAGAMENTO_LIQUIDAZIONI)(this.MemberwiseClone()));
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public class DomandaPagamentoPAGAMENTI_BENEFICIARIO
    {

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute("PAGAMENTO_BENEFICIARIO")]
        public List<PAGAMENTO_BENEFICIARIOType> PAGAMENTO_BENEFICIARIO { get; set; }

        public DomandaPagamentoPAGAMENTI_BENEFICIARIO()
        {
            this.PAGAMENTO_BENEFICIARIO = new List<PAGAMENTO_BENEFICIARIOType>();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(DomandaPagamentoPAGAMENTI_BENEFICIARIO));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current DomandaPagamentoPAGAMENTI_BENEFICIARIO object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.OmitXmlDeclaration = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an DomandaPagamentoPAGAMENTI_BENEFICIARIO object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output DomandaPagamentoPAGAMENTI_BENEFICIARIO object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out DomandaPagamentoPAGAMENTI_BENEFICIARIO obj, out System.Exception exception)
        {
            exception = null;
            obj = default(DomandaPagamentoPAGAMENTI_BENEFICIARIO);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out DomandaPagamentoPAGAMENTI_BENEFICIARIO obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static DomandaPagamentoPAGAMENTI_BENEFICIARIO Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((DomandaPagamentoPAGAMENTI_BENEFICIARIO)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static DomandaPagamentoPAGAMENTI_BENEFICIARIO Deserialize(System.IO.Stream s)
        {
            return ((DomandaPagamentoPAGAMENTI_BENEFICIARIO)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current DomandaPagamentoPAGAMENTI_BENEFICIARIO object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an DomandaPagamentoPAGAMENTI_BENEFICIARIO object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output DomandaPagamentoPAGAMENTI_BENEFICIARIO object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out DomandaPagamentoPAGAMENTI_BENEFICIARIO obj, out System.Exception exception)
        {
            exception = null;
            obj = default(DomandaPagamentoPAGAMENTI_BENEFICIARIO);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out DomandaPagamentoPAGAMENTI_BENEFICIARIO obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static DomandaPagamentoPAGAMENTI_BENEFICIARIO LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Clone method
        /// <summary>
        /// Create a clone of this DomandaPagamentoPAGAMENTI_BENEFICIARIO object
        /// </summary>
        public virtual DomandaPagamentoPAGAMENTI_BENEFICIARIO Clone()
        {
            return ((DomandaPagamentoPAGAMENTI_BENEFICIARIO)(this.MemberwiseClone()));
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public class DomandaPagamentoPAGAMENTI_RICHIESTI
    {

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute("PAGAMENTO_RICHIESTO")]
        public List<PAGAMENTO_RICHIESTOType> PAGAMENTO_RICHIESTO { get; set; }

        public DomandaPagamentoPAGAMENTI_RICHIESTI()
        {
            this.PAGAMENTO_RICHIESTO = new List<PAGAMENTO_RICHIESTOType>();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(DomandaPagamentoPAGAMENTI_RICHIESTI));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current DomandaPagamentoPAGAMENTI_RICHIESTI object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.OmitXmlDeclaration = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an DomandaPagamentoPAGAMENTI_RICHIESTI object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output DomandaPagamentoPAGAMENTI_RICHIESTI object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out DomandaPagamentoPAGAMENTI_RICHIESTI obj, out System.Exception exception)
        {
            exception = null;
            obj = default(DomandaPagamentoPAGAMENTI_RICHIESTI);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out DomandaPagamentoPAGAMENTI_RICHIESTI obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static DomandaPagamentoPAGAMENTI_RICHIESTI Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((DomandaPagamentoPAGAMENTI_RICHIESTI)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static DomandaPagamentoPAGAMENTI_RICHIESTI Deserialize(System.IO.Stream s)
        {
            return ((DomandaPagamentoPAGAMENTI_RICHIESTI)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current DomandaPagamentoPAGAMENTI_RICHIESTI object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an DomandaPagamentoPAGAMENTI_RICHIESTI object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output DomandaPagamentoPAGAMENTI_RICHIESTI object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out DomandaPagamentoPAGAMENTI_RICHIESTI obj, out System.Exception exception)
        {
            exception = null;
            obj = default(DomandaPagamentoPAGAMENTI_RICHIESTI);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out DomandaPagamentoPAGAMENTI_RICHIESTI obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static DomandaPagamentoPAGAMENTI_RICHIESTI LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Clone method
        /// <summary>
        /// Create a clone of this DomandaPagamentoPAGAMENTI_RICHIESTI object
        /// </summary>
        public virtual DomandaPagamentoPAGAMENTI_RICHIESTI Clone()
        {
            return ((DomandaPagamentoPAGAMENTI_RICHIESTI)(this.MemberwiseClone()));
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public class DomandaPagamentoGIUSTIFICATIVI
    {

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute("GIUSTIFICATIVO")]
        public List<GIUSTIFICATIVOType> GIUSTIFICATIVO { get; set; }

        public DomandaPagamentoGIUSTIFICATIVI()
        {
            this.GIUSTIFICATIVO = new List<GIUSTIFICATIVOType>();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(DomandaPagamentoGIUSTIFICATIVI));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current DomandaPagamentoGIUSTIFICATIVI object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.OmitXmlDeclaration = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an DomandaPagamentoGIUSTIFICATIVI object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output DomandaPagamentoGIUSTIFICATIVI object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out DomandaPagamentoGIUSTIFICATIVI obj, out System.Exception exception)
        {
            exception = null;
            obj = default(DomandaPagamentoGIUSTIFICATIVI);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out DomandaPagamentoGIUSTIFICATIVI obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static DomandaPagamentoGIUSTIFICATIVI Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((DomandaPagamentoGIUSTIFICATIVI)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static DomandaPagamentoGIUSTIFICATIVI Deserialize(System.IO.Stream s)
        {
            return ((DomandaPagamentoGIUSTIFICATIVI)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current DomandaPagamentoGIUSTIFICATIVI object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an DomandaPagamentoGIUSTIFICATIVI object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output DomandaPagamentoGIUSTIFICATIVI object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out DomandaPagamentoGIUSTIFICATIVI obj, out System.Exception exception)
        {
            exception = null;
            obj = default(DomandaPagamentoGIUSTIFICATIVI);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out DomandaPagamentoGIUSTIFICATIVI obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static DomandaPagamentoGIUSTIFICATIVI LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Clone method
        /// <summary>
        /// Create a clone of this DomandaPagamentoGIUSTIFICATIVI object
        /// </summary>
        public virtual DomandaPagamentoGIUSTIFICATIVI Clone()
        {
            return ((DomandaPagamentoGIUSTIFICATIVI)(this.MemberwiseClone()));
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public class DomandaPagamentoSPESE_SOSTENUTE
    {

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute("SPESA_SOSTENUTA")]
        public List<SPESA_SOSTENUTAType> SPESA_SOSTENUTA { get; set; }

        public DomandaPagamentoSPESE_SOSTENUTE()
        {
            this.SPESA_SOSTENUTA = new List<SPESA_SOSTENUTAType>();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(DomandaPagamentoSPESE_SOSTENUTE));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current DomandaPagamentoSPESE_SOSTENUTE object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.OmitXmlDeclaration = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an DomandaPagamentoSPESE_SOSTENUTE object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output DomandaPagamentoSPESE_SOSTENUTE object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out DomandaPagamentoSPESE_SOSTENUTE obj, out System.Exception exception)
        {
            exception = null;
            obj = default(DomandaPagamentoSPESE_SOSTENUTE);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out DomandaPagamentoSPESE_SOSTENUTE obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static DomandaPagamentoSPESE_SOSTENUTE Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((DomandaPagamentoSPESE_SOSTENUTE)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static DomandaPagamentoSPESE_SOSTENUTE Deserialize(System.IO.Stream s)
        {
            return ((DomandaPagamentoSPESE_SOSTENUTE)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current DomandaPagamentoSPESE_SOSTENUTE object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an DomandaPagamentoSPESE_SOSTENUTE object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output DomandaPagamentoSPESE_SOSTENUTE object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out DomandaPagamentoSPESE_SOSTENUTE obj, out System.Exception exception)
        {
            exception = null;
            obj = default(DomandaPagamentoSPESE_SOSTENUTE);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out DomandaPagamentoSPESE_SOSTENUTE obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static DomandaPagamentoSPESE_SOSTENUTE LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Clone method
        /// <summary>
        /// Create a clone of this DomandaPagamentoSPESE_SOSTENUTE object
        /// </summary>
        public virtual DomandaPagamentoSPESE_SOSTENUTE Clone()
        {
            return ((DomandaPagamentoSPESE_SOSTENUTE)(this.MemberwiseClone()));
        }
        #endregion

        /*
        public static void popolaDaDomandaPagamento(SiarLibrary.DomandaDiPagamento domanda_pagamento_siar)
        {
            SiarBLL.DomandaDiPagamentoCollectionProvider domanda_pagamento_provider = new DomandaDiPagamentoCollectionProvider();
            SiarBLL.DomandaPagamentoLiquidazioneCollectionProvider liquidazione_provider = new SiarBLL.DomandaPagamentoLiquidazioneCollectionProvider();

            this.DOMANDA_DI_PAGAMENTO. domanda_pagamento_siar;
        }
        */
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public class DOMANDA_PAGAMENTO_ALLEGATOType
    {

        private static XmlSerializer serializer;

        public int ID_ALLEGATO { get; set; }
        public int ID_DOMANDA_PAGAMENTO { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string DESCRIZIONE { get; set; }
        public string COD_TIPO_DOCUMENTO { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<int> ID_FILE { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string COD_ENTE_EMETTITORE { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<int> ID_COMUNE { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string NUMERO { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<System.DateTime> DATA { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string COD_ESITO { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string NOTE_ISTRUTTORE { get; set; }

        public void carica(SiarLibrary.DomandaPagamentoAllegati allegato)
        {
            ID_ALLEGATO = allegato.IdAllegato;
            ID_DOMANDA_PAGAMENTO = allegato.IdDomandaPagamento;
            DESCRIZIONE = allegato.Descrizione;
            COD_TIPO_DOCUMENTO = allegato.CodTipoDocumento;
            ID_FILE = allegato.IdFile;
            COD_ENTE_EMETTITORE = allegato.CodEnteEmettitore;
            ID_COMUNE = allegato.IdComune;
            NUMERO = allegato.Numero;
            DATA = allegato.Data;
            COD_ESITO = allegato.CodEsito;
            NOTE_ISTRUTTORE = allegato.NoteIstruttore;
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(DOMANDA_PAGAMENTO_ALLEGATOType));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current DOMANDA_PAGAMENTO_ALLEGATIType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.OmitXmlDeclaration = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an DOMANDA_PAGAMENTO_ALLEGATIType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output DOMANDA_PAGAMENTO_ALLEGATIType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out DOMANDA_PAGAMENTO_ALLEGATOType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(DOMANDA_PAGAMENTO_ALLEGATOType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out DOMANDA_PAGAMENTO_ALLEGATOType obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static DOMANDA_PAGAMENTO_ALLEGATOType Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((DOMANDA_PAGAMENTO_ALLEGATOType)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static DOMANDA_PAGAMENTO_ALLEGATOType Deserialize(System.IO.Stream s)
        {
            return ((DOMANDA_PAGAMENTO_ALLEGATOType)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current DOMANDA_PAGAMENTO_ALLEGATIType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an DOMANDA_PAGAMENTO_ALLEGATIType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output DOMANDA_PAGAMENTO_ALLEGATIType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out DOMANDA_PAGAMENTO_ALLEGATOType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(DOMANDA_PAGAMENTO_ALLEGATOType);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out DOMANDA_PAGAMENTO_ALLEGATOType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static DOMANDA_PAGAMENTO_ALLEGATOType LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Clone method
        /// <summary>
        /// Create a clone of this DOMANDA_PAGAMENTO_ALLEGATIType object
        /// </summary>
        public virtual DOMANDA_PAGAMENTO_ALLEGATOType Clone()
        {
            return ((DOMANDA_PAGAMENTO_ALLEGATOType)(this.MemberwiseClone()));
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public class DomandaPagamentoDOMANDA_PAGAMENTO_ALLEGATI
    {

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute("DOMANDA_PAGAMENTO_ALLEGATO")]
        public List<DOMANDA_PAGAMENTO_ALLEGATOType> DOMANDA_PAGAMENTO_ALLEGATO { get; set; }

        public DomandaPagamentoDOMANDA_PAGAMENTO_ALLEGATI()
        {
            this.DOMANDA_PAGAMENTO_ALLEGATO = new List<DOMANDA_PAGAMENTO_ALLEGATOType>();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(DomandaPagamentoDOMANDA_PAGAMENTO_ALLEGATI));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current DomandaPagamentoDOMANDA_PAGAMENTO_ALLEGATI object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.OmitXmlDeclaration = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an DomandaPagamentoDOMANDA_PAGAMENTO_ALLEGATI object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output DomandaPagamentoDOMANDA_PAGAMENTO_ALLEGATI object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out DomandaPagamentoDOMANDA_PAGAMENTO_ALLEGATI obj, out System.Exception exception)
        {
            exception = null;
            obj = default(DomandaPagamentoDOMANDA_PAGAMENTO_ALLEGATI);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out DomandaPagamentoDOMANDA_PAGAMENTO_ALLEGATI obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static DomandaPagamentoDOMANDA_PAGAMENTO_ALLEGATI Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((DomandaPagamentoDOMANDA_PAGAMENTO_ALLEGATI)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static DomandaPagamentoDOMANDA_PAGAMENTO_ALLEGATI Deserialize(System.IO.Stream s)
        {
            return ((DomandaPagamentoDOMANDA_PAGAMENTO_ALLEGATI)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current DomandaPagamentoDOMANDA_PAGAMENTO_ALLEGATI object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an DomandaPagamentoDOMANDA_PAGAMENTO_ALLEGATI object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output DomandaPagamentoDOMANDA_PAGAMENTO_ALLEGATI object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out DomandaPagamentoDOMANDA_PAGAMENTO_ALLEGATI obj, out System.Exception exception)
        {
            exception = null;
            obj = default(DomandaPagamentoDOMANDA_PAGAMENTO_ALLEGATI);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out DomandaPagamentoDOMANDA_PAGAMENTO_ALLEGATI obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static DomandaPagamentoDOMANDA_PAGAMENTO_ALLEGATI LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Clone method
        /// <summary>
        /// Create a clone of this DomandaPagamentoDOMANDA_PAGAMENTO_ALLEGATI object
        /// </summary>
        public virtual DomandaPagamentoDOMANDA_PAGAMENTO_ALLEGATI Clone()
        {
            return ((DomandaPagamentoDOMANDA_PAGAMENTO_ALLEGATI)(this.MemberwiseClone()));
        }
        #endregion
    }
}
#pragma warning restore
