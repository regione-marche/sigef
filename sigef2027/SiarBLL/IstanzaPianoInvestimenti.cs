// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 4.4.0.7
//    <NameSpace>SchemaProvider</NameSpace><Collection>List</Collection><codeType>CSharp</codeType><EnableDataBinding>False</EnableDataBinding><GenerateCloneMethod>True</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><DataMemberNameArg>OnlyIfDifferent</DataMemberNameArg><DataMemberOnXmlIgnore>False</DataMemberOnXmlIgnore><CodeBaseTag>Net35</CodeBaseTag><InitializeFields>All</InitializeFields><GenerateUnusedComplexTypes>False</GenerateUnusedComplexTypes><GenerateUnusedSimpleTypes>False</GenerateUnusedSimpleTypes><GenerateXMLAttributes>True</GenerateXMLAttributes><OrderXMLAttrib>False</OrderXMLAttrib><EnableLazyLoading>False</EnableLazyLoading><VirtualProp>False</VirtualProp><PascalCase>False</PascalCase><AutomaticProperties>True</AutomaticProperties><PropNameSpecified>None</PropNameSpecified><PrivateFieldName>StartWithUnderscore</PrivateFieldName><PrivateFieldNamePrefix></PrivateFieldNamePrefix><EnableRestriction>False</EnableRestriction><RestrictionMaxLenght>False</RestrictionMaxLenght><RestrictionRegEx>False</RestrictionRegEx><RestrictionRange>False</RestrictionRange><ValidateProperty>False</ValidateProperty><ClassNamePrefix></ClassNamePrefix><ClassLevel>Public</ClassLevel><PartialClass>True</PartialClass><ClassesInSeparateFiles>False</ClassesInSeparateFiles><ClassesInSeparateFilesDir></ClassesInSeparateFilesDir><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>False</HidePrivateFieldInIDE><EnableSummaryComment>False</EnableSummaryComment><EnableAppInfoSettings>False</EnableAppInfoSettings><EnableExternalSchemasCache>False</EnableExternalSchemasCache><EnableDebug>False</EnableDebug><EnableWarn>False</EnableWarn><ExcludeImportedTypes>False</ExcludeImportedTypes><ExpandNesteadAttributeGroup>False</ExpandNesteadAttributeGroup><CleanupCode>False</CleanupCode><EnableXmlSerialization>True</EnableXmlSerialization><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><EnableEncoding>False</EnableEncoding><EnableXMLIndent>False</EnableXMLIndent><IndentChar>Indent2Space</IndentChar><NewLineAttr>False</NewLineAttr><OmitXML>True</OmitXML><Encoder>UTF8</Encoder><Serializer>XmlSerializer</Serializer><sspNullable>False</sspNullable><sspString>False</sspString><sspCollection>False</sspCollection><sspComplexType>False</sspComplexType><sspSimpleType>False</sspSimpleType><sspEnumType>False</sspEnumType><XmlSerializerEvent>False</XmlSerializerEvent><BaseClassName>EntityBase</BaseClassName><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><CustomUsings></CustomUsings><AttributesToExlude></AttributesToExlude>
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable

namespace SiarBLL
{
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using System.IO;
    using System.Text;
    using System.Xml;
    using System.Collections.Generic;

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = false)]
    public class IstanzaPianoInvestimenti
    {
        private static XmlSerializer serializer;

        public DOMANDA_DI_PAGAMENTOType DOMANDA_DI_PAGAMENTO { get; set; }
        public DomandaPagamentoPAGAMENTI_BENEFICIARIO PAGAMENTI_BENEFICIARIO { get; set; }
        public DomandaPagamentoPAGAMENTI_RICHIESTI PAGAMENTI_RICHIESTI { get; set; }
        public DomandaPagamentoGIUSTIFICATIVI GIUSTIFICATIVI { get; set; }
        public DomandaPagamentoSPESE_SOSTENUTE SPESE_SOSTENUTE { get; set; }
        public DomandaPagamentoPIANO_INVESTIMENTI PIANO_INVESTIMENTI { get; set; }
        public PROGETTOType PROGETTO  { get; set; }

        public IstanzaPianoInvestimenti()
        {
            this.SPESE_SOSTENUTE = new DomandaPagamentoSPESE_SOSTENUTE();
            this.GIUSTIFICATIVI = new DomandaPagamentoGIUSTIFICATIVI();
            this.PAGAMENTI_RICHIESTI = new DomandaPagamentoPAGAMENTI_RICHIESTI();
            this.PAGAMENTI_BENEFICIARIO = new DomandaPagamentoPAGAMENTI_BENEFICIARIO();
            this.PIANO_INVESTIMENTI = new DomandaPagamentoPIANO_INVESTIMENTI();
            this.PROGETTO = new PROGETTOType();
            this.DOMANDA_DI_PAGAMENTO = new DOMANDA_DI_PAGAMENTOType();
        }

        public IstanzaPianoInvestimenti(SiarLibrary.DomandaDiPagamento domanda)
        {
            this.SPESE_SOSTENUTE = new DomandaPagamentoSPESE_SOSTENUTE();
            this.GIUSTIFICATIVI = new DomandaPagamentoGIUSTIFICATIVI();
            this.PAGAMENTI_RICHIESTI = new DomandaPagamentoPAGAMENTI_RICHIESTI();
            this.PAGAMENTI_BENEFICIARIO = new DomandaPagamentoPAGAMENTI_BENEFICIARIO();
            this.PIANO_INVESTIMENTI = new DomandaPagamentoPIANO_INVESTIMENTI();
            this.PROGETTO = new PROGETTOType();
            this.DOMANDA_DI_PAGAMENTO = new DOMANDA_DI_PAGAMENTOType();

            DOMANDA_DI_PAGAMENTO.carica(domanda);

            SiarBLL.PagamentiRichiestiCollectionProvider pagamenti_richiesti_provider = new PagamentiRichiestiCollectionProvider();
            foreach (SiarLibrary.PagamentiRichiesti pagamento_richiesto in pagamenti_richiesti_provider.Find(null, null, domanda.IdProgetto, domanda.IdDomandaPagamento))
            {
                PAGAMENTO_RICHIESTOType pagamento_richiesto_type = new PAGAMENTO_RICHIESTOType();
                pagamento_richiesto_type.carica(pagamento_richiesto);
                PAGAMENTI_RICHIESTI.PAGAMENTO_RICHIESTO.Add(pagamento_richiesto_type);

                SiarBLL.PagamentiBeneficiarioCollectionProvider pagamenti_beneficiario_provider = new PagamentiBeneficiarioCollectionProvider();
                foreach (SiarLibrary.PagamentiBeneficiario pagamento_beneficiario in pagamenti_beneficiario_provider.Find(pagamento_richiesto_type.ID_PAGAMENTO_RICHIESTO, null, domanda.IdProgetto, null, null, null))
                {
                    PAGAMENTO_BENEFICIARIOType pagamento_beneficiario_type = new PAGAMENTO_BENEFICIARIOType();
                    pagamento_beneficiario_type.carica(pagamento_beneficiario);
                    PAGAMENTI_BENEFICIARIO.PAGAMENTO_BENEFICIARIO.Add(pagamento_beneficiario_type);
                }
            }

            SiarBLL.GiustificativiCollectionProvider giustificativi_provider = new GiustificativiCollectionProvider();
            foreach (SiarLibrary.Giustificativi giustificativo in giustificativi_provider.GetGiustificativiDomandaPagamento(domanda.IdDomandaPagamento, null, null))
            {
                GIUSTIFICATIVOType giustificativo_type = new GIUSTIFICATIVOType();
                giustificativo_type.carica(giustificativo);
                GIUSTIFICATIVI.GIUSTIFICATIVO.Add(giustificativo_type);
            }

            SiarBLL.SpeseSostenuteCollectionProvider spese_provider = new SpeseSostenuteCollectionProvider();
            foreach (SiarLibrary.SpeseSostenute spesa in spese_provider.Find(domanda.IdDomandaPagamento, null, domanda.IdProgetto))
            {
                SPESA_SOSTENUTAType spesa_type = new SPESA_SOSTENUTAType();
                spesa_type.carica(spesa);
                SPESE_SOSTENUTE.SPESA_SOSTENUTA.Add(spesa_type);
            }

            SiarBLL.ProgettoCollectionProvider progetto_provider = new ProgettoCollectionProvider();
            SiarLibrary.Progetto prog = progetto_provider.GetById(domanda.IdProgetto);
            PROGETTO.carica(prog);

            SiarBLL.PianoInvestimentiCollectionProvider investimenti_provider = new PianoInvestimentiCollectionProvider();
            foreach (SiarLibrary.PianoInvestimenti investimento in investimenti_provider.Find(null, domanda.IdProgetto, null, null, null, null, null)) // .GetPianoInvestimentiDomandaPagamento(domanda.IdProgetto, domanda.IdDomandaPagamento))
            {
                PIANO_INVESTIMENTIType investimento_type = new PIANO_INVESTIMENTIType();
                investimento_type.carica(investimento);
                PIANO_INVESTIMENTI.INVESTIMENTI.Add(investimento_type);
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(IstanzaPianoInvestimenti));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current DomandaPagamento object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.OmitXmlDeclaration = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an DomandaPagamento object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output DomandaPagamento object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out IstanzaPianoInvestimenti obj, out System.Exception exception)
        {
            exception = null;
            obj = default(IstanzaPianoInvestimenti);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out IstanzaPianoInvestimenti obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static IstanzaPianoInvestimenti Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((IstanzaPianoInvestimenti)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static IstanzaPianoInvestimenti Deserialize(System.IO.Stream s)
        {
            return ((IstanzaPianoInvestimenti)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current DomandaPagamento object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an DomandaPagamento object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output DomandaPagamento object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out IstanzaPianoInvestimenti obj, out System.Exception exception)
        {
            exception = null;
            obj = default(IstanzaPianoInvestimenti);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out IstanzaPianoInvestimenti obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static IstanzaPianoInvestimenti LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Clone method
        /// <summary>
        /// Create a clone of this DomandaPagamento object
        /// </summary>
        public virtual IstanzaPianoInvestimenti Clone()
        {
            return ((IstanzaPianoInvestimenti)(this.MemberwiseClone()));
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public class PROGETTOType
    {
        private static XmlSerializer serializer;

        public int ID_PROGETTO { get; set; }
        public int ID_BANDO { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string COD_AGEA { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string SEGNATURA_ALLEGATI { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<int> ID_PROG_INTEGRATO { get; set; }
        public bool FLAG_PREADESIONE { get; set; }
        public bool FLAG_DEFINITIVO { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<int> ID_FASCICOLO { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string PROVINCIA_DI_PRESENTAZIONE { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<bool> SELEZIONATA_X_REVISIONE { get; set; }
        public int ID_IMPRESA { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<int> ID_STORICO_ULTIMO { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<System.DateTime> DATA_CREAZIONE { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<int> OPERATORE_CREAZIONE { get; set; }
        public bool FIRMA_PREDISPOSTA { get; set; }

        public void carica(SiarLibrary.Progetto progetto)
        {
            ID_PROGETTO = progetto.IdProgetto;
            ID_BANDO = progetto.IdBando;
            COD_AGEA = progetto.CodAgea;
            SEGNATURA_ALLEGATI = progetto.SegnaturaAllegati;
            ID_PROG_INTEGRATO = progetto.IdProgIntegrato;
            FLAG_PREADESIONE = progetto.FlagPreadesione;
            FLAG_DEFINITIVO = progetto.FlagDefinitivo;
            ID_FASCICOLO = progetto.IdFascicolo;
            PROVINCIA_DI_PRESENTAZIONE = progetto.ProvinciaDiPresentazione;
            SELEZIONATA_X_REVISIONE = progetto.SelezionataXRevisione;
            ID_IMPRESA = progetto.IdImpresa;
            ID_STORICO_ULTIMO = progetto.IdStoricoUltimo;
            DATA_CREAZIONE = progetto.DataCreazione;
            OPERATORE_CREAZIONE = progetto.OperatoreCreazione;
            FIRMA_PREDISPOSTA = progetto.FirmaPredisposta;
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(DOMANDA_DI_PAGAMENTO_ESPORTAZIONEType));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current PROGETTOType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.OmitXmlDeclaration = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an PROGETTOType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output PROGETTOType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out PROGETTOType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(PROGETTOType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out PROGETTOType obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static PROGETTOType Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((PROGETTOType)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static PROGETTOType Deserialize(System.IO.Stream s)
        {
            return ((PROGETTOType)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current DOMANDA_DI_PAGAMENTO_ESPORTAZIONEType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an PROGETTOType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output PROGETTOType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out PROGETTOType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(PROGETTOType);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out PROGETTOType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static PROGETTOType LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Clone method
        /// <summary>
        /// Create a clone of this PROGETTOType object
        /// </summary>
        public virtual PROGETTOType Clone()
        {
            return ((PROGETTOType)(this.MemberwiseClone()));
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public class PIANO_INVESTIMENTIType
    {
        private static XmlSerializer serializer;

        public int ID_INVESTIMENTO { get; set; }
        public int ID_PROGETTO { get; set; }
        public int ID_PROGRAMMAZIONE { get; set; }
        public string DESCRIZIONE { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<System.DateTime> DATA_VARIAZIONE { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string OPERATORE_VARIAZIONE { get; set; }
        public int COD_TIPO_INVESTIMENTO { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string COD_STP { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<int> ID_UNITA_MISURA { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<decimal> QUANTITA { get; set; }
        public decimal COSTO_INVESTIMENTO { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<decimal> SPESE_GENERALI { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<decimal> CONTRIBUTO_RICHIESTO { get; set; }
        public decimal QUOTA_CONTRIBUTO_RICHIESTO { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<decimal> CONTRIBUTO_ALTRE_FONTI { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<decimal> QUOTA_CONTRIBUTO_ALTRE_FONTI { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<decimal> TASSO_ABBUONO { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<int> ID_SETTORE_PRODUTTIVO { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<int> ID_PRIORITA_SETTORIALE { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<int> ID_OBIETTIVO_MISURA { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<int> ID_CODIFICA_INVESTIMENTO { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<int> ID_DETTAGLIO_INVESTIMENTO { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<int> ID_SPECIFICA_INVESTIMENTO { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<bool> AMMESSO { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string ISTRUTTORE { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<int> ID_INVESTIMENTO_ORIGINALE { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<System.DateTime> DATA_VALUTAZIONE { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string VALUTAZIONE_INVESTIMENTO { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<int> ID_VARIANTE { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string COD_VARIAZIONE { get; set; }
        public bool NON_CONFINANZIATO { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public PianoInvestimentiPRIORITA_X_INVESTIMENTI PRIORITA_X_INVESTIMENTI { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public PianoInvestimentiAUT_MODIFICA_PERC_AIUTO AUT_MODIFICA_PERC_AIUTO { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public PianoInvestimentiCORRETTIVA_RENDICONTAZIONE_SPOSTAMENTI CORRETTIVE_RENDICONTAZIONE_SPOSTAMENTI { get; set; }

        public void carica(SiarLibrary.PianoInvestimenti piano_investimenti)
        {
            ID_INVESTIMENTO = piano_investimenti.IdInvestimento;
            ID_PROGETTO = piano_investimenti.IdProgetto;
            ID_PROGRAMMAZIONE = piano_investimenti.IdProgrammazione;
            DESCRIZIONE = piano_investimenti.Descrizione;
            DATA_VARIAZIONE = piano_investimenti.DataVariazione;
            OPERATORE_VARIAZIONE = piano_investimenti.OperatoreVariazione;
            COD_TIPO_INVESTIMENTO = piano_investimenti.CodTipoInvestimento;
            COD_STP = piano_investimenti.CodStp;
            ID_UNITA_MISURA = piano_investimenti.IdUnitaMisura;
            QUANTITA = piano_investimenti.Quantita;
            COSTO_INVESTIMENTO = piano_investimenti.CostoInvestimento;
            SPESE_GENERALI = piano_investimenti.SpeseGenerali;
            CONTRIBUTO_RICHIESTO = piano_investimenti.ContributoRichiesto;
            QUOTA_CONTRIBUTO_RICHIESTO = piano_investimenti.QuotaContributoRichiesto;
            CONTRIBUTO_ALTRE_FONTI = piano_investimenti.ContributoAltreFonti;
            QUOTA_CONTRIBUTO_ALTRE_FONTI = piano_investimenti.QuotaContributoAltreFonti;
            TASSO_ABBUONO = piano_investimenti.TassoAbbuono;
            ID_SETTORE_PRODUTTIVO = piano_investimenti.IdSettoreProduttivo;
            ID_PRIORITA_SETTORIALE = piano_investimenti.IdPrioritaSettoriale;
            ID_OBIETTIVO_MISURA = piano_investimenti.IdObiettivoMisura;
            ID_CODIFICA_INVESTIMENTO = piano_investimenti.IdCodificaInvestimento;
            ID_DETTAGLIO_INVESTIMENTO = piano_investimenti.IdDettaglioInvestimento;
            ID_SPECIFICA_INVESTIMENTO = piano_investimenti.IdSpecificaInvestimento;
            AMMESSO = piano_investimenti.Ammesso;
            ISTRUTTORE = piano_investimenti.Istruttore;
            ID_INVESTIMENTO_ORIGINALE = piano_investimenti.IdInvestimentoOriginale;
            DATA_VALUTAZIONE = piano_investimenti.DataValutazione;
            VALUTAZIONE_INVESTIMENTO = piano_investimenti.ValutazioneInvestimento;
            ID_VARIANTE = piano_investimenti.IdVariante;
            COD_VARIAZIONE = piano_investimenti.CodVariazione;
            NON_CONFINANZIATO = piano_investimenti.NonCofinanziato;

            PRIORITA_X_INVESTIMENTI = new PianoInvestimentiPRIORITA_X_INVESTIMENTI();
            AUT_MODIFICA_PERC_AIUTO = new PianoInvestimentiAUT_MODIFICA_PERC_AIUTO();
            CORRETTIVE_RENDICONTAZIONE_SPOSTAMENTI = new PianoInvestimentiCORRETTIVA_RENDICONTAZIONE_SPOSTAMENTI();

            SiarBLL.PrioritaXInvestimentiCollectionProvider priorita_provider = new PrioritaXInvestimentiCollectionProvider();
            foreach (SiarLibrary.PrioritaXInvestimenti priorita in priorita_provider.Find(null, piano_investimenti.IdInvestimento, null, null))
            {
                PRIORITA_X_INVESTIMENTIType priorita_type = new PRIORITA_X_INVESTIMENTIType();
                priorita_type.carica(priorita);
                PRIORITA_X_INVESTIMENTI.PRIORITA_X_INVESTIMENTI.Add(priorita_type);
            }

            SiarBLL.AutModificaPercAiutoCollectionProvider autorizzazioni_provider = new AutModificaPercAiutoCollectionProvider();
            foreach (SiarLibrary.AutModificaPercAiuto autorizzazione in autorizzazioni_provider.Select(null, null, null, null, null, 
                piano_investimenti.IdInvestimento, null, null, null, null, null, null))
            {
                AUT_MODIFICA_PERC_AIUTOType autorizzazione_type = new AUT_MODIFICA_PERC_AIUTOType();
                autorizzazione_type.carica(autorizzazione);
                AUT_MODIFICA_PERC_AIUTO.AUTORIZZAZIONI.Add(autorizzazione_type);
            }

            SiarBLL.CorrettivaRendicontazioneSpostamentiCollectionProvider correttive_provider = new CorrettivaRendicontazioneSpostamentiCollectionProvider();
            foreach (SiarLibrary.CorrettivaRendicontazioneSpostamenti correttiva in correttive_provider.Find(null, piano_investimenti.IdInvestimento, piano_investimenti.IdInvestimento, null, null))
            {
                CORRETTIVA_RENDICONTAZIONE_SPOSTAMENTIType correttiva_type = new CORRETTIVA_RENDICONTAZIONE_SPOSTAMENTIType();
                correttiva_type.carica(correttiva);
                CORRETTIVE_RENDICONTAZIONE_SPOSTAMENTI.CORRETTIVE.Add(correttiva_type);
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(PIANO_INVESTIMENTIType));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current PIANO_INVESTIMENTIType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.OmitXmlDeclaration = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an PIANO_INVESTIMENTIType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output PIANO_INVESTIMENTIType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out PIANO_INVESTIMENTIType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(PIANO_INVESTIMENTIType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out PIANO_INVESTIMENTIType obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static PIANO_INVESTIMENTIType Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((PIANO_INVESTIMENTIType)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static PIANO_INVESTIMENTIType Deserialize(System.IO.Stream s)
        {
            return ((PIANO_INVESTIMENTIType)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current PIANO_INVESTIMENTIType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an PIANO_INVESTIMENTIType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output PIANO_INVESTIMENTIType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out PIANO_INVESTIMENTIType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(PIANO_INVESTIMENTIType);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out PIANO_INVESTIMENTIType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static PIANO_INVESTIMENTIType LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Clone method
        /// <summary>
        /// Create a clone of this PIANO_INVESTIMENTIType object
        /// </summary>
        public virtual PIANO_INVESTIMENTIType Clone()
        {
            return ((PIANO_INVESTIMENTIType)(this.MemberwiseClone()));
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public class DomandaPagamentoPIANO_INVESTIMENTI
    {

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute("PIANO_INVESTIMENTI")]
        public List<PIANO_INVESTIMENTIType> INVESTIMENTI { get; set; }

        public DomandaPagamentoPIANO_INVESTIMENTI()
        {
            this.INVESTIMENTI = new List<PIANO_INVESTIMENTIType>();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(DomandaPagamentoPIANO_INVESTIMENTI));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current DomandaPagamentoPIANO_INVESTIMENTI object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.OmitXmlDeclaration = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an DomandaPagamentoPIANO_INVESTIMENTI object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output DomandaPagamentoPIANO_INVESTIMENTI object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out DomandaPagamentoPIANO_INVESTIMENTI obj, out System.Exception exception)
        {
            exception = null;
            obj = default(DomandaPagamentoPIANO_INVESTIMENTI);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out DomandaPagamentoPIANO_INVESTIMENTI obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static DomandaPagamentoPIANO_INVESTIMENTI Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((DomandaPagamentoPIANO_INVESTIMENTI)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static DomandaPagamentoPIANO_INVESTIMENTI Deserialize(System.IO.Stream s)
        {
            return ((DomandaPagamentoPIANO_INVESTIMENTI)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current DomandaPagamentoPIANO_INVESTIMENTI object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an DomandaPagamentoPIANO_INVESTIMENTI object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output DomandaPagamentoPIANO_INVESTIMENTI object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out DomandaPagamentoPIANO_INVESTIMENTI obj, out System.Exception exception)
        {
            exception = null;
            obj = default(DomandaPagamentoPIANO_INVESTIMENTI);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out DomandaPagamentoPIANO_INVESTIMENTI obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static DomandaPagamentoPIANO_INVESTIMENTI LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Clone method
        /// <summary>
        /// Create a clone of this DomandaPagamentoPIANO_INVESTIMENTI object
        /// </summary>
        public virtual DomandaPagamentoPIANO_INVESTIMENTI Clone()
        {
            return ((DomandaPagamentoPIANO_INVESTIMENTI)(this.MemberwiseClone()));
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public class PianoInvestimentiPRIORITA_X_INVESTIMENTI
    {

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute("PRIORITA_X_INVESTIMENTI")]
        public List<PRIORITA_X_INVESTIMENTIType> PRIORITA_X_INVESTIMENTI { get; set; }

        public PianoInvestimentiPRIORITA_X_INVESTIMENTI()
        {
            this.PRIORITA_X_INVESTIMENTI = new List<PRIORITA_X_INVESTIMENTIType>();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(PianoInvestimentiPRIORITA_X_INVESTIMENTI));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current PianoInvestimentiPRIORITA_X_INVESTIMENTI object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.OmitXmlDeclaration = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an PianoInvestimentiPRIORITA_X_INVESTIMENTI object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output PianoInvestimentiPRIORITA_X_INVESTIMENTI object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out PianoInvestimentiPRIORITA_X_INVESTIMENTI obj, out System.Exception exception)
        {
            exception = null;
            obj = default(PianoInvestimentiPRIORITA_X_INVESTIMENTI);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out PianoInvestimentiPRIORITA_X_INVESTIMENTI obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static PianoInvestimentiPRIORITA_X_INVESTIMENTI Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((PianoInvestimentiPRIORITA_X_INVESTIMENTI)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static PianoInvestimentiPRIORITA_X_INVESTIMENTI Deserialize(System.IO.Stream s)
        {
            return ((PianoInvestimentiPRIORITA_X_INVESTIMENTI)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current PianoInvestimentiPRIORITA_X_INVESTIMENTI object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an PianoInvestimentiPRIORITA_X_INVESTIMENTI object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output PianoInvestimentiPRIORITA_X_INVESTIMENTI object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out PianoInvestimentiPRIORITA_X_INVESTIMENTI obj, out System.Exception exception)
        {
            exception = null;
            obj = default(PianoInvestimentiPRIORITA_X_INVESTIMENTI);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out PianoInvestimentiPRIORITA_X_INVESTIMENTI obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static PianoInvestimentiPRIORITA_X_INVESTIMENTI LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Clone method
        /// <summary>
        /// Create a clone of this PianoInvestimentiPRIORITA_X_INVESTIMENTI object
        /// </summary>
        public virtual PianoInvestimentiPRIORITA_X_INVESTIMENTI Clone()
        {
            return ((PianoInvestimentiPRIORITA_X_INVESTIMENTI)(this.MemberwiseClone()));
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public class PRIORITA_X_INVESTIMENTIType
    {
        private static XmlSerializer serializer;

        public int ID_PRIORITA { get; set; }
        public int ID_INVESTIMENTO { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<int> ID_VALORE { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<bool> SCELTO { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<decimal> VALORE { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<System.DateTime> VAL_DATA { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string VAL_TESTO { get; set; }

        public void carica(SiarLibrary.PrioritaXInvestimenti priorita_x_investimenti)
        {
            ID_PRIORITA = priorita_x_investimenti.IdPriorita;
            ID_INVESTIMENTO = priorita_x_investimenti.IdInvestimento;
            ID_VALORE = priorita_x_investimenti.IdValore;
            SCELTO = priorita_x_investimenti.Scelto;
            VALORE = priorita_x_investimenti.Valore;
            VAL_DATA = priorita_x_investimenti.ValData;
            VAL_TESTO = priorita_x_investimenti.ValTesto;
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(PRIORITA_X_INVESTIMENTIType));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current PRIORITA_X_INVESTIMENTIType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.OmitXmlDeclaration = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an PRIORITA_X_INVESTIMENTIType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output PRIORITA_X_INVESTIMENTIType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out PRIORITA_X_INVESTIMENTIType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(PRIORITA_X_INVESTIMENTIType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out PRIORITA_X_INVESTIMENTIType obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static PRIORITA_X_INVESTIMENTIType Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((PRIORITA_X_INVESTIMENTIType)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static PRIORITA_X_INVESTIMENTIType Deserialize(System.IO.Stream s)
        {
            return ((PRIORITA_X_INVESTIMENTIType)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current PRIORITA_X_INVESTIMENTIType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an PRIORITA_X_INVESTIMENTIType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output PRIORITA_X_INVESTIMENTIType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out PRIORITA_X_INVESTIMENTIType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(PRIORITA_X_INVESTIMENTIType);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out PRIORITA_X_INVESTIMENTIType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static PRIORITA_X_INVESTIMENTIType LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Clone method
        /// <summary>
        /// Create a clone of this PRIORITA_X_INVESTIMENTIType object
        /// </summary>
        public virtual PRIORITA_X_INVESTIMENTIType Clone()
        {
            return ((PRIORITA_X_INVESTIMENTIType)(this.MemberwiseClone()));
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public class AUT_MODIFICA_PERC_AIUTOType
    {
        private static XmlSerializer serializer;

        public int ID_AUTORIZZAZIONE { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<System.DateTime> DATA_INSERIMENTO { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string CF_INSERIMENTO { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<System.DateTime> DATA_MODIFICA { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string CF_MODIFICA { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<int> ID_INVESTIMENTO { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<decimal> COSTO_INVESTIMENTO_PRECEDENTE { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<decimal> COSTO_INVESTIMENTO_AUTORIZZATO { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<decimal> QUANTITA_PRECEDENTE { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<decimal> QUANTITA_AUTORIZZATA { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<decimal> PERC_PRECEDENTE { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<decimal> PERC_AUTORIZZATA { get; set; }

        public void carica(SiarLibrary.AutModificaPercAiuto modifica_perc_auto)
        {
            ID_AUTORIZZAZIONE = modifica_perc_auto.IdAutorizzazione;
            DATA_INSERIMENTO = modifica_perc_auto.DataInserimento;
            CF_INSERIMENTO = modifica_perc_auto.CfInserimento;
            DATA_MODIFICA = modifica_perc_auto.DataModifica;
            CF_MODIFICA = modifica_perc_auto.CfModifica;
            ID_INVESTIMENTO = modifica_perc_auto.IdInvestimento;
            COSTO_INVESTIMENTO_PRECEDENTE = modifica_perc_auto.CostoInvestimentoPrecedente;
            COSTO_INVESTIMENTO_AUTORIZZATO = modifica_perc_auto.CostoInvestimentoAutorizzato;
            QUANTITA_PRECEDENTE = modifica_perc_auto.QuantitaPrecedente;
            QUANTITA_AUTORIZZATA = modifica_perc_auto.QuantitaAutorizzata;
            PERC_PRECEDENTE = modifica_perc_auto.PercPrecedente;
            PERC_AUTORIZZATA = modifica_perc_auto.PercAutorizzata;
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(AUT_MODIFICA_PERC_AIUTOType));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current AUT_MODIFICA_PERC_AIUTOType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.OmitXmlDeclaration = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an AUT_MODIFICA_PERC_AIUTOType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output AUT_MODIFICA_PERC_AIUTOType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out AUT_MODIFICA_PERC_AIUTOType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(AUT_MODIFICA_PERC_AIUTOType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out AUT_MODIFICA_PERC_AIUTOType obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static AUT_MODIFICA_PERC_AIUTOType Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((AUT_MODIFICA_PERC_AIUTOType)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static AUT_MODIFICA_PERC_AIUTOType Deserialize(System.IO.Stream s)
        {
            return ((AUT_MODIFICA_PERC_AIUTOType)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current AUT_MODIFICA_PERC_AIUTOType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an AUT_MODIFICA_PERC_AIUTOType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output AUT_MODIFICA_PERC_AIUTOType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out AUT_MODIFICA_PERC_AIUTOType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(AUT_MODIFICA_PERC_AIUTOType);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out AUT_MODIFICA_PERC_AIUTOType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static AUT_MODIFICA_PERC_AIUTOType LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Clone method
        /// <summary>
        /// Create a clone of this AUT_MODIFICA_PERC_AIUTOType object
        /// </summary>
        public virtual AUT_MODIFICA_PERC_AIUTOType Clone()
        {
            return ((AUT_MODIFICA_PERC_AIUTOType)(this.MemberwiseClone()));
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public class PianoInvestimentiAUT_MODIFICA_PERC_AIUTO
    {

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute("AUT_MODIFICA_PERC_AIUTO")]
        public List<AUT_MODIFICA_PERC_AIUTOType> AUTORIZZAZIONI { get; set; }

        public PianoInvestimentiAUT_MODIFICA_PERC_AIUTO()
        {
            this.AUTORIZZAZIONI = new List<AUT_MODIFICA_PERC_AIUTOType>();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(PianoInvestimentiAUT_MODIFICA_PERC_AIUTO));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current PianoInvestimentiAUT_MODIFICA_PERC_AIUTO object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.OmitXmlDeclaration = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an PianoInvestimentiAUT_MODIFICA_PERC_AIUTO object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output PianoInvestimentiAUT_MODIFICA_PERC_AIUTO object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out PianoInvestimentiAUT_MODIFICA_PERC_AIUTO obj, out System.Exception exception)
        {
            exception = null;
            obj = default(PianoInvestimentiAUT_MODIFICA_PERC_AIUTO);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out PianoInvestimentiAUT_MODIFICA_PERC_AIUTO obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static PianoInvestimentiAUT_MODIFICA_PERC_AIUTO Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((PianoInvestimentiAUT_MODIFICA_PERC_AIUTO)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static PianoInvestimentiAUT_MODIFICA_PERC_AIUTO Deserialize(System.IO.Stream s)
        {
            return ((PianoInvestimentiAUT_MODIFICA_PERC_AIUTO)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current PianoInvestimentiAUT_MODIFICA_PERC_AIUTO object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an PianoInvestimentiAUT_MODIFICA_PERC_AIUTO object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output PianoInvestimentiAUT_MODIFICA_PERC_AIUTO object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out PianoInvestimentiAUT_MODIFICA_PERC_AIUTO obj, out System.Exception exception)
        {
            exception = null;
            obj = default(PianoInvestimentiAUT_MODIFICA_PERC_AIUTO);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out PianoInvestimentiAUT_MODIFICA_PERC_AIUTO obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static PianoInvestimentiAUT_MODIFICA_PERC_AIUTO LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Clone method
        /// <summary>
        /// Create a clone of this PianoInvestimentiAUT_MODIFICA_PERC_AIUTO object
        /// </summary>
        public virtual PianoInvestimentiAUT_MODIFICA_PERC_AIUTO Clone()
        {
            return ((PianoInvestimentiAUT_MODIFICA_PERC_AIUTO)(this.MemberwiseClone()));
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public class CORRETTIVA_RENDICONTAZIONE_SPOSTAMENTIType
    {
        private static XmlSerializer serializer;

        public int ID { get; set; }
        public int ID_CORRETTIVA { get; set; }
        public int ID_INVESTIMENTO_DA { get; set; }
        public int ID_INVESTIMENTO_A { get; set; }
        public decimal IMPORTO_SPOSTATO { get; set; }
        public bool CONCLUSO { get; set; }
        public bool ANNULLATO { get; set; }
        public int ID_UTENTE { get; set; }
        public System.DateTime DATA { get; set; }
        public string DESCRIZIONE { get; set; }

        public void carica(SiarLibrary.CorrettivaRendicontazioneSpostamenti correttiva_spostamenti)
        {
            ID = correttiva_spostamenti.Id;
            ID_CORRETTIVA = correttiva_spostamenti.IdCorrettiva;
            ID_INVESTIMENTO_DA = correttiva_spostamenti.IdInvestimentoDa;
            ID_INVESTIMENTO_A = correttiva_spostamenti.IdInvestimentoA;
            IMPORTO_SPOSTATO = correttiva_spostamenti.ImportoSpostato;
            CONCLUSO = correttiva_spostamenti.Concluso;
            ANNULLATO = correttiva_spostamenti.Annullato;
            ID_UTENTE = correttiva_spostamenti.IdUtente;
            DATA = correttiva_spostamenti.Data;
            DESCRIZIONE = correttiva_spostamenti.Descrizione;
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(CORRETTIVA_RENDICONTAZIONE_SPOSTAMENTIType));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current CORRETTIVA_RENDICONTAZIONE_SPOSTAMENTIType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.OmitXmlDeclaration = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an CORRETTIVA_RENDICONTAZIONE_SPOSTAMENTIType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output CORRETTIVA_RENDICONTAZIONE_SPOSTAMENTIType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out CORRETTIVA_RENDICONTAZIONE_SPOSTAMENTIType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(CORRETTIVA_RENDICONTAZIONE_SPOSTAMENTIType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out CORRETTIVA_RENDICONTAZIONE_SPOSTAMENTIType obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static CORRETTIVA_RENDICONTAZIONE_SPOSTAMENTIType Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((CORRETTIVA_RENDICONTAZIONE_SPOSTAMENTIType)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static CORRETTIVA_RENDICONTAZIONE_SPOSTAMENTIType Deserialize(System.IO.Stream s)
        {
            return ((CORRETTIVA_RENDICONTAZIONE_SPOSTAMENTIType)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current CORRETTIVA_RENDICONTAZIONE_SPOSTAMENTIType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an CORRETTIVA_RENDICONTAZIONE_SPOSTAMENTIType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output CORRETTIVA_RENDICONTAZIONE_SPOSTAMENTIType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out CORRETTIVA_RENDICONTAZIONE_SPOSTAMENTIType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(CORRETTIVA_RENDICONTAZIONE_SPOSTAMENTIType);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out CORRETTIVA_RENDICONTAZIONE_SPOSTAMENTIType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static CORRETTIVA_RENDICONTAZIONE_SPOSTAMENTIType LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Clone method
        /// <summary>
        /// Create a clone of this CORRETTIVA_RENDICONTAZIONE_SPOSTAMENTIType object
        /// </summary>
        public virtual CORRETTIVA_RENDICONTAZIONE_SPOSTAMENTIType Clone()
        {
            return ((CORRETTIVA_RENDICONTAZIONE_SPOSTAMENTIType)(this.MemberwiseClone()));
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public class PianoInvestimentiCORRETTIVA_RENDICONTAZIONE_SPOSTAMENTI
    {

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute("CORRETTIVA_RENDICONTAZIONE_SPOSTAMENTI")]
        public List<CORRETTIVA_RENDICONTAZIONE_SPOSTAMENTIType> CORRETTIVE { get; set; }

        public PianoInvestimentiCORRETTIVA_RENDICONTAZIONE_SPOSTAMENTI()
        {
            this.CORRETTIVE = new List<CORRETTIVA_RENDICONTAZIONE_SPOSTAMENTIType>();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(PianoInvestimentiCORRETTIVA_RENDICONTAZIONE_SPOSTAMENTI));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current PianoInvestimentiCORRETTIVA_RENDICONTAZIONE_SPOSTAMENTI object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.OmitXmlDeclaration = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an PianoInvestimentiCORRETTIVA_RENDICONTAZIONE_SPOSTAMENTI object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output PianoInvestimentiCORRETTIVA_RENDICONTAZIONE_SPOSTAMENTI object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out PianoInvestimentiCORRETTIVA_RENDICONTAZIONE_SPOSTAMENTI obj, out System.Exception exception)
        {
            exception = null;
            obj = default(PianoInvestimentiCORRETTIVA_RENDICONTAZIONE_SPOSTAMENTI);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out PianoInvestimentiCORRETTIVA_RENDICONTAZIONE_SPOSTAMENTI obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static PianoInvestimentiCORRETTIVA_RENDICONTAZIONE_SPOSTAMENTI Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((PianoInvestimentiCORRETTIVA_RENDICONTAZIONE_SPOSTAMENTI)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static PianoInvestimentiCORRETTIVA_RENDICONTAZIONE_SPOSTAMENTI Deserialize(System.IO.Stream s)
        {
            return ((PianoInvestimentiCORRETTIVA_RENDICONTAZIONE_SPOSTAMENTI)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current PianoInvestimentiCORRETTIVA_RENDICONTAZIONE_SPOSTAMENTI object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an PianoInvestimentiCORRETTIVA_RENDICONTAZIONE_SPOSTAMENTI object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output PianoInvestimentiCORRETTIVA_RENDICONTAZIONE_SPOSTAMENTI object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out PianoInvestimentiCORRETTIVA_RENDICONTAZIONE_SPOSTAMENTI obj, out System.Exception exception)
        {
            exception = null;
            obj = default(PianoInvestimentiCORRETTIVA_RENDICONTAZIONE_SPOSTAMENTI);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out PianoInvestimentiCORRETTIVA_RENDICONTAZIONE_SPOSTAMENTI obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static PianoInvestimentiCORRETTIVA_RENDICONTAZIONE_SPOSTAMENTI LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Clone method
        /// <summary>
        /// Create a clone of this PianoInvestimentiCORRETTIVA_RENDICONTAZIONE_SPOSTAMENTI object
        /// </summary>
        public virtual PianoInvestimentiCORRETTIVA_RENDICONTAZIONE_SPOSTAMENTI Clone()
        {
            return ((PianoInvestimentiCORRETTIVA_RENDICONTAZIONE_SPOSTAMENTI)(this.MemberwiseClone()));
        }
        #endregion
    }
}
#pragma warning restore
