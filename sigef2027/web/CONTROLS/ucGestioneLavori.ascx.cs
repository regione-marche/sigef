using System;
using System.Collections.Generic;
using System.Web.UI;
using System.Web.UI.WebControls;
using SiarLibrary.Extensions;
using SiarLibrary;
using SiarLibrary.Web;
using SiarBLL;
using System.Linq;

namespace web.CONTROLS
{
    public partial class ucGestioneLavori : SigefUserControl
    {
        //private SiarLibrary.Web.MasterPage PageMaster
        //{
        //    get { return (SiarLibrary.Web.MasterPage)Page.Master; }
        //}

        //private SiarLibrary.Web.Page PagePrivate
        //{
        //    get { return (PrivatePage)Page; }
        //}

        //private Progetto _progetto;
        //public Progetto Progetto
        //{
        //    get { return _progetto; }
        //    set { _progetto = value; }
        //}

        //private Operatore _operatore
        //{
        //    get { return PageMaster.Operatore; }
        //}

        //public string _funzione_menu
        //{
        //    get
        //    {
        //        if (PageMaster != null)
        //            return PageMaster.GetType().GetProperty("FunzionePagina").GetValue(PageMaster, null).ToString();
        //        return null;
        //    }
        //    set
        //    {
        //        if (PageMaster != null)
        //            PageMaster.GetType().GetProperty("FunzionePagina").SetValue(PageMaster, value, null);
        //    }
        //}

        //private void Redirect(string url)
        //{
        //    OnUnload(EventArgs.Empty);
        //    Response.Redirect(url, true);
        //}

        //private void Redirect(string url, string messaggio_onload, bool is_error)
        //{
        //    Session["siar_session_message_onload"] = (is_error ? "-" : "+") + messaggio_onload.ToCleanJsString();
        //    Redirect(url);
        //}

        private bool _contenitore_tondeggiante = true;
        public bool ContenitoreTondeggiante
        {
            get { return _contenitore_tondeggiante; }
            set { _contenitore_tondeggiante = value; }
        }

        //private string _css_class_titolo = "separatore";
        //public string CssClassTitolo
        //{
        //    get { return _css_class_titolo; }
        //    set { _css_class_titolo = value; }
        //}

        private bool _colonna_check = false;
        public bool ColonnaCheck
        {
            get { return _colonna_check; }
            set { _colonna_check = value; }
        }

        private List<int> _id_domande_selezionate;
        public List<int> IdDomandeSelezionate
        {
            get
            {
                List<int> id_selezionati = new List<int>();
                string[] selezionati = ((CheckColumnAgid)dgGestioneLavori.Columns[col_ColonnaCheck]).GetSelected();
                if (selezionati.Length > 0)
                    id_selezionati = selezionati.Select(int.Parse).ToList();

                return id_selezionati;
            }
            set { _id_domande_selezionate = value; }
        }

        private List<int> _id_domande_da_selezionare = new List<int>();
        public List<int> IdDomandeDaSelezionare
        {
            get { return _id_domande_da_selezionare; }
            set { _id_domande_da_selezionare = value; }
        }

        private string _descrizione_opzionale;
        public string DescrizioneOpzionale
        {
            get { return _descrizione_opzionale; }
            set { _descrizione_opzionale = value; }
        }

        //private bool _abilitaModifica;
        //public bool AbilitaModifica
        //{
        //    get
        //    {
        //        if (_operatore == null)
        //            PageMaster.SetOperatore(new SiarLibrary.NullTypes.IntNT());
        //        ProfiloXFunzioniCollection pxfcoll = new ProfiloXFunzioniCollectionProvider().
        //            Find(_operatore.Utente.IdProfilo, null, null, _funzione_menu, null, null, null, null);

        //        if (string.IsNullOrEmpty(_funzione_menu) || pxfcoll.Count == 0)
        //            throw new SiarException(TextErrorCodes.UtenteSenzaPermessi);

        //        if (pxfcoll.Count > 0)
        //            _abilitaModifica = pxfcoll[0].Modifica;

        //        return _abilitaModifica;
        //    }
        //    set { _abilitaModifica = value; }
        //}

        bool abilita_inserimento_nuova_domanda = false, pratiche_in_istruttoria = false, variante_inserita_non_istruita = false;
        int ordine_minimo_inserimento = 0, permessi_operatore = 0; bool prima_domanda = false;
        List<int> list_abilita_inserimento = new List<int>();
        decimal importo_richiesto = 0, contributo_richiesto = 0, importo_ammesso = 0, contributo_ammesso = 0;
        private bool strumenti_finanziari = false, abilita_modifica = false;

        SiarLibrary.NotAutogeneratedClasses.RiepilogoDomandePagamentoCollection domande_pagamento;
        ProgettoStoricoCollection stati_progetto;
        VariantiCollection varianti;

        SiarLibrary.NotAutogeneratedClasses.RiepilogoDomandePagamentoCollectionProvider riepilogo_provider;
        BandoConfigCollectionProvider bando_config_provider;
        VariantiCollectionProvider varianti_provider;
        PagamentiRichiestiFemCollectionProvider pag_rich_fem_provider;
        AllegatiProtocollatiCollectionProvider allegati_provider;
        IntegrazioniPerDomandaDiPagamentoCollectionProvider integrazione_provider;
        IntegrazioneSingolaDiDomandaCollectionProvider integrazioni_singole_provider;

        #region Indici colonne Datagrid

        private int col_InfoBando = 0,
                col_IdDomandaPagamento = 1,
                col_ModalitaPagamento = 2,
                col_InfoDomanda = 3,
                col_ImportoRichiesto = 4,
                col_ContributoRichiesto = 5,
                col_Segnatura = 6,
                col_Istruita = 7,
                col_InfoDomandaIstruttore = 8,
                col_ImportoAmmesso = 9,
                col_ContributoAmmesso = 10,
                col_ColonnaCheck = 11;

        #endregion

        protected void Page_Load(object sender, EventArgs e)
        {

        }

        protected override void OnPreRender(EventArgs e)
        {
            InizializzaProvider();
            InizializzaVariabili();

            if (Progetto == null)
                Redirect(PATH_PDOMANDA + "RicercaDomanda.aspx", "Per proseguire è necessario selezionare la domanda.", true);
            else if (Progetto.CodStato.FindValueIn("P", "N") || Progetto.OrdineFase < 4 /* || Progetto.CodStato == "R"*/)
                Redirect(PATH_PDOMANDA + "RicercaDomanda.aspx", "La domanda non è nello stato procedurale corretto per la visualizzazione della pagina selezionata.", true);
            else
            {
                //if (Bando == null || Bando.IdBando != Progetto.IdBando)
                //    Bando = new SiarBLL.BandoCollectionProvider().GetById(Progetto.IdProgetto);
                permessi_operatore = DbStaticProvider.GetPermessiOperatoreSuGestioneLavori(Progetto.IdProgetto, _operatore.Utente.IdUtente, null);
                if (permessi_operatore < 1)
                    Redirect(PATH_PDOMANDA + "RicercaDomanda.aspx", "L`utente non è abilitato alla prosecuzione dei lavori della domanda di aiuto selezionata.", true);
                else
                {
                    varianti = varianti_provider.Find(null, Progetto.IdProgetto, null);
                    domande_pagamento = riepilogo_provider.Find(Progetto.IdProgetto);

                    #region  elaboro la collection per le modalita' di pagamento con molteplicita > 1 o domande annullate

                    var domande_plurime = new SiarLibrary.NotAutogeneratedClasses.RiepilogoDomandePagamentoCollection();
                    int tipi_gia_contati = 0;
                    object[] tipi_da_duplicare = new object[domande_pagamento.Count + 1];

                    for (int i = 0; i < domande_pagamento.Count; i++)
                    {
                        if (domande_pagamento[i].IdDomandaPagamento != null)
                        {   //domande annullate
                            if (domande_pagamento[i].Annullata || (domande_pagamento[i].Approvata != null && !domande_pagamento[i].Approvata))
                            {
                                if (tipi_da_duplicare[i] != null && ((SiarLibrary.NotAutogeneratedClasses.RiepilogoDomandePagamento)tipi_da_duplicare[i])
                                    .CodTipo == domande_pagamento[i].CodTipo) tipi_da_duplicare[i] = null;
                                tipi_da_duplicare[i + 1] = domande_pagamento[i];
                            }
                            else
                            {
                                //molteplicita' > 1 
                                if (domande_pagamento[i].Numero > 1)
                                {
                                    if (tipi_da_duplicare[i] != null)
                                    {
                                        if (((SiarLibrary.NotAutogeneratedClasses.RiepilogoDomandePagamento)tipi_da_duplicare[i]).CodTipo ==
                                            domande_pagamento[i].CodTipo) tipi_da_duplicare[i] = null;
                                        else tipi_gia_contati = -1;
                                    }
                                    if (tipi_gia_contati < domande_pagamento[i].Numero - 1)
                                        tipi_da_duplicare[i + 1] = domande_pagamento[i];
                                    tipi_gia_contati++;
                                }
                                else if (tipi_da_duplicare[i] != null)
                                    if (((SiarLibrary.NotAutogeneratedClasses.RiepilogoDomandePagamento)tipi_da_duplicare[i]).CodTipo == domande_pagamento[i].CodTipo)
                                        tipi_da_duplicare[i] = null;
                            }
                        }
                    }

                    int contatore_inserimenti = 0;
                    for (int j = 0; j < tipi_da_duplicare.Length; j++)
                    {
                        if (tipi_da_duplicare[j] != null)
                        {
                            //inserisco nella collection all'indice i+contatore_inserimenti
                            SiarLibrary.NotAutogeneratedClasses.RiepilogoDomandePagamento tipo_da_duplicare,
                                nuovo_tipo = new SiarLibrary.NotAutogeneratedClasses.RiepilogoDomandePagamento();
                            tipo_da_duplicare = (SiarLibrary.NotAutogeneratedClasses.RiepilogoDomandePagamento)tipi_da_duplicare[j];

                            //se e' un saldo non lo duplico, ce ne puo' essere uno solo
                            if (tipo_da_duplicare.CodTipo == "SLD" && !tipo_da_duplicare.Annullata)
                                continue;

                            nuovo_tipo.CodTipo = tipo_da_duplicare.CodTipo;
                            nuovo_tipo.Descrizione = tipo_da_duplicare.Descrizione;
                            nuovo_tipo.Numero = tipo_da_duplicare.Numero;
                            nuovo_tipo.QuotaMax = tipo_da_duplicare.QuotaMax;
                            nuovo_tipo.QuotaMin = tipo_da_duplicare.QuotaMin;
                            nuovo_tipo.ImportoMax = tipo_da_duplicare.ImportoMax;
                            nuovo_tipo.ImportoMin = tipo_da_duplicare.ImportoMin;
                            nuovo_tipo.CodFase = tipo_da_duplicare.CodFase;
                            nuovo_tipo.Fase = tipo_da_duplicare.Fase;
                            nuovo_tipo.Ordine = tipo_da_duplicare.Ordine;
                            domande_pagamento.Insert(j + contatore_inserimenti++, nuovo_tipo);
                        }
                    }

                    #endregion

                    #region abilita nuova domanda pagamento

                    // IMPORTANTE: IMPOSTARE LA MODIFICA DELLE PAGINE IN PROFILO X FUNZIONI SOLO PER GLI UTENTI DI INSERIMENTO (CAA, CONSULENTI)

                    //controllo se ho varianti ancora da istruire
                    foreach (Varianti v in varianti)
                    {
                        if ((v.Segnatura != null && (v.Annullata == false) && v.SegnaturaApprovazione == null) || v.Segnatura == null)
                            variante_inserita_non_istruita = true;
                    }

                    //verifico se il progetto è finanzibile
                    bool finanzibile = true;
                    if (Progetto.OrdineFase == 4 && Progetto.CodStato == "G")
                        finanzibile = false;


                    pratiche_in_istruttoria = varianti.FiltroGenerale(null, null, null, "VI", true, true, null, null).Count > 0 ||
                        domande_pagamento.FiltroInLavorazione().Count > 0;
                    abilita_inserimento_nuova_domanda = AbilitaModifica && permessi_operatore == 2 && Progetto.OrdineFase > 3 &&
                        Progetto.OrdineFase < 9 && Progetto.OrdineStato == 1 && finanzibile;
                    stati_progetto = new ProgettoStoricoCollectionProvider().Find(Progetto.IdProgetto, null, null);

                    if (abilita_inserimento_nuova_domanda)
                    {
                        int count = 0;
                        bool SelezionaDomandeSuccessive = false;

                        foreach (SiarLibrary.NotAutogeneratedClasses.RiepilogoDomandePagamento d in domande_pagamento)
                        {
                            if (d.IdDomandaPagamento == null)
                            {
                                count++;
                                if (SelezionaDomandeSuccessive)
                                    list_abilita_inserimento.Add(d.Ordine);
                            }

                            //mi segno l'ordine dell'ultima domanda inserita senza istruttoria conlusa
                            if (d.IdDomandaPagamento != null && (d.Approvata == null || d.Approvata))
                            {
                                if (d.Segnatura == null)
                                {
                                    list_abilita_inserimento.Clear();
                                    break;
                                }
                                else
                                {
                                    if (d.CodTipo == "SLD" && !d.Annullata)
                                        list_abilita_inserimento.Clear();
                                    SelezionaDomandeSuccessive = true;
                                }
                                //Con istruttoria conclusa
                                //if (d.IdDomandaPagamento != null && (d.Approvata == null || d.Approvata))
                                //{
                                //    if (d.Segnatura == null || (d.Segnatura!= null && d.Approvata!= true && d.Annullata== false))
                                //    {
                                //        list_abilita_inserimento.Clear();
                                //        break;
                                //    }
                                //    else
                                //    {
                                //        if (d.Approvata == true || d.Annullata == true)
                                //        {
                                //            if (d.CodTipo == "SLD" && !d.Annullata)
                                //                list_abilita_inserimento.Clear();
                                //            SelezionaDomandeSuccessive = true;
                                //        }
                                //    }


                                //SiarLibrary.ProgettoStoricoCollection stato = stati_progetto.FiltroFase(d.CodFase);
                                //if (stato.Count == 0 || stato[0].Segnatura == null)
                                //{// controllo che lo stato della domanda di aiuto sia cambiato ovvero che l'istruttore abbia istruito il pagamento
                                //    abilita_inserimento_nuova_domanda = false;
                                //    break;
                                //}
                            }
                            else if (d.IdDomandaPagamento != null && (!d.Approvata) && d.CodTipo == "ANT")
                            {
                                if (d.Segnatura == null)
                                {
                                    list_abilita_inserimento.Clear();
                                    break;
                                }
                                else
                                {
                                    SelezionaDomandeSuccessive = true;
                                }

                            }
                        }

                        if (count == domande_pagamento.Count)
                            prima_domanda = true;
                    }

                    #endregion
                }
            }

            var utAppalto = bando_config_provider.GetBandoConfig_TpAppaltoDescrizione(Progetto.IdBando);
            if (utAppalto != null && utAppalto == "Strumenti finanziari")
                strumenti_finanziari = true;

            dgGestioneLavori.DataSource = domande_pagamento;
            if (domande_pagamento.Count == 0)
                dgGestioneLavori.Titolo = "Nessuna domanda di pagamento prevista per il bando.";
            dgGestioneLavori.ItemDataBound += new DataGridItemEventHandler(dgGestioneLavori_ItemDataBound);

            if (ColonnaCheck)
            {
                dgGestioneLavori.Columns[col_ColonnaCheck].HeaderStyle.CssClass = "";
                dgGestioneLavori.Columns[col_ColonnaCheck].ItemStyle.CssClass = "";
                dgGestioneLavori.Columns[col_ColonnaCheck].FooterStyle.CssClass = "";
            }

            if (DescrizioneOpzionale != null && DescrizioneOpzionale != "")
            {
                pDescrizioneOpzionale.Style.Remove("display");
                pDescrizioneOpzionale.InnerText = DescrizioneOpzionale;
            }

            dgGestioneLavori.ShowFooter = true;
            dgGestioneLavori.FooterStyle.CssClass = "TotaliFooter";
            dgGestioneLavori.DataBind();

            base.OnPreRender(e);
        }

        private void InizializzaProvider()
        {
            riepilogo_provider = new SiarLibrary.NotAutogeneratedClasses.RiepilogoDomandePagamentoCollectionProvider();
            bando_config_provider = new BandoConfigCollectionProvider();
            varianti_provider = new VariantiCollectionProvider();
            pag_rich_fem_provider = new PagamentiRichiestiFemCollectionProvider();
            allegati_provider = new AllegatiProtocollatiCollectionProvider();
            integrazione_provider = new IntegrazioniPerDomandaDiPagamentoCollectionProvider();
            integrazioni_singole_provider = new IntegrazioneSingolaDiDomandaCollectionProvider();
        }

        private void InizializzaVariabili()
        {
            var pxfcoll = new ProfiloXFunzioniCollectionProvider().Find(_operatore.Utente.IdProfilo, null, null, _funzione_menu, null, null, null, null);

            if (string.IsNullOrEmpty(_funzione_menu) || pxfcoll.Count == 0)
                throw new SiarException(TextErrorCodes.UtenteSenzaPermessi);

            if (pxfcoll.Count > 0)
                abilita_modifica = pxfcoll[0].Modifica;

            //if (_contenitore_tondeggiante == false)
            //    divContenitore.Attributes["class"] = null;

            //divTitolo.Attributes["class"] = _css_class_titolo;
        }

        protected void btnProtocollaAllegatiGestioneLavori_Click(object sender, EventArgs e)
        {
            if (Progetto != null && Progetto.IdBando != null)
            {
                /* INIZIO VECCHIA GESTIONE
                DomandaDiPagamento domanda = null;
                int id_domanda_pagamento;
                if (int.TryParse(hdnIdDomandaPagamentoGestioneLavori.Value, out id_domanda_pagamento))
                {
                    domanda = new DomandaDiPagamentoCollectionProvider().GetById(id_domanda_pagamento);
                    if (domanda == null)
                        throw new Exception("Domanda di pagamento non esistente");
                }
                    
                var bando = new BandoCollectionProvider().GetById(_progetto.IdBando);
                var protocolloAll = new Protocollo(bando.CodEnte);
                System.Collections.ArrayList allegatiProtocollo = new System.Collections.ArrayList();
                
                // cerco gli allegati non protocollati
                var ff = new ArchivioFileCollectionProvider();
                var allegatiProtocollatiProvider = new AllegatiProtocollatiCollectionProvider();
                var apc = allegatiProtocollatiProvider.Find(null, domanda.IdDomandaPagamento, null, null, null, null, false, null);
                foreach (AllegatiProtocollati a in apc)
                {
                    ArchivioFile f = ff.GetById(a.IdFile);
                    //protocollo.addAllegato(f.NomeFile + "." + f.Tipo, f.Contenuto, f.Tipo);
                    SiarBLL.paleoWebService.Allegato all = new SiarBLL.paleoWebService.Allegato();
                    all.Descrizione = f.NomeFile;
                    all.Documento = new SiarBLL.paleoWebService.File();
                    all.Documento.Nome = f.NomeFile;

                    Dictionary<string, object> allegatoProtocollo = new Dictionary<string, object>();
                    allegatoProtocollo.Add("allegato", all);
                    allegatoProtocollo.Add("id_file", f.Id != null ? f.Id.Value : -1); //aggiunto controllo per file token cohesion che non ha id
                    allegatoProtocollo.Add("tipo_origine", "pagamento");
                    allegatoProtocollo.Add("id_origine", domanda.IdDomandaPagamento);
                    allegatiProtocollo.Add(allegatoProtocollo);
                }

                protocolloAll.addAllegatiProtocollo(allegatiProtocollo, domanda.Segnatura);

                //AllegatiProtocollatiCollection allegatiDomanda = allegatiProtocollatiProvider.Find(null, domanda.IdDomandaPagamento, null, null, null, null, null, null);

                //bool allegatiProtocollatiOk = CheckAllegatiProtocollati(domanda, allegatiDomanda.Count);
                bool allegatiProtocollatiOk = allegatiProtocollatiProvider.CheckAllegatiProtocollati(AllegatiProtocollatiCollectionProvider.TipoCheck.DomandaDiPagamento, domanda.IdDomandaPagamento, domanda.Segnatura);
                FINE VECCHIA GESTIONE
                */

                DomandaDiPagamento domanda = null;
                int id_domanda_pagamento;
                if (int.TryParse(hdnIdDomandaPagamentoGestioneLavori.Value, out id_domanda_pagamento))
                {
                    domanda = new DomandaDiPagamentoCollectionProvider().GetById(id_domanda_pagamento);
                    if (domanda == null)
                        throw new Exception("Domanda di pagamento non esistente");
                }

                object tokenCohesion = null;
                var bando = new BandoCollectionProvider().GetById(Progetto.IdBando);
                if (!bando.FirmaRichiesta)
                {
                    tokenCohesion = Session["COHESION_TOKEN"];
                    if (tokenCohesion == null || string.IsNullOrEmpty(tokenCohesion.ToString()))
                        throw new Exception("Non è stata trovata nessuna informazione sull'operatore di rilascio, impossibile continuare.");
                }

                bool allegatiProtocollatiOk = new AllegatiProtocollatiCollectionProvider()
                    .ProtocollaAllegatiSegnatura(AllegatiProtocollatiCollectionProvider.TipoCheck.DomandaDiPagamento,
                        domanda.IdDomandaPagamento,
                        domanda.Segnatura,
                        tokenCohesion);

                if (allegatiProtocollatiOk)
                    PagePrivate.ShowMessage("Domanda di " + domanda.Descrizione.Value.ToUpper() + " firmata e protocollata correttamente.");
                else
                    PagePrivate.ShowError("Domanda di aiuto presentata e protocollata correttamente. Attenzione: non tutti gli allegati sono stati inviati al protocollo, riprovare ad inviare tramite l'apposito pulsante.");
            }
            else
                throw new Exception("Progetto o bando mancante");
        }

        protected void btnRichiediPagamentoGestioneLavori_Click(object sender, EventArgs e)
        {
            try
            {
                InizializzaProvider();
                if (Progetto == null || Progetto.IdProgetto == null)
                {
                    int id_progetto;
                    if (int.TryParse(hdnIdProgettoGestioneLavori.Value, out id_progetto))
                        Progetto = new ProgettoCollectionProvider().GetById(id_progetto);

                    if (Progetto == null || Progetto.IdProgetto == null)
                        throw new Exception("Nessun progetto selezionato.");
                }

                permessi_operatore = DbStaticProvider.GetPermessiOperatoreSuGestioneLavori(Progetto.IdProgetto, _operatore.Utente.IdUtente, null);
                abilita_inserimento_nuova_domanda = permessi_operatore == 2 && Progetto.OrdineFase > 3 &&
                    Progetto.OrdineFase < 9 && Progetto.OrdineStato == 1;
                if (!abilita_inserimento_nuova_domanda)
                    throw new SiarException(TextErrorCodes.ModificaDisabilitata);
                if (string.IsNullOrEmpty(hdnTipoPagamentoGestioneLavori.Value))
                    throw new Exception("Si è verificato un errore sul server si prega di contattare l'helpdesk per segnalare il problema.");

                var domanda = new DomandaDiPagamento();
                domanda.CodTipo = hdnTipoPagamentoGestioneLavori.Value;
                domanda.IdProgetto = Progetto.IdProgetto;
                domanda.DataInserimento = DateTime.Now;
                domanda.CfOperatore = _operatore.Utente.CfUtente;
                domanda.DataModifica = DateTime.Now;
                domanda.CodEnte = _operatore.Utente.CodEnte;
                domanda.FirmaPredisposta = false;
                domanda.FirmaPredispostaRup = false;
                new DomandaDiPagamentoCollectionProvider().Save(domanda);
                Session["domanda_pagamento"] = domanda;
                Redirect(PATH_PPAGAMENTO + "DatiAnagrafici.aspx");
            }
            catch (Exception ex)
            {
                PagePrivate.ShowError(ex);
            }
        }

        protected void btnMostraProtocollo_Click(object sender, EventArgs e)
        {
            try
            {
                string segnatura = hdnSegnatura.Value;
                if (string.IsNullOrEmpty(segnatura) || segnatura == "undefined")
                    throw new Exception("Segnatura vuota");

                modaleMostraProtocollo.Segnatura = segnatura;
                ((PrivatePage)Page).RegisterClientScriptBlock(modaleMostraProtocollo.Mostra);
            }
            catch (Exception ex)
            {
                ((PrivatePage)Page).RegisterClientScriptBlock("chiudiPopupTemplate();");
                ((PrivatePage)Page).ShowError(ex.Message);
            }
        }

        #region ItemDataBound

        void dgGestioneLavori_ItemDataBound(object sender, DataGridItemEventArgs e)
        {
            DataGridItem dgi = (DataGridItem)e.Item;

            if (dgi.ItemType == ListItemType.Header)
            {
                dgi.CssClass = "TESTA1";
                dgi.Cells[col_InfoBando].ColumnSpan = 7;
                dgi.Cells[col_InfoBando].HorizontalAlign = HorizontalAlign.Center;
                dgi.Cells[col_InfoBando].Text = "DOMANDE DI PAGAMENTO</th><th colspan=4 align=center>RIEPILOGO ISTRUTTORIA</th>";
                if (ColonnaCheck)
                    dgi.Cells[col_InfoBando].Text += "<th></th>";
                dgi.Cells[col_InfoBando].Text += "</tr><tr class='TESTA'><th>Richiesta";
            }
            else if (dgi.ItemType == ListItemType.Footer)
            {
                // se il bando è a importo fisso il contributo totale lo devo cambiare                
                bool importoFisso = false;
                BandoConfigCollection config = new BandoConfigCollectionProvider().Find(Progetto.IdBando, "QUOTAFISSA", null, true, null);
                decimal contributo_quota_fissa = 0;
                if (config.Count > 0)
                {
                    importoFisso = true;
                    var q_coll = new BandoImpreseQuotaFissaCollectionProvider().Find(Progetto.IdBando, Progetto.IdImpresa, null, true);
                    if (q_coll != null && q_coll.Count > 0)
                    {
                        BandoImpreseQuotaFissa q = q_coll[0];
                        if (q != null)
                        {
                            contributo_quota_fissa = q.Quota;
                        }
                    }
                }

                // se l'importo richiesto + maggiore del contributo massimo del bando allora faccio vedere il contributo massimo del bando
                decimal importoMassimoBando = 0;
                dgi.Cells[col_ContributoRichiesto].Text = "";
                BandoTipoInvestimentiCollection bti_coll = new BandoTipoInvestimentiCollectionProvider().Find(Progetto.IdBando, 7, null);
                if (bti_coll.Count > 0 && bti_coll[0].ImportoMax != null)
                {
                    importoMassimoBando = bti_coll[0].ImportoMax;
                    if (contributo_richiesto > importoMassimoBando)
                    {
                        contributo_richiesto = importoMassimoBando;
                        dgi.Cells[col_ContributoRichiesto].Text += "** ";
                    }
                }

                if (importoFisso)
                {
                    if (contributo_richiesto > contributo_quota_fissa)
                    {
                        contributo_richiesto = contributo_quota_fissa;
                        dgi.Cells[col_ContributoRichiesto].Text += "*** ";
                    }
                }

                //Gestisco totali al netto delle detrazioni
                var detrazioni = new IrregolaritaCollectionProvider().GetDetrazioniGestioniLavori(Progetto.IdProgetto);
                TableCell td = e.Item.Cells[0];
                td.Text =
                        "<td></td>"
                        + "<td></td>"
                        + "<td></td>"
                        + "<td align='right'>" + string.Format("{0:c}", importo_richiesto) + "</td>"
                        + "<td align='right'>" + string.Format("{0:c}", contributo_richiesto) + "</td>"
                        + "<td></td>"
                        + "<td></td>"
                        + "<td></td>"
                        + "<td align='right'>" + string.Format("{0:c}", importo_ammesso) + "</td>"
                        + "<td align='right'>" + string.Format("{0:c}", contributo_ammesso) + "</td>"
                        + (ColonnaCheck ? "<td></td>" : "")
                    + "</tr>"
                    + "<tr class='TotaliFooter'>"
                        + "<td colspan=9 align='right'>Al netto delle detrazioni</td>"
                        + "<td align='right'>" + string.Format("{0:c}", (importo_ammesso
                                                                            - (detrazioni.DetrazioniImportoAmmesso != null
                                                                                 ? detrazioni.DetrazioniImportoAmmesso.Value
                                                                                 : new decimal(0)))) + "</td>"
                        + "<td align='right'>" + string.Format("{0:c}", (contributo_ammesso
                                                                            - (detrazioni.DetrazioniContributoAmmesso != null
                                                                                ? detrazioni.DetrazioniContributoAmmesso.Value
                                                                                : new decimal(0)))) + "</td>"
                        + (ColonnaCheck ? "<td></td>" : "")
                    + "</tr>";
                td.CssClass = "TotaliFooter";
            }
            else
            {
                var domanda = (SiarLibrary.NotAutogeneratedClasses.RiepilogoDomandePagamento)dgi.DataItem;

                if (domanda.IdDomandaPagamento == null)
                {
                    dgi.Cells[col_InfoBando].Text = "<input type='checkbox' disabled=true />";
                    dgi.Cells[col_Istruita].Text = "<input type='checkbox' disabled=true />";
                    if ((abilita_inserimento_nuova_domanda && list_abilita_inserimento.Contains(domanda.Ordine))
                        || prima_domanda)
                    {
                        if (variante_inserita_non_istruita)
                            dgi.Cells[col_InfoDomanda].Text = "<b>Variante/Variazione finanziaria<br>in corso</b>";
                        else
                            //dgi.Cells[col_InfoDomanda].Text = "<input type=button onclick=\"nsc_post('" + domanda.CodTipo
                            //    + "')\" value='Richiedi pagamento' style='width:130px' class='ButtonGrid'/>"; 
                            dgi.Cells[col_InfoDomanda].Text = "<input type=button onclick=\"$('[id$=hdnIdProgettoGestioneLavori]').val('" + Progetto.IdProgetto + "'); "
                                + "$('[id$=hdnTipoPagamentoGestioneLavori]').val('" + domanda.CodTipo + "'); "
                                + "$('[id$=btnRichiediPagamentoGestioneLavori]').click();\" "
                                + "value='Richiedi pagamento' style='width:130px' class='ButtonGrid'/>";
                    }
                }
                else
                {
                    dgi.Cells[col_InfoBando].Text = "<input type='checkbox' disabled=true checked />";

                    if ( ((permessi_operatore < 3 || _operatore.Utente.CodTipoEnte == "%") && domanda.Segnatura != null ) 
                        ||  domanda.Segnatura == null )
                        dgi.Cells[col_InfoDomanda].Text = "<input type=button onclick=\"location='" + PATH_PPAGAMENTO + "DatiAnagrafici.aspx?idpag="
                            + domanda.IdDomandaPagamento + "'\" value='Visualizza domanda' class='btn btn-secondary py-1'/>";

                    dgi.Cells[col_Istruita].Text = "<input type='checkbox' disabled=true />";

                    if (domanda.CodTipo == "ANT")
                    {
                        dgi.Cells[col_ImportoRichiesto].Text = "--"; dgi.Cells[col_ImportoRichiesto].Style.Add("text-align", "center");
                        dgi.Cells[col_ImportoAmmesso].Text = "--"; dgi.Cells[col_ImportoAmmesso].Style.Add("text-align", "center"); dgi.Cells[col_InfoDomandaIstruttore].Style.Add("text-align", "center");
                    }

                    if (domanda.Segnatura != null)
                    {
                        AllegatiProtocollatiCollectionProvider allegatiProvider = new AllegatiProtocollatiCollectionProvider();
                        //ar ff = allegatiProvider.Find(null, domanda.IdDomandaPagamento, null, null, null, null, null, null);

                        //int numeroAllegati = ff.Count;

                        //bool allegatiProtocollatiOk = CheckAllegatiProtocollati(domanda, numeroAllegati);
                        bool allegatiProtocollatiOk = allegatiProvider.CheckAllegatiProtocollati(AllegatiProtocollatiCollectionProvider.TipoCheck.DomandaDiPagamento, domanda.IdDomandaPagamento, domanda.Segnatura);

                        if (!allegatiProtocollatiOk)
                        {
                            //dgi.Cells[col_InfoDomanda].Text = "<input type=button onclick=\"location='" + PATH_PPAGAMENTO + "FirmaRichiesta.aspx?idpag="
                            //    + domanda.IdDomandaPagamento + "'\" value='Protocolla gli allegati' style='width:150px' class='ButtonGrid'/>";
                            dgi.Cells[col_InfoDomanda].Text = "<input type=button onclick=\"$('[id$=hdnIdDomandaPagamentoGestioneLavori]').val('" + domanda.IdDomandaPagamento + "'); "
                                + "$('[id$=btnProtocollaAllegatiGestioneLavori]').click();\" "
                                + "value='Protocolla gli allegati ' class='btn btn-secondary py-1'/>";
                        }
                        else
                        {
                            //dgi.Cells[col_Segnatura].Text = "<img src='" + PATH_IMAGES + "print_ico.gif' alt='Domanda'  onclick=\"sncAjaxCallVisualizzaProtocollo('" + domanda.Segnatura + "');\" style='cursor: pointer;'>";
                            dgi.Cells[col_Segnatura].Text = "<svg alt='Domanda' class='icon' onclick=\"MostraProtocolloNew('" + domanda.Segnatura + "');\" style='cursor: pointer;'><use href='/web/bootstrap-italia/svg/sprites.svg#it-print'></use></svg>";

                            bool in_istruttoria = !domanda.Annullata
                                && (domanda.Approvata == null || domanda.SegnaturaApprovazione == null);

                            if (in_istruttoria)
                            {
                                //nascondo la lavorazione dell'istruttoria della domanda 
                                if (permessi_operatore > 2)
                                    dgi.Cells[col_ModalitaPagamento].Text = "<b>istruttoria in corso</b>";
                                else
                                {
                                    var integrazioni_collection = integrazione_provider.Find(null, domanda.IdDomandaPagamento, false, null);

                                    if (integrazioni_collection.Count > 0)
                                    {
                                        var integrazione_domanda = integrazioni_collection[0];
                                        if (integrazione_domanda.SegnaturaIstruttore != null && !integrazione_domanda.SegnaturaIstruttore.Equals(""))
                                        {
                                            var integrazioni_singole_collection = integrazioni_singole_provider.Find(null, integrazione_domanda.IdIntegrazioneDomandaDiPagamento, null, null, null, null);
                                            string testo_cella = "<table class='news' style='margin:5px' cellpadding=0 cellspacing=0><tr><td class='newsHeader'>INTEGRATIVE RICHIESTE</td></tr><tr><td class=news style='height:30px;width:180px;text-align:center;color:black;border-top:none' onclick=\"parent.location='" + PATH_PPAGAMENTO + "IntegrazioniDomandaPagamento.aspx?idpag="
                                                + domanda.IdDomandaPagamento + "'\">Visualizza le integrazioni richieste</td></tr><br /></table>";
                                            dgi.Cells[col_InfoDomanda].Text = testo_cella;
                                        }
                                        else
                                        {
                                            dgi.Cells[col_InfoDomanda].Text = "<table class='news' style='margin:5px' cellpadding=0 cellspacing=0><tr><td class='newsHeader'>ISTRUTTORIA IN CORSO</td></tr><tr><td class=news style='height:30px;width:180px;text-align:center;color:black;border-top:none' onclick=\"SNCVisualizzaReport('rptRicevutaProtocollazioneDomandaPagamento',1,'IdDomandaPagamento="
                                                + domanda.IdDomandaPagamento + "');\">Stampa la ricevuta di protocollazione</td></tr></table>";
                                        }
                                    }
                                    else
                                    {
                                        dgi.Cells[col_InfoDomanda].Text = "<table class='news' style='margin:5px' cellpadding=0 cellspacing=0><tr><td class='newsHeader'>ISTRUTTORIA IN CORSO</td></tr><tr><td class=news style='height:30px;width:180px;text-align:center;color:black;border-top:none' onclick=\"SNCVisualizzaReport('rptRicevutaProtocollazioneDomandaPagamento',1,'IdDomandaPagamento="
                                            + domanda.IdDomandaPagamento + "');\">Stampa la ricevuta di protocollazione</td></tr></table>";
                                    }
                                }
                                domanda.ImportoAmmesso = null;
                                domanda.ContributoAmmesso = null;
                                dgi.Cells[col_ImportoAmmesso].Text = "";
                                dgi.Cells[col_ContributoAmmesso].Text = "";
                            }
                            else if (!domanda.Annullata)
                            {
                                dgi.Cells[col_Istruita].Text = "<input type='checkbox' disabled=true checked />";
                                if (domanda.Approvata != null && !domanda.Approvata)
                                {
                                    for (int i = col_ModalitaPagamento; i < 11; i++)
                                    {
                                        dgi.Cells[i].Style.Add("text-decoration", "line-through");
                                        dgi.Cells[i].Style.Add("color", "#bc3333");
                                    }
                                }
                            }

                            if (permessi_operatore > 2)
                            {
                                string testo = "Visualizza istruttoria";
                                if ((permessi_operatore == 3 || permessi_operatore == 5) && in_istruttoria)
                                    testo = "Istruisci la pratica";
                                dgi.Cells[col_InfoDomandaIstruttore].Text = "<input type=button onclick=\"location='" + PATH_IPAGAMENTO + "CheckListPagamento.aspx?idpag="
                                    + domanda.IdDomandaPagamento + "'\" value='" + testo + "' class='btn btn-secondary py-1'/>";
                            }
                        }
                    }
                    else if (AbilitaModifica && domanda.CfOperatore == _operatore.Utente.CfUtente)
                        dgi.Cells[col_InfoDomanda].Text = "<input type=button onclick=\"location='" + PATH_PPAGAMENTO + "DatiAnagrafici.aspx?idpag="
                            + domanda.IdDomandaPagamento + "'\" value='Modifica la richiesta' class='btn btn-secondary py-1'/>";

                    if (!domanda.Annullata)
                    {
                        if (!strumenti_finanziari)
                        {
                            if (domanda.ImportoRichiesto != null)
                                importo_richiesto += domanda.ImportoRichiesto;
                            if (domanda.ContributoRichiesto != null)
                                contributo_richiesto += domanda.ContributoRichiesto;

                            if (domanda.Approvata != null && domanda.Approvata)
                            {
                                if (domanda.ImportoAmmesso != null)
                                    importo_ammesso += domanda.ImportoAmmesso;
                                if (domanda.ContributoAmmesso != null)
                                    contributo_ammesso += domanda.ContributoAmmesso;
                            }
                        }
                        else
                        {
                            if (domanda.CodTipo != "ANT")
                            {
                                var pag_rich_fem_list = new PagamentiRichiestiFemCollectionProvider()
                                .Find(null, null, null, domanda.IdProgetto, domanda.IdDomandaPagamento, null)
                                .ToArrayList<PagamentiRichiestiFem>();

                                var richiesto = pag_rich_fem_list.Sum(p => p.ImportoRichiesto);
                                dgi.Cells[col_ImportoRichiesto].Text = string.Format("{0:c}", richiesto);
                                dgi.Cells[col_ContributoRichiesto].Text = string.Format("{0:c}", richiesto);
                                importo_richiesto += richiesto;
                                contributo_richiesto += richiesto;

                                if (domanda.Approvata != null && domanda.Approvata)
                                {
                                    var ammesso = pag_rich_fem_list.Sum(p => p.ImportoAmmesso);
                                    dgi.Cells[col_ImportoAmmesso].Text = string.Format("{0:c}", ammesso);
                                    dgi.Cells[col_ContributoAmmesso].Text = string.Format("{0:c}", ammesso);
                                    importo_ammesso += ammesso;
                                    contributo_ammesso += ammesso;
                                }
                            }
                            else
                            {
                                if (domanda.ImportoRichiesto != null)
                                    importo_richiesto += domanda.ImportoRichiesto;
                                if (domanda.ContributoRichiesto != null)
                                    contributo_richiesto += domanda.ContributoRichiesto;

                                if (domanda.Approvata != null && domanda.Approvata)
                                {
                                    if (domanda.ImportoAmmesso != null)
                                        importo_ammesso += domanda.ImportoAmmesso;
                                    if (domanda.ContributoAmmesso != null)
                                        contributo_ammesso += domanda.ContributoAmmesso;
                                }
                            }
                        }
                    }
                    else
                    {
                        dgi.Cells[col_InfoDomandaIstruttore].Text = "ANNULLATA DAL RICHIEDENTE";
                        if (domanda.SegnaturaAnnullamento != null)
                        {
                            var visualizza_segnatura = "<br/>" + domanda.SegnaturaAnnullamento + " <img src='" + PATH_IMAGES + "lente.png' width='10' height='10' onclick=\"sncAjaxCallVisualizzaProtocollo('" + domanda.SegnaturaAnnullamento + "');\" />";
                            dgi.Cells[col_InfoDomandaIstruttore].Text += visualizza_segnatura;
                        }

                        dgi.Cells[col_ImportoAmmesso].Text = "";
                        dgi.Cells[col_ContributoAmmesso].Text = "";
                        for (int i = col_ModalitaPagamento; i < col_Istruita; i++)
                        {
                            dgi.Cells[i].Style.Add("color", "grey");
                            dgi.Cells[i].Style.Add("text-decoration", "line-through");
                        }
                    }

                    if (ColonnaCheck && IdDomandeDaSelezionare.Count > 0)
                    {
                        if (IdDomandeDaSelezionare.Contains(domanda.IdDomandaPagamento))
                            dgi.Cells[col_ColonnaCheck].Text = dgi.Cells[col_ColonnaCheck].Text.Replace("<input", "<input checked");
                        else
                            dgi.Cells[col_ColonnaCheck].Text = dgi.Cells[col_ColonnaCheck].Text.Replace("checked", "");
                    }
                }
            }
        }

        #endregion
    }
}