using System;
using System.Web.UI;
using System.Web.UI.HtmlControls;
using System.Web.UI.WebControls;
using SiarBLL;
using System.Linq;
using System.Collections.Generic;
using SiarLibrary;
using System.Data;
using System.Data.SqlClient;
using System.Globalization;
using SiarLibrary.Extensions;

namespace web.Private.Controlli
{
    public partial class ControlliIrregolarita : SiarLibrary.Web.ControlliIrregolaritaPage
    {
        SiarLibrary.CodificaGenericaCollectionProvider codifica_generica_provider;
        SiarBLL.RegistroIrregolaritaCollectionProvider registro_irregolarita_provider;
        SiarBLL.DisposizioneCollectionProvider disposizione_provider;
        SiarLibrary.RegistroIrregolarita registro_irregolarita_selezionato;
        SiarLibrary.Disposizione disposizione_selezionata;
        SiarBLL.DomandaDiPagamentoCollectionProvider domanda_pagamento_provider;
        SiarLibrary.DomandaDiPagamento domanda_pagamento;
        SiarLibrary.NotAutogeneratedClasses.RiepilogoDomandePagamentoCollection domande_pagamento;
        SiarLibrary.NotAutogeneratedClasses.RiepilogoDomandePagamentoCollectionProvider pagamento_provider =
            new SiarLibrary.NotAutogeneratedClasses.RiepilogoDomandePagamentoCollectionProvider();

        bool abilita_inserimento_nuova_domanda = false, pratiche_in_istruttoria = false;
        int ordine_minimo_inserimento = 0, permessi_operatore = 0; bool prima_domanda = false;
        decimal importo_richiesto = 0, contributo_richiesto = 0, importo_ammesso = 0, contributo_ammesso = 0;
        List<int> list_abilita_inserimento = new List<int>();

        const int tabInfoSpecifiche = 1, tabOrigine = 2, tabIdentificazione = 3, tabSospetto = 4, tabDisposizioni = 5, tabImpattoFinanziario = 6, tabGiustificativi = 7;

        protected override void OnPreInit(EventArgs e)
        {
            FunzioneMenu = "irregolarita";
            base.OnPreInit(e);
        }

        protected void Page_Load(object sender, EventArgs e)
        {
            codifica_generica_provider = new CodificaGenericaCollectionProvider();
            registro_irregolarita_provider = new RegistroIrregolaritaCollectionProvider();
            disposizione_provider = new DisposizioneCollectionProvider();
            domanda_pagamento_provider = new DomandaDiPagamentoCollectionProvider();

            if (Irregolarita != null)
            {
                //Se arrivo dalla ricerca selezionando un irregolarità
                registro_irregolarita_selezionato = Irregolarita;
                hdnIdIrregolarita.Value = Irregolarita.IdIrregolarita;
                Irregolarita = null;
            }

            if (Progetto != null)
            {
                //Se arrivo dalla ricerca volendo inserire un irregolarità
                registro_irregolarita_selezionato = new RegistroIrregolarita();
                registro_irregolarita_selezionato.IdProgetto = Progetto.IdProgetto;
                if (DomandaPagamento != null)
                    registro_irregolarita_selezionato.IdDomandaPagamento = DomandaPagamento.IdDomandaPagamento;

                ucZoomLoaderGiustificativiProgetto.KeySearch += "|IdProgetto:" + Progetto.IdProgetto + ":h";
                //lnkNuovoGiustificativo.HRef = "javascript:" + ucZoomLoaderGiustificativiProgetto.SearchFunction;
            }
            else
            {
                //Se sto inserendo una irregolarità dalla checklist dei controlli in loco 
                int idProgetto;
                if (int.TryParse(Request.QueryString["iddom"], out idProgetto))
                    Progetto = new SiarBLL.ProgettoCollectionProvider().GetById(idProgetto);
                int idPagamento;
                if (int.TryParse(Request.QueryString["idpag"], out idPagamento))
                    DomandaPagamento = new SiarBLL.DomandaDiPagamentoCollectionProvider().GetById(idPagamento);

                if (DomandaPagamento == null || Progetto == null)
                {
                    //Se non ho nulla rimando alla ricerca del progetto a cui associare l'irregolarità
                    ShowMessage("E' necessario selezionare prima il progetto a cui associare il registro di irregolarità");
                    Response.Redirect("../Controlli/RicercaIrregolarita.aspx");
                }
            }
        }

        protected override void OnPreRender(EventArgs e)
        {
            codifica_generica_provider = new CodificaGenericaCollectionProvider();
            registro_irregolarita_provider = new RegistroIrregolaritaCollectionProvider();
            disposizione_provider = new DisposizioneCollectionProvider();
            SiarLibrary.RegistroIrregolaritaCollection irregolarita_collection = null;

            #region Sezione domanda

            if (Progetto != null)
            {
                SiarLibrary.Bando b = new SiarBLL.BandoCollectionProvider().GetById(Progetto.IdBando);
                irregolarita_collection = registro_irregolarita_provider.Find(null, Progetto.IdProgetto, null);

                Control c = LoadControl("../../CONTROLS/DatiDomanda.ascx");
                System.Type t = c.GetType();
                t.GetProperty("Progetto").SetValue(c, Progetto, null);
                t.GetProperty("Bando").SetValue(c, b, null);
                tdDomanda.Controls.Add(c);
                Session["_progetto"] = Progetto;
                Session["_bando"] = b;
            }

            #endregion

            #region Associazione combobox
            lstControlloOrigine.DataBinding += new EventHandler(lstControlloOrigine_DataBinding);
            lstControlloOrigine.DataBind();
            lstSegnalazioneOlaf.DataBinding += new EventHandler(lstBoolGenerico_DataBinding);
            lstSegnalazioneOlaf.DataBind();
            lstSospettoFrode.DataBinding += new EventHandler(lstBoolGenerico_DataBinding);
            lstSospettoFrode.DataBind();
            lstStabilitaOperazioni.DataBinding += new EventHandler(lstBoolGenerico_DataBinding);
            lstStabilitaOperazioni.DataBind();
            lstFondo.DataBinding += new EventHandler(lstFondo_DataBinding);
            lstFondo.DataBind();
            lstStatoFinanziario.DataBinding += new EventHandler(lstStatoFinanziario_DataBinding);
            lstStatoFinanziario.DataBind();
            lstCategoriaIrregolarita.DataBinding += new EventHandler(lstCategoriaIrregolarita_DataBinding);
            lstCategoriaIrregolarita.DataBind();
            lstTipoIrregolarita.DataBinding += new EventHandler(lstTipoIrregolarita_DataBinding);
            lstTipoIrregolarita.DataBind();
            lstClassificazioneIrregolarita.DataBinding += new EventHandler(lstClassificazioneIrregolarita_DataBinding);
            lstClassificazioneIrregolarita.DataBind();
            lstSpesaDecertificata.DataBinding += new EventHandler(lstBoolGenerico_DataBinding);
            lstSpesaDecertificata.DataBind();
            lstTipoDisposizione.DataBinding += new EventHandler(lstTipoDisposizione_DataBinding);
            lstTipoDisposizione.DataBind();
            lstCommessaDa.DataBinding += new EventHandler(lstCommessaDa_DataBinding);
            lstCommessaDa.DataBind();
            #endregion

            int id_irregolarita;
            if (int.TryParse(hdnIdIrregolarita.Value, out id_irregolarita))
                registro_irregolarita_selezionato = registro_irregolarita_provider.GetById(id_irregolarita);

            if (registro_irregolarita_selezionato != null)
            {
                irregolarita_collection = registro_irregolarita_provider.Find(null, registro_irregolarita_selezionato.IdProgetto, null);
                //riempiFormIrregolarita();

                ucZoomLoaderGiustificativiProgetto.KeySearch += "|IdProgetto:" + Progetto.IdProgetto + ":h";
                lnkNuovoGiustificativo.HRef = "javascript:" + ucZoomLoaderGiustificativiProgetto.SearchFunction;

                //var disposizioni_provider = new SiarBLL.DisposizioneCollectionProvider();
                //var disposizioni_collection = registro_irregolarita_selezionato.IdIrregolarita != null
                //    ? disposizioni_provider.GetDisposizioniIrregolaritaOld(registro_irregolarita_selezionato.IdIrregolarita)
                //    : new SiarLibrary.DisposizioneCollection();
                //int id_disposizione;
                //if (int.TryParse(hdnIdDisposizione.Value, out id_disposizione))
                //{
                //    disposizione_selezionata = disposizioni_provider.GetById(id_disposizione);
                //    riempiFormDisposizione();
                //    btnAggiornaDisposizione.Visible = true;
                //}
                //dgDisposizioni.DataSource = disposizioni_collection;
                //dgDisposizioni.SetTitoloNrElementi();
                //dgDisposizioni.ItemDataBound += new System.Web.UI.WebControls.DataGridItemEventHandler(dgDisposizioni_ItemDataBound);
                //dgDisposizioni.DataBind();

                var recuperi_provider = new SiarBLL.RegistroRecuperoCollectionProvider();
                var recuperi_collection = registro_irregolarita_selezionato.IdIrregolarita != null
                    ? recuperi_provider.GetByRegistroIrregolarita(registro_irregolarita_selezionato.IdIrregolarita, false)
                    : new SiarLibrary.RegistroRecuperoCollection();
                dgRegistroRecuperi.DataSource = recuperi_collection;
                dgRegistroRecuperi.SetTitoloNrElementi();
                dgRegistroRecuperi.ItemDataBound += new System.Web.UI.WebControls.DataGridItemEventHandler(dgRecuperi_ItemDataBound);
                dgRegistroRecuperi.DataBind();

                if (registro_irregolarita_selezionato.IdIrregolarita == null)
                    btnInserisciRecupero.Enabled = false;

                //var giust_x_irr_provider = new SiarBLL.GiustificativoXRegistroIrregolaritaCollectionProvider();
                //var giust_x_irr_collection = registro_irregolarita_selezionato.IdIrregolarita != null 
                //    ? giust_x_irr_provider.Find(null, null, registro_irregolarita_selezionato.IdIrregolarita, null) 
                //    : new SiarLibrary.GiustificativoXRegistroIrregolaritaCollection();
                //dgGiustificativiAssociati.DataSource = giust_x_irr_collection;
                //dgGiustificativiAssociati.SetTitoloNrElementi();
                //dgGiustificativiAssociati.ItemDataBound += new System.Web.UI.WebControls.DataGridItemEventHandler(dgGiustificativiAssociati_ItemDataBound);
                //dgGiustificativiAssociati.DataBind();
            }
            else
                registro_irregolarita_selezionato = new RegistroIrregolarita();

            dgIrregolarita.DataSource = irregolarita_collection;
            dgIrregolarita.SetTitoloNrElementi();
            dgIrregolarita.ItemDataBound += new System.Web.UI.WebControls.DataGridItemEventHandler(dgIrregolarita_ItemDataBound);
            dgIrregolarita.DataBind();

            switch (tabIrregolarita.TabSelected)
            {
                case tabInfoSpecifiche:
                    divInformazioniSpecifiche.Visible = true;
                    riempiFormSpecificheIrregolarita();
                    break;
                case tabOrigine:
                    divOrigineControllo.Visible = true;
                    riempiFormOrigineControllo();
                    break;
                case tabIdentificazione:
                    divIdentificazione.Visible = true;
                    riempiFormIdentificazione();
                    break;
                case tabSospetto:
                    divSospetto.Visible = true;
                    riempiFormInformazioniSospetto();
                    break;
                case tabDisposizioni:
                    divDisposizioni.Visible = true;
                    riempiFormDisposizione();
                    break;
                case tabImpattoFinanziario:
                    divImpattoFinanziario.Visible = true;
                    riempiFormImpattoFinanziario();
                    break;
                case tabGiustificativi:
                    divGiustificativi.Visible = true;
                    riempiFormGiustificativi();
                    break;
            }

            checkJavascriptOnPost();

            base.OnPreRender(e);
        }


        #region DataBinding ComboBox con codifica unica

        void lstControlloOrigine_DataBinding(object sender, EventArgs e)
        {
            lstControlloOrigine.Items.Clear();
            lstControlloOrigine.Items.Add(new ListItem("", ""));
            var codifica_collection = codifica_generica_provider.FTipo(10);

            if (codifica_collection.Count > 0)
                foreach (SiarLibrary.CodificaGenerica cod in codifica_collection)
                    lstControlloOrigine.Items.Add(new ListItem(cod.Descrizione, cod.Id));
        }

        void lstBoolGenerico_DataBinding(object sender, EventArgs e)
        {
            lstSegnalazioneOlaf.Items.Clear();
            lstSospettoFrode.Items.Clear();
            lstSpesaDecertificata.Items.Clear();
            lstStabilitaOperazioni.Items.Clear();
            var codifica_collection = codifica_generica_provider.FTipo(11);

            if (codifica_collection.Count > 0)
                foreach (SiarLibrary.CodificaGenerica cod in codifica_collection)
                {

                    lstSegnalazioneOlaf.Items.Add(new ListItem(cod.Descrizione, cod.Flag));
                    lstSospettoFrode.Items.Add(new ListItem(cod.Descrizione, cod.Flag));
                    lstSpesaDecertificata.Items.Add(new ListItem(cod.Descrizione, cod.Flag));
                    lstStabilitaOperazioni.Items.Add(new ListItem(cod.Descrizione, cod.Flag));
                }
        }

        void lstFondo_DataBinding(object sender, EventArgs e)
        {
            lstFondo.Items.Clear();
            lstFondo.Items.Add(new ListItem("", ""));
            var codifica_collection = codifica_generica_provider.FTipo(12);

            if (codifica_collection.Count > 0)
                foreach (SiarLibrary.CodificaGenerica cod in codifica_collection)
                    lstFondo.Items.Add(new ListItem(cod.Descrizione, cod.Id));
        }

        void lstStatoFinanziario_DataBinding(object sender, EventArgs e)
        {
            lstStatoFinanziario.Items.Clear();
            lstStatoFinanziario.Items.Add(new ListItem("", ""));
            var codifica_collection = codifica_generica_provider.FTipo(14);

            if (codifica_collection.Count > 0)
                foreach (SiarLibrary.CodificaGenerica cod in codifica_collection)
                    lstStatoFinanziario.Items.Add(new ListItem(cod.Descrizione, cod.Id));
        }

        void lstCategoriaIrregolarita_DataBinding(object sender, EventArgs e)
        {
            lstCategoriaIrregolarita.Items.Clear();
            lstCategoriaIrregolarita.Items.Add(new ListItem("", ""));
            var codifica_collection = codifica_generica_provider.FTipo(16);

            if (codifica_collection.Count > 0)
                foreach (SiarLibrary.CodificaGenerica cod in codifica_collection)
                    lstCategoriaIrregolarita.Items.Add(new ListItem(cod.Descrizione, cod.Id));
        }

        void lstTipoIrregolarita_DataBinding(object sender, EventArgs e)
        {
            lstTipoIrregolarita.Items.Clear();
            lstTipoIrregolarita.Items.Add(new ListItem("", ""));
            var codifica_collection = codifica_generica_provider.FTipo(17);

            if (codifica_collection.Count > 0)
                foreach (SiarLibrary.CodificaGenerica cod in codifica_collection)
                    lstTipoIrregolarita.Items.Add(new ListItem(cod.Descrizione, cod.Id));

            //var codifica_collection = codifica_generica_provider.FTipo(17);
            string json = "var jsonTipoIrregolarita=" + codifica_collection.ConvertToJSonObject() + ";";
            ScriptManager.RegisterStartupScript(this.Page, Page.GetType(), "jsonTipoIrregolarita", json, true);
        }

        void lstClassificazioneIrregolarita_DataBinding(object sender, EventArgs e)
        {
            lstClassificazioneIrregolarita.Items.Clear();
            lstClassificazioneIrregolarita.Items.Add(new ListItem("", ""));
            var codifica_collection = codifica_generica_provider.FTipo(18);

            if (codifica_collection.Count > 0)
                foreach (SiarLibrary.CodificaGenerica cod in codifica_collection)
                    lstClassificazioneIrregolarita.Items.Add(new ListItem(cod.Descrizione, cod.Id));
        }

        void lstTipoDisposizione_DataBinding(object sender, EventArgs e)
        {
            lstTipoDisposizione.Items.Clear();
            lstTipoDisposizione.Items.Add(new ListItem("", ""));
            var codifica_collection = codifica_generica_provider.FTipo(15);

            if (codifica_collection.Count > 0)
                foreach (SiarLibrary.CodificaGenerica cod in codifica_collection)
                    lstTipoDisposizione.Items.Add(new ListItem(cod.Descrizione, cod.Id));
        }

        void lstCommessaDa_DataBinding(object sender, EventArgs e)
        {
            lstCommessaDa.Items.Clear();
            lstCommessaDa.Items.Add(new ListItem("", ""));

            var priorita_aggregazione_collection = new SiarBLL.PrioritaCollectionProvider().Find(null, null, null, null, null, null, null, "Per domande presentate in forma aggregata selezionare l`aggregazione di impresa.", null);
            if (priorita_aggregazione_collection.Count > 0)
            {
                var priorita_aggregazione = priorita_aggregazione_collection[0];
                var prior_x_prog_collection = new SiarBLL.PrioritaXProgettoCollectionProvider().Find(Progetto.IdProgetto, priorita_aggregazione.IdPriorita, null);
                if (prior_x_prog_collection.Count > 0) // se è un aggregazione, prendo l'id e le relative imprese
                {
                    int id_aggregazione = Convert.ToInt16(prior_x_prog_collection[0].ValTesto);
                    var impresa_aggregazione_collection = new SiarBLL.ImpresaAggregazioneCollectionProvider().Find(id_aggregazione, null, null, null, null); //GetById(id_aggregazione);
                    foreach (SiarLibrary.ImpresaAggregazione impresa_aggregazione in impresa_aggregazione_collection)
                        lstCommessaDa.Items.Add(new ListItem(impresa_aggregazione.RagioneSociale, impresa_aggregazione.IdImpresa));
                }
                else // prendo solamente l'impresa collegata al progetto
                {
                    var impresa = new SiarBLL.ImpresaCollectionProvider().GetById(Progetto.IdImpresa);
                    lstCommessaDa.Items.Add(new ListItem(impresa.RagioneSociale, impresa.IdImpresa));
                }
            }

            lstCommessaDa.Items.Add(new ListItem("Altro (specificare)", "0"));
        }

        #endregion

        private void riempiFormDomandaPagamento()
        {
            if (registro_irregolarita_selezionato.IdDomandaPagamento != null || DomandaPagamento != null)
            {
                divDomandaIrregolarita.Visible = true;

                SiarLibrary.NullTypes.IntNT id_domanda = registro_irregolarita_selezionato.IdDomandaPagamento != null ? registro_irregolarita_selezionato.IdDomandaPagamento : DomandaPagamento.IdDomandaPagamento;

                permessi_operatore = SiarLibrary.DbStaticProvider.GetPermessiOperatoreSuGestioneLavori(Progetto.IdProgetto, Operatore.Utente.IdUtente, null);
                domande_pagamento = pagamento_provider.Find(Progetto.IdProgetto, id_domanda);
                dgDomandaIrregolarita.DataSource = domande_pagamento;
                if (domande_pagamento.Count == 0)
                    dgDomandaIrregolarita.Titolo = "Nessuna domanda di pagamento prevista per il bando.";
                dgDomandaIrregolarita.ItemDataBound += new DataGridItemEventHandler(dgDomandaIrregolarita_ItemDataBound);
                dgDomandaIrregolarita.ShowFooter = true;
                dgDomandaIrregolarita.FooterStyle.CssClass = "TotaliFooter";
                dgDomandaIrregolarita.DataBind();
            }
        }

        private void riempiCampiOrigineControllo()
        {
            registro_irregolarita_selezionato.IdControlloOrigine = lstControlloOrigine.SelectedValue;
            registro_irregolarita_selezionato.DescrizioneControlloEsterno = txtDescrizioneControlloOrigineEsterno.Text;
            registro_irregolarita_selezionato.SegnalazioneOlaf = lstSegnalazioneOlaf.SelectedValue;
            registro_irregolarita_selezionato.DataSegnalazione = txtDataSegnalazioneIrregolarita.Text;
            registro_irregolarita_selezionato.TrimestreSegnalazione = txtTrimestreSegnalazioneIrregolarita.Text;
            registro_irregolarita_selezionato.NumeroRiferimentoOlaf = txtNumRiferimentoOLAF.Text;
            registro_irregolarita_selezionato.SospettoFrode = lstSospettoFrode.SelectedValue;
            registro_irregolarita_selezionato.ImportoIrregolareCertificato = txtImportoIrregolareGiaCertificato.Text;
            registro_irregolarita_selezionato.ImportoIrregolareDaRecuperare = txtImportoIrregolareDaRecuperare.Text;
        }

        private void riempiFormOrigineControllo()
        {
            lstControlloOrigine.SelectedValue = registro_irregolarita_selezionato.IdControlloOrigine;
            txtDescrizioneControlloOrigineEsterno.Text = registro_irregolarita_selezionato.DescrizioneControlloEsterno;
            lstSegnalazioneOlaf.SelectedValue = checkBoolLst(registro_irregolarita_selezionato.SegnalazioneOlaf);
            txtDataSegnalazioneIrregolarita.Text = registro_irregolarita_selezionato.DataSegnalazione;
            txtTrimestreSegnalazioneIrregolarita.Text = registro_irregolarita_selezionato.TrimestreSegnalazione;
            txtNumRiferimentoOLAF.Text = registro_irregolarita_selezionato.NumeroRiferimentoOlaf;
            lstSospettoFrode.SelectedValue = checkBoolLst(registro_irregolarita_selezionato.SospettoFrode);
            txtImportoIrregolareGiaCertificato.Text = registro_irregolarita_selezionato.ImportoIrregolareCertificato;
            txtImportoIrregolareDaRecuperare.Text = registro_irregolarita_selezionato.ImportoIrregolareDaRecuperare;
        }

        private void riempiCampiIdentificazione()
        {
            registro_irregolarita_selezionato.IdFondo = lstFondo.SelectedValue;
            registro_irregolarita_selezionato.Anno = txtAnnoIdentificazione.Text;
            registro_irregolarita_selezionato.PeriodoProgrammazione = txtPeriodoProgrammazione.Text;
            registro_irregolarita_selezionato.NumeroRiferimentoNazionale = txtNumeroRiferimentoNazionale.Text;
            registro_irregolarita_selezionato.DataCreazioneIdentificazione = txtDataCreazioneIdentificazione.Text;
            registro_irregolarita_selezionato.TrimestreIdentificazione = txtTrimestreIdentificazione.Text;
            registro_irregolarita_selezionato.ProcedimentoAmministrativo = chkProcedimentoAmministrativo.Checked;
            registro_irregolarita_selezionato.AzioneGiudiziaria = chkAzioneGiudiziaria.Checked;
            registro_irregolarita_selezionato.AzionePenale = chkAzionePenale.Checked;
            registro_irregolarita_selezionato.IdStatoFinanziario = lstStatoFinanziario.SelectedValue;
            registro_irregolarita_selezionato.StabilitaOperazioni = lstStabilitaOperazioni.SelectedValue;
        }

        private void riempiFormIdentificazione()
        {
            lstFondo.SelectedValue = registro_irregolarita_selezionato.IdFondo;
            txtAnnoIdentificazione.Text = registro_irregolarita_selezionato.Anno;
            txtPeriodoProgrammazione.Text = registro_irregolarita_selezionato.PeriodoProgrammazione;
            txtNumeroRiferimentoNazionale.Text = registro_irregolarita_selezionato.NumeroRiferimentoNazionale;
            txtDataCreazioneIdentificazione.Text = registro_irregolarita_selezionato.DataCreazioneIdentificazione;
            txtTrimestreIdentificazione.Text = registro_irregolarita_selezionato.TrimestreIdentificazione;
            chkProcedimentoAmministrativo.Checked = registro_irregolarita_selezionato.ProcedimentoAmministrativo ?? false;
            chkAzioneGiudiziaria.Checked = registro_irregolarita_selezionato.AzioneGiudiziaria ?? false;
            chkAzionePenale.Checked = registro_irregolarita_selezionato.AzionePenale ?? false;
            lstStatoFinanziario.SelectedValue = registro_irregolarita_selezionato.IdStatoFinanziario;
            lstStabilitaOperazioni.SelectedValue = checkBoolLst(registro_irregolarita_selezionato.StabilitaOperazioni);
        }

        private void riempiCampiInformazioniSospetto()
        {
            registro_irregolarita_selezionato.DataPrimaInformazioneSospetto = txtDataPrimaInformazione.Text;
            registro_irregolarita_selezionato.FontePrimaInformazioneSospetto = txtFontePrimaInformazione.Text;
        }

        private void riempiFormInformazioniSospetto()
        {
            txtDataPrimaInformazione.Text = registro_irregolarita_selezionato.DataPrimaInformazioneSospetto;
            txtFontePrimaInformazione.Text = registro_irregolarita_selezionato.FontePrimaInformazioneSospetto;
        }

        private void riempiCampiSpecificheIrregolarita()
        {
            registro_irregolarita_selezionato.DataIrregolarita = txtDataIrregolaritaCommessaIl.Text;
            registro_irregolarita_selezionato.DataIrregolaritaDa = txtDataIrregolaritaCommessaDa.Text;
            registro_irregolarita_selezionato.DataIrregolaritaA = txtDataIrregolaritaCommessaA.Text;
            registro_irregolarita_selezionato.IdImpresaCommessaDa = lstCommessaDa.SelectedValue;
            registro_irregolarita_selezionato.NoteCommessaDa = txtCommessaDa.Text;
            registro_irregolarita_selezionato.CommessaA = txtCommessaA.Text;
            registro_irregolarita_selezionato.IdCategoriaIrregolarita = lstCategoriaIrregolarita.SelectedValue;
            registro_irregolarita_selezionato.IdTipoIrregolarita = lstTipoIrregolarita.SelectedValue;
            registro_irregolarita_selezionato.IdClassificazioneIrregolarita = lstClassificazioneIrregolarita.SelectedValue;
            registro_irregolarita_selezionato.ModusOperandi = txtModusOperandi.Text;
            registro_irregolarita_selezionato.DichiarazioneOperatore = txtDichiarazioniOperatore.Text;
            registro_irregolarita_selezionato.AccertamentiAmministratore = txtAccertamentiAmministrazione.Text;
        }

        private void riempiFormSpecificheIrregolarita()
        {
            if (registro_irregolarita_selezionato.DataIrregolarita != null)
            {
                txtDataIrregolaritaCommessaIl.Text = registro_irregolarita_selezionato.DataIrregolarita;
                txtDataIrregolaritaCommessaDa.Text = null;
                txtDataIrregolaritaCommessaA.Text = null;
                rblDataPeriodo.SelectedValue = "0";
                divDataIrregolarita.Visible = true;
                divPeriodoIrregolaritaDa.Visible = false;
                divPeriodoIrregolaritaA.Visible = false;
            }
            else if (registro_irregolarita_selezionato.DataIrregolaritaDa != null || registro_irregolarita_selezionato.DataIrregolaritaA != null)
            {
                txtDataIrregolaritaCommessaIl.Text = null;
                txtDataIrregolaritaCommessaDa.Text = registro_irregolarita_selezionato.DataIrregolaritaDa;
                txtDataIrregolaritaCommessaA.Text = registro_irregolarita_selezionato.DataIrregolaritaA;
                rblDataPeriodo.SelectedValue = "1";
                divDataIrregolarita.Visible = false;
                divPeriodoIrregolaritaDa.Visible = true;
                divPeriodoIrregolaritaA.Visible = true;
            }

            lstCommessaDa.SelectedValue = registro_irregolarita_selezionato.IdImpresaCommessaDa;
            txtCommessaDa.Text = registro_irregolarita_selezionato.NoteCommessaDa;
            txtCommessaA.Text = registro_irregolarita_selezionato.CommessaA;
            lstCategoriaIrregolarita.SelectedValue = registro_irregolarita_selezionato.IdCategoriaIrregolarita;

            //if (IsPostBack)
            //{
            //    string onload = "$('[id$=lstSegnalazioneOlaf]').change(changeSegnalazioneOlaf); ";
            //    onload += "$('[id$=lstControlloOrigine]').change(changeOrigine); $('[id$=lstControlloOrigine]').change(); ";
            //    onload += "$('[id$=lstCategoriaIrregolarita]').change(checkCategoriaIrregolarita); ";
            //    onload += "$('[id$=rblDataPeriodo]').change(checkDataPeriodo); $('[id$=rblDataPeriodo]').change(); ";

            //    //Impatto finanziario
            //    onload += "$('[id$=txtImportoSpesaQuotaUe]').change(aggiornaTotali); ";
            //    onload += "$('[id$=txtImportoSpesaQuotaNazionale]').change(aggiornaTotali); ";
            //    onload += "$('[id$=txtImportoSpesaContributoPrivato]').change(aggiornaTotali); ";
            //    onload += "$('[id$=txtImportoIrregolaritaQuotaUe]').change(aggiornaTotali); ";
            //    onload += "$('[id$=txtImportoIrregolaritaQuotaNazionale]').change(aggiornaTotali); ";
            //    onload += "$('[id$=txtImportoIrregolaritaPrivata]').change(aggiornaTotali); ";
            //    onload += "$('[id$=txtImportoIrregolaritaNonPagatoQuotaUe]').change(aggiornaTotali); ";
            //    onload += "$('[id$=txtImportoIrregolaritaNonPagatoQuotaNazionale]').change(aggiornaTotali); ";
            //    onload += "$('[id$=txtImportoIrregolaritaNonPagatoQuotaPrivata]').change(aggiornaTotali); ";
            //    onload += "$('[id$=txtImportoIrregolaritaPagatoQuotaUe]').change(aggiornaTotali); ";
            //    onload += "$('[id$=txtImportoIrregolaritaPagatoQuotaNazionale]').change(aggiornaTotali); ";
            //    onload += "$('[id$=txtImportoIrregolaritaPagatoQuotaPrivata]').change(aggiornaTotali); ";
            //    onload += "$('[id$=txtImportoDaRecuperareQuotaUe]').change(aggiornaTotali); ";
            //    onload += "$('[id$=txtImportoDaRecuperareQuotaNazionale]').change(aggiornaTotali); ";
            //    onload += "$('[id$=txtImportoDaRecuperareQuotaPrivata]').change(aggiornaTotali); ";
            //    onload += "$('[id$=txtImportoSpesaQuotaUe]').change(); ";

            //    if (registro_irregolarita_selezionato.IdTipoIrregolarita == null)
            //        onload += "$('[id$=lstCategoriaIrregolarita]').change();  ";
            //    if (registro_irregolarita_selezionato.NumeroRiferimentoOlaf == null)
            //        onload += "$('[id$=lstSegnalazioneOlaf]').change();  ";
            //    ScriptManager.RegisterStartupScript(Page, this.GetType(), "onload", onload, true);
            //}

            lstTipoIrregolarita.SelectedValue = registro_irregolarita_selezionato.IdTipoIrregolarita;
            lstClassificazioneIrregolarita.SelectedValue = registro_irregolarita_selezionato.IdClassificazioneIrregolarita;
            txtModusOperandi.Text = registro_irregolarita_selezionato.ModusOperandi;
            txtDichiarazioniOperatore.Text = registro_irregolarita_selezionato.DichiarazioneOperatore;
            txtAccertamentiAmministrazione.Text = registro_irregolarita_selezionato.AccertamentiAmministratore;

            riempiFormDomandaPagamento();
        }

        private string riempiCampiImpattoFinanziario()
        {
            string errore = "";

            if ((txtImportoSpesaQuotaUe.Text != null && !txtImportoSpesaQuotaUe.Text.Equals(""))
                || (txtImportoSpesaQuotaNazionale.Text != null && !txtImportoSpesaQuotaNazionale.Text.Equals(""))
                || (txtImportoSpesaContributoPubblico.Text != null && !txtImportoSpesaContributoPubblico.Text.Equals(""))
                || (txtImportoSpesaContributoPrivato.Text != null && !txtImportoSpesaContributoPrivato.Text.Equals(""))
                || (txtImportoSpesaTotale.Text != null && !txtImportoSpesaTotale.Text.Equals("")))
            {
                if (((Convert.ToDouble(txtImportoSpesaQuotaUe.Text) + Convert.ToDouble(txtImportoSpesaQuotaNazionale.Text))
                    != (Convert.ToDouble(txtImportoSpesaContributoPubblico.Text)))
                    || ((Convert.ToDouble(txtImportoSpesaContributoPubblico.Text) + Convert.ToDouble(txtImportoSpesaContributoPrivato.Text))
                        != Convert.ToDouble(txtImportoSpesaTotale.Text)))
                    errore += "Somma importo della spesa sbagliata.<br />";
                else
                {
                    registro_irregolarita_selezionato.ImportoSpesaUe = txtImportoSpesaQuotaUe.Text;
                    registro_irregolarita_selezionato.ImportoSpesaNazionale = txtImportoSpesaQuotaNazionale.Text;
                    registro_irregolarita_selezionato.ImportoSpesaPubblico = txtImportoSpesaContributoPubblico.Text;
                    registro_irregolarita_selezionato.ImportoSpesaPrivato = txtImportoSpesaContributoPrivato.Text;
                    registro_irregolarita_selezionato.ImportoSpesaTotale = txtImportoSpesaTotale.Text;
                }
            }

            if ((txtImportoIrregolaritaQuotaUe.Text != null && !txtImportoIrregolaritaQuotaUe.Text.Equals(""))
                || (txtImportoIrregolaritaQuotaNazionale.Text != null && !txtImportoIrregolaritaQuotaNazionale.Text.Equals(""))
                || (txtImportoIrregolaritaPubblica.Text != null && !txtImportoIrregolaritaPubblica.Text.Equals(""))
                || (txtImportoIrregolaritaPrivata.Text != null && !txtImportoIrregolaritaPrivata.Text.Equals(""))
                || (txtImportoIrregolaritaTotale.Text != null && !txtImportoIrregolaritaTotale.Text.Equals("")))
            {
                if (((Convert.ToDouble(txtImportoIrregolaritaQuotaUe.Text) + Convert.ToDouble(txtImportoIrregolaritaQuotaNazionale.Text))
                    != (Convert.ToDouble(txtImportoIrregolaritaPubblica.Text)))
                    || ((Convert.ToDouble(txtImportoIrregolaritaPubblica.Text) + Convert.ToDouble(txtImportoIrregolaritaPrivata.Text))
                        != Convert.ToDouble(txtImportoIrregolaritaTotale.Text)))
                    errore += "Somma importo dell'irregolarità sbagliata.<br />";
                else
                {
                    registro_irregolarita_selezionato.ImportoIrregolaritaUe = txtImportoIrregolaritaQuotaUe.Text;
                    registro_irregolarita_selezionato.ImportoIrregolaritaNazionale = txtImportoIrregolaritaQuotaNazionale.Text;
                    registro_irregolarita_selezionato.ImportoIrregolaritaPubblico = txtImportoIrregolaritaPubblica.Text;
                    registro_irregolarita_selezionato.ImportoIrregolaritaPrivato = txtImportoIrregolaritaPrivata.Text;
                    registro_irregolarita_selezionato.ImportoIrregolaritaTotale = txtImportoIrregolaritaTotale.Text;
                }
            }

            if ((txtImportoIrregolaritaNonPagatoQuotaUe.Text != null && !txtImportoIrregolaritaNonPagatoQuotaUe.Text.Equals(""))
                || (txtImportoIrregolaritaNonPagatoQuotaNazionale.Text != null && !txtImportoIrregolaritaNonPagatoQuotaNazionale.Text.Equals(""))
                || (txtImportoIrregolaritaNonPagatoQuotaPubblica.Text != null && !txtImportoIrregolaritaNonPagatoQuotaPubblica.Text.Equals(""))
                || (txtImportoIrregolaritaNonPagatoQuotaPrivata.Text != null && !txtImportoIrregolaritaNonPagatoQuotaPrivata.Text.Equals(""))
                || (txtImportoIrregolaritaNonPagatoTotale.Text != null && !txtImportoIrregolaritaNonPagatoTotale.Text.Equals("")))
            {
                if (((Convert.ToDouble(txtImportoIrregolaritaNonPagatoQuotaUe.Text) + Convert.ToDouble(txtImportoIrregolaritaNonPagatoQuotaNazionale.Text))
                    != (Convert.ToDouble(txtImportoIrregolaritaNonPagatoQuotaPubblica.Text)))
                    || ((Convert.ToDouble(txtImportoIrregolaritaNonPagatoQuotaPubblica.Text) + Convert.ToDouble(txtImportoIrregolaritaNonPagatoQuotaPrivata.Text))
                        != Convert.ToDouble(txtImportoIrregolaritaNonPagatoTotale.Text)))
                    errore += "Somma importo dell'irregolarità NON pagato sbagliata.<br />";
                else
                {
                    registro_irregolarita_selezionato.ImportoIrregolaritaNonPagatoUe = txtImportoIrregolaritaNonPagatoQuotaUe.Text;
                    registro_irregolarita_selezionato.ImportoIrregolaritaNonPagatoNazionale = txtImportoIrregolaritaNonPagatoQuotaNazionale.Text;
                    registro_irregolarita_selezionato.ImportoIrregolaritaNonPagatoPubblico = txtImportoIrregolaritaNonPagatoQuotaPubblica.Text;
                    registro_irregolarita_selezionato.ImportoIrregolaritaNonPagatoPrivato = txtImportoIrregolaritaNonPagatoQuotaPrivata.Text;
                    registro_irregolarita_selezionato.ImportoIrregolaritaNonPagatoTotale = txtImportoIrregolaritaNonPagatoTotale.Text;
                }
            }

            if ((txtImportoIrregolaritaPagatoQuotaUe.Text != null && !txtImportoIrregolaritaPagatoQuotaUe.Text.Equals(""))
                || (txtImportoIrregolaritaPagatoQuotaNazionale.Text != null && !txtImportoIrregolaritaPagatoQuotaNazionale.Text.Equals(""))
                || (txtImportoIrregolaritaPagatoQuotaPubblica.Text != null && !txtImportoIrregolaritaPagatoQuotaPubblica.Text.Equals(""))
                || (txtImportoIrregolaritaPagatoQuotaPrivata.Text != null && !txtImportoIrregolaritaPagatoQuotaPrivata.Text.Equals(""))
                || (txtImportoIrregolaritaPagatoTotale.Text != null && !txtImportoIrregolaritaPagatoTotale.Text.Equals("")))
            {
                if (((Convert.ToDouble(txtImportoIrregolaritaPagatoQuotaUe.Text) + Convert.ToDouble(txtImportoIrregolaritaPagatoQuotaNazionale.Text))
                    != (Convert.ToDouble(txtImportoIrregolaritaPagatoQuotaPubblica.Text)))
                    || ((Convert.ToDouble(txtImportoIrregolaritaPagatoQuotaPubblica.Text) + Convert.ToDouble(txtImportoIrregolaritaPagatoQuotaPrivata.Text))
                        != Convert.ToDouble(txtImportoIrregolaritaPagatoTotale.Text)))
                    errore += "Somma importo dell'irregolarità PAGATO sbagliata.<br />";
                else
                {
                    registro_irregolarita_selezionato.ImportoIrregolaritaPagatoUe = txtImportoIrregolaritaPagatoQuotaUe.Text;
                    registro_irregolarita_selezionato.ImportoIrregolaritaPagatoNazionale = txtImportoIrregolaritaPagatoQuotaNazionale.Text;
                    registro_irregolarita_selezionato.ImportoIrregolaritaPagatoPubblico = txtImportoIrregolaritaPagatoQuotaPubblica.Text;
                    registro_irregolarita_selezionato.ImportoIrregolaritaPagatoPrivato = txtImportoIrregolaritaPagatoQuotaPrivata.Text;
                    registro_irregolarita_selezionato.ImportoIrregolaritaPagatoTotale = txtImportoIrregolaritaPagatoTotale.Text;
                }
            }

            if ((txtImportoDaRecuperareQuotaUe.Text != null && !txtImportoDaRecuperareQuotaUe.Text.Equals(""))
                || (txtImportoDaRecuperareQuotaNazionale.Text != null && !txtImportoDaRecuperareQuotaNazionale.Text.Equals(""))
                || (txtImportoDaRecuperareQuotaPubblica.Text != null && !txtImportoDaRecuperareQuotaPubblica.Text.Equals(""))
                || (txtImportoDaRecuperareQuotaPrivata.Text != null && !txtImportoDaRecuperareQuotaPrivata.Text.Equals(""))
                || (txtImportoDaRecuperareTotale.Text != null && !txtImportoDaRecuperareTotale.Text.Equals("")))
            {
                if (((Convert.ToDouble(txtImportoDaRecuperareQuotaUe.Text) + Convert.ToDouble(txtImportoDaRecuperareQuotaNazionale.Text))
                    != (Convert.ToDouble(txtImportoDaRecuperareQuotaPubblica.Text)))
                    || ((Convert.ToDouble(txtImportoDaRecuperareQuotaPubblica.Text) + Convert.ToDouble(txtImportoDaRecuperareQuotaPrivata.Text))
                        != Convert.ToDouble(txtImportoDaRecuperareTotale.Text)))
                    errore += "Somma importo da recuperare sbagliata.<br />";
                else
                {
                    registro_irregolarita_selezionato.ImportoDaRecuperareUe = txtImportoDaRecuperareQuotaUe.Text;
                    registro_irregolarita_selezionato.ImportoDaRecuperareNazionale = txtImportoDaRecuperareQuotaNazionale.Text;
                    registro_irregolarita_selezionato.ImportoDaRecuperarePubblico = txtImportoDaRecuperareQuotaPubblica.Text;
                    registro_irregolarita_selezionato.ImportoDaRecuperarePrivato = txtImportoDaRecuperareQuotaPrivata.Text;
                    registro_irregolarita_selezionato.ImportoDaRecuperareTotale = txtImportoDaRecuperareTotale.Text;
                }
            }

            registro_irregolarita_selezionato.SpesaDecertificata = lstSpesaDecertificata.SelectedValue;
            registro_irregolarita_selezionato.CommentiImpattoFinanziario = txtCommentiImpattoFinanziario.Text;

            return errore;
        }

        private void riempiFormImpattoFinanziario()
        {
            txtImportoSpesaQuotaUe.Text = registro_irregolarita_selezionato.ImportoSpesaUe;
            txtImportoSpesaQuotaNazionale.Text = registro_irregolarita_selezionato.ImportoSpesaNazionale;
            txtImportoSpesaContributoPubblico.Text = registro_irregolarita_selezionato.ImportoSpesaPubblico;
            txtImportoSpesaContributoPrivato.Text = registro_irregolarita_selezionato.ImportoSpesaPrivato;
            txtImportoSpesaTotale.Text = registro_irregolarita_selezionato.ImportoSpesaTotale;

            txtImportoIrregolaritaQuotaUe.Text = registro_irregolarita_selezionato.ImportoIrregolaritaUe;
            txtImportoIrregolaritaQuotaNazionale.Text = registro_irregolarita_selezionato.ImportoIrregolaritaNazionale;
            txtImportoIrregolaritaPubblica.Text = registro_irregolarita_selezionato.ImportoIrregolaritaPubblico;
            txtImportoIrregolaritaPrivata.Text = registro_irregolarita_selezionato.ImportoIrregolaritaPrivato;
            txtImportoIrregolaritaTotale.Text = registro_irregolarita_selezionato.ImportoIrregolaritaTotale;

            txtImportoIrregolaritaNonPagatoQuotaUe.Text = registro_irregolarita_selezionato.ImportoIrregolaritaNonPagatoUe;
            txtImportoIrregolaritaNonPagatoQuotaNazionale.Text = registro_irregolarita_selezionato.ImportoIrregolaritaNonPagatoNazionale;
            txtImportoIrregolaritaNonPagatoQuotaPubblica.Text = registro_irregolarita_selezionato.ImportoIrregolaritaNonPagatoPubblico;
            txtImportoIrregolaritaNonPagatoQuotaPrivata.Text = registro_irregolarita_selezionato.ImportoIrregolaritaNonPagatoPrivato;
            txtImportoIrregolaritaNonPagatoTotale.Text = registro_irregolarita_selezionato.ImportoIrregolaritaNonPagatoTotale;

            txtImportoIrregolaritaPagatoQuotaUe.Text = registro_irregolarita_selezionato.ImportoIrregolaritaPagatoUe;
            txtImportoIrregolaritaPagatoQuotaNazionale.Text = registro_irregolarita_selezionato.ImportoIrregolaritaPagatoNazionale;
            txtImportoIrregolaritaPagatoQuotaPubblica.Text = registro_irregolarita_selezionato.ImportoIrregolaritaPagatoPubblico;
            txtImportoIrregolaritaPagatoQuotaPrivata.Text = registro_irregolarita_selezionato.ImportoIrregolaritaPagatoPrivato;
            txtImportoIrregolaritaPagatoTotale.Text = registro_irregolarita_selezionato.ImportoIrregolaritaPagatoTotale;

            txtImportoDaRecuperareQuotaUe.Text = registro_irregolarita_selezionato.ImportoDaRecuperareUe;
            txtImportoDaRecuperareQuotaNazionale.Text = registro_irregolarita_selezionato.ImportoDaRecuperareNazionale;
            txtImportoDaRecuperareQuotaPubblica.Text = registro_irregolarita_selezionato.ImportoDaRecuperarePubblico;
            txtImportoDaRecuperareQuotaPrivata.Text = registro_irregolarita_selezionato.ImportoDaRecuperarePrivato;
            txtImportoDaRecuperareTotale.Text = registro_irregolarita_selezionato.ImportoDaRecuperareTotale;

            lstSpesaDecertificata.SelectedValue = checkBoolLst(registro_irregolarita_selezionato.SpesaDecertificata);
            txtCommentiImpattoFinanziario.Text = registro_irregolarita_selezionato.CommentiImpattoFinanziario;
        }

        //private void riempiFormIrregolarita()
        //{
        //    riempiFormDomandaPagamento();
        //    riempiFormOrigineControllo();
        //    riempiFormIdentificazione();
        //    riempiFormInformazioniSospetto();
        //    riempiFormSpecificheIrregolarita();
        //    riempiFormImpattoFinanziario();
        //}

        private string riempiCampiIrregolarita()
        {
            string errore = "";
            riempiCampiOrigineControllo();
            riempiCampiIdentificazione();
            riempiCampiInformazioniSospetto();
            riempiCampiSpecificheIrregolarita();
            errore += riempiCampiImpattoFinanziario();
            return errore;
        }

        private string riempiCampiDisposizione()
        {
            string errore = "";
            disposizione_selezionata.IdTipoDisposizione = lstTipoDisposizione.SelectedValue;
            disposizione_selezionata.Numero = txtNumeroDisposizione.Text;
            disposizione_selezionata.Anno = txtAnnoDisposizione.Text;
            disposizione_selezionata.ArticoloParagrafo = txtArticoloParagrafoDisposizione.Text;
            return errore;
        }

        private void riempiFormDisposizione()
        {
            var disposizioni_provider = new SiarBLL.DisposizioneCollectionProvider();
            var disposizioni_collection = registro_irregolarita_selezionato.IdIrregolarita != null
                ? disposizioni_provider.GetDisposizioniIrregolaritaOld(registro_irregolarita_selezionato.IdIrregolarita)
                : new SiarLibrary.DisposizioneCollection();
            int id_disposizione;
            if (int.TryParse(hdnIdDisposizione.Value, out id_disposizione))
            {
                disposizione_selezionata = disposizioni_provider.GetById(id_disposizione);
                //riempiFormDisposizione();
                btnAggiornaDisposizione.Visible = true;
            }
            dgDisposizioni.DataSource = disposizioni_collection;
            dgDisposizioni.SetTitoloNrElementi();
            dgDisposizioni.ItemDataBound += new System.Web.UI.WebControls.DataGridItemEventHandler(dgDisposizioni_ItemDataBound);
            dgDisposizioni.DataBind();

            //int id_disposizione;
            //if (int.TryParse(hdnIdDisposizione.Value, out id_disposizione))
            //    disposizione_selezionata = disposizione_provider.GetById(id_disposizione);

            //if (disposizione_selezionata == null)
            //    throw new Exception("Nessuna disposizione selezionata");

            if (disposizione_selezionata != null)
            {
                lstTipoDisposizione.SelectedValue = disposizione_selezionata.IdTipoDisposizione;
                txtNumeroDisposizione.Text = disposizione_selezionata.Numero;
                txtAnnoDisposizione.Text = disposizione_selezionata.Anno;
                txtArticoloParagrafoDisposizione.Text = disposizione_selezionata.ArticoloParagrafo;
            }
        }

        private void riempiFormGiustificativi()
        {
            //ucZoomLoaderGiustificativiProgetto.KeySearch += "|IdProgetto:" + Progetto.IdProgetto + ":h";
            //lnkNuovoGiustificativo.HRef = "javascript:" + ucZoomLoaderGiustificativiProgetto.SearchFunction;

            var giust_x_irr_provider = new SiarBLL.GiustificativoXRegistroIrregolaritaCollectionProvider();
            var giust_x_irr_collection = registro_irregolarita_selezionato.IdIrregolarita != null
                ? giust_x_irr_provider.Find(null, null, registro_irregolarita_selezionato.IdIrregolarita, null)
                : new SiarLibrary.GiustificativoXRegistroIrregolaritaCollection();
            dgGiustificativiAssociati.DataSource = giust_x_irr_collection;
            dgGiustificativiAssociati.SetTitoloNrElementi();
            dgGiustificativiAssociati.ItemDataBound += new System.Web.UI.WebControls.DataGridItemEventHandler(dgGiustificativiAssociati_ItemDataBound);
            dgGiustificativiAssociati.DataBind();
        }

        private void svuotaTuttiCampi()
        {
            try
            {
                Irregolarita = null;
                hdnIdIrregolarita.Value = null;

                registro_irregolarita_selezionato = new SiarLibrary.RegistroIrregolarita();
                //riempiFormIrregolarita();
            }
            catch (Exception ex) { ShowError(ex.ToString()); }
        }

        private string checkBoolLst(String value)
        {
            if (value == null)
                return "0";

            switch (value)
            {
                case "True": return "1";
                case "true": return "1";
                default: return "0";
            }
        }

        private void checkJavascriptOnPost()
        {
            if (IsPostBack)
            {
                string onload = "$('[id$=lstSegnalazioneOlaf]').change(changeSegnalazioneOlaf); ";
                onload += "$('[id$=lstControlloOrigine]').change(changeOrigine); $('[id$=lstControlloOrigine]').change(); ";
                onload += "$('[id$=lstCategoriaIrregolarita]').change(checkCategoriaIrregolarita); ";
                onload += "$('[id$=rblDataPeriodo]').change(checkDataPeriodo); $('[id$=rblDataPeriodo]').change(); ";

                //Impatto finanziario
                onload += "$('[id$=txtImportoSpesaQuotaUe]').change(aggiornaTotali); ";
                onload += "$('[id$=txtImportoSpesaQuotaNazionale]').change(aggiornaTotali); ";
                onload += "$('[id$=txtImportoSpesaContributoPrivato]').change(aggiornaTotali); ";
                onload += "$('[id$=txtImportoIrregolaritaQuotaUe]').change(aggiornaTotali); ";
                onload += "$('[id$=txtImportoIrregolaritaQuotaNazionale]').change(aggiornaTotali); ";
                onload += "$('[id$=txtImportoIrregolaritaPrivata]').change(aggiornaTotali); ";
                onload += "$('[id$=txtImportoIrregolaritaNonPagatoQuotaUe]').change(aggiornaTotali); ";
                onload += "$('[id$=txtImportoIrregolaritaNonPagatoQuotaNazionale]').change(aggiornaTotali); ";
                onload += "$('[id$=txtImportoIrregolaritaNonPagatoQuotaPrivata]').change(aggiornaTotali); ";
                onload += "$('[id$=txtImportoIrregolaritaPagatoQuotaUe]').change(aggiornaTotali); ";
                onload += "$('[id$=txtImportoIrregolaritaPagatoQuotaNazionale]').change(aggiornaTotali); ";
                onload += "$('[id$=txtImportoIrregolaritaPagatoQuotaPrivata]').change(aggiornaTotali); ";
                onload += "$('[id$=txtImportoDaRecuperareQuotaUe]').change(aggiornaTotali); ";
                onload += "$('[id$=txtImportoDaRecuperareQuotaNazionale]').change(aggiornaTotali); ";
                onload += "$('[id$=txtImportoDaRecuperareQuotaPrivata]').change(aggiornaTotali); ";
                onload += "$('[id$=txtImportoSpesaQuotaUe]').change(); ";

                if (registro_irregolarita_selezionato != null && registro_irregolarita_selezionato.IdTipoIrregolarita == null)
                    onload += "$('[id$=lstCategoriaIrregolarita]').change();  ";
                if (registro_irregolarita_selezionato != null && registro_irregolarita_selezionato.NumeroRiferimentoOlaf == null)
                    onload += "$('[id$=lstSegnalazioneOlaf]').change();  ";
                ScriptManager.RegisterStartupScript(Page, this.GetType(), "onload", onload, true);
            }
        }

        #region Button event

        protected void btnPost_Click(object sender, EventArgs e)
        {
            try
            {
                int id_irregolarita;
                if (int.TryParse(hdnIdIrregolarita.Value, out id_irregolarita))
                {
                    registro_irregolarita_selezionato = new SiarBLL.RegistroIrregolaritaCollectionProvider().GetById(id_irregolarita);
                    //riempiFormIrregolarita();

                    tabIrregolarita.TabSelected = tabInfoSpecifiche;
                    if (registro_irregolarita_selezionato.IdDomandaPagamento != null)
                        DomandaPagamento = new DomandaDiPagamentoCollectionProvider().GetById(registro_irregolarita_selezionato.IdDomandaPagamento);
                    else
                        DomandaPagamento = null;
                }
                else
                    ShowError("Nessun registro irregolarità selezionato");
            }
            catch (Exception ex) { ShowError(ex.ToString()); }
        }

        protected void btnCaricaDisposizione_Click(object sender, EventArgs e)
        {
            try
            {
                riempiFormDisposizione();
            }
            catch (Exception ex) { ShowError(ex.ToString()); }
        }

        protected void btnAggiornaDisposizione_Click(object sender, EventArgs e)
        {
            try
            {
                getHdnIdDisposizioneOCrea();

                string errore = riempiCampiDisposizione();
                if (errore == null || errore.Equals(""))
                {
                    new SiarBLL.DisposizioneCollectionProvider().Save(disposizione_selezionata);
                    hdnIdDisposizione.Value = disposizione_selezionata.IdDisposizione;
                    ShowMessage("Disposizione trasgredita aggiornata correttamente.");
                }
                else
                    ShowError(errore);
            }
            catch (Exception ex) { ShowError(ex); }
        }

        protected void btnInserisciDisposizione_Click(object sender, EventArgs e)
        {
            try
            {
                disposizione_selezionata = new Disposizione();
                getHdnIdRegistroIrregolaritaOCrea();
                disposizione_selezionata.IdRegistroIrregolarita = registro_irregolarita_selezionato.IdIrregolarita;
                disposizione_selezionata.CfInserimento = Operatore.Utente.CfUtente;
                disposizione_selezionata.CfModifica = Operatore.Utente.CfUtente;

                string errore = riempiCampiDisposizione();
                if (errore == null || errore.Equals(""))
                {
                    new SiarBLL.DisposizioneCollectionProvider().Save(disposizione_selezionata);
                    hdnIdDisposizione.Value = disposizione_selezionata.IdDisposizione;
                    ShowMessage("Disposizione trasgredita salvata correttamente.");
                }
                else
                    ShowError(errore);
            }
            catch (Exception ex) { ShowError(ex); }
        }

        protected void btnRimuoviDisposizione_Click(object sender, EventArgs e)
        {
            try
            {
                var disposizioni_provider = new SiarBLL.DisposizioneCollectionProvider();
                int id_disposizione;
                if (int.TryParse(hdnIdDisposizione.Value, out id_disposizione))
                    disposizione_selezionata = disposizioni_provider.GetById(id_disposizione);

                if (disposizione_selezionata == null)
                    throw new Exception("Nessuna disposizione selezionata");

                disposizioni_provider.Delete(disposizione_selezionata);
                disposizione_selezionata = null;
                hdnIdDisposizione.Value = null;
                ShowMessage("Disposizione eliminata correttamente");
            }
            catch (Exception ex) { ShowError(ex.ToString()); }
        }

        protected void btnInserisciRecupero_Click(object sender, EventArgs e)
        {
            try
            {
                SiarLibrary.RegistroIrregolarita irreg = null;
                int id_irregolarita;
                if (int.TryParse(hdnIdIrregolarita.Value, out id_irregolarita))
                    irreg = new SiarBLL.RegistroIrregolaritaCollectionProvider().GetById(id_irregolarita);

                if (irreg == null)
                    throw new Exception("Nessuna irregolarità selezionata.");

                Irregolarita = irreg;
                Response.Redirect("../Controlli/RegistroRecuperi.aspx?idreg=" + Irregolarita.IdIrregolarita);
            }
            catch (Exception ex) { ShowError(ex); }
        }

        protected void btnSalvaControlloIrregolarita_Click(object sender, EventArgs e)
        {
            try
            {
                getHdnIdRegistroIrregolaritaOCrea();

                string errore = riempiCampiIrregolarita();
                if (errore == null || errore.Equals(""))
                {
                    new SiarBLL.RegistroIrregolaritaCollectionProvider().Save(registro_irregolarita_selezionato);
                    hdnIdIrregolarita.Value = registro_irregolarita_selezionato.IdIrregolarita;
                    Irregolarita = registro_irregolarita_selezionato;
                    ShowMessage("Dati di controllo irregolarità salvati correttamente.");
                }
                else
                    ShowError(errore);
            }
            catch (Exception ex) { ShowError(ex.ToString()); }
        }

        protected void btnSalvaOrigineControllo_Click(object sender, EventArgs e)
        {
            try
            {
                getHdnIdRegistroIrregolaritaOCrea();

                riempiCampiOrigineControllo();
                new SiarBLL.RegistroIrregolaritaCollectionProvider().Save(registro_irregolarita_selezionato);
                hdnIdIrregolarita.Value = registro_irregolarita_selezionato.IdIrregolarita;
                Irregolarita = registro_irregolarita_selezionato;
                ShowMessage("Dati di origine controllo salvati correttamente.");
            }
            catch (Exception ex) { ShowError(ex.ToString()); }
        }

        protected void btnSalvaIdentificazione_Click(object sender, EventArgs e)
        {
            try
            {
                getHdnIdRegistroIrregolaritaOCrea();

                riempiCampiIdentificazione();
                new SiarBLL.RegistroIrregolaritaCollectionProvider().Save(registro_irregolarita_selezionato);
                hdnIdIrregolarita.Value = registro_irregolarita_selezionato.IdIrregolarita;
                Irregolarita = registro_irregolarita_selezionato;
                ShowMessage("Dati di identificazione salvati correttamente.");
            }
            catch (Exception ex) { ShowError(ex.ToString()); }
        }

        protected void btnSalvaInformazioniSospetto_Click(object sender, EventArgs e)
        {
            try
            {
                getHdnIdRegistroIrregolaritaOCrea();

                riempiCampiInformazioniSospetto();
                new SiarBLL.RegistroIrregolaritaCollectionProvider().Save(registro_irregolarita_selezionato);
                hdnIdIrregolarita.Value = registro_irregolarita_selezionato.IdIrregolarita;
                Irregolarita = registro_irregolarita_selezionato;
                ShowMessage("Dati di informazioni sul sospetto salvati correttamente.");
            }
            catch (Exception ex) { ShowError(ex.ToString()); }
        }

        protected void btnSalvaSpecificheIrregolarita_Click(object sender, EventArgs e)
        {
            try
            {
                getHdnIdRegistroIrregolaritaOCrea();

                riempiCampiSpecificheIrregolarita();
                new SiarBLL.RegistroIrregolaritaCollectionProvider().Save(registro_irregolarita_selezionato);
                hdnIdIrregolarita.Value = registro_irregolarita_selezionato.IdIrregolarita;
                Irregolarita = registro_irregolarita_selezionato;
                ShowMessage("Dati specifici di irregolarità salvati correttamente.");
            }
            catch (Exception ex) { ShowError(ex.ToString()); }
        }

        protected void btnSalvaImpattoFinanziario_Click(object sender, EventArgs e)
        {
            try
            {
                getHdnIdRegistroIrregolaritaOCrea();

                string errore = riempiCampiImpattoFinanziario();
                if (errore == null || errore.Equals(""))
                {
                    new SiarBLL.RegistroIrregolaritaCollectionProvider().Save(registro_irregolarita_selezionato);
                    hdnIdIrregolarita.Value = registro_irregolarita_selezionato.IdIrregolarita;
                    Irregolarita = registro_irregolarita_selezionato;
                    ShowMessage("Dati di impatto finanziario salvati correttamente.");
                }
                else
                    ShowError(errore);
            }
            catch (Exception ex) { ShowError(ex.ToString()); }
        }

        protected void btnEliminaControlloIrregolarita_Click(object sender, EventArgs e)
        {
            try
            {
                registro_irregolarita_provider = new SiarBLL.RegistroIrregolaritaCollectionProvider();
                int id_irregolarita;
                if (int.TryParse(hdnIdIrregolarita.Value, out id_irregolarita))
                    registro_irregolarita_selezionato = registro_irregolarita_provider.GetById(id_irregolarita);

                if (registro_irregolarita_selezionato == null)
                    throw new Exception("Nessuna irregolarità selezionata.");

                var recuperi_provider = new SiarBLL.RegistroRecuperoCollectionProvider();
                var recupero_collection = recuperi_provider.GetByRegistroIrregolarita(registro_irregolarita_selezionato.IdIrregolarita, null);
                if (recupero_collection.Count > 0)
                    throw new Exception("Non è possibile eliminare l'irregolarità perché associata ad un recupero.");

                var giust_x_irr_provider = new SiarBLL.GiustificativoXRegistroIrregolaritaCollectionProvider();
                var giust_irr_collection = giust_x_irr_provider.Find(null, null, registro_irregolarita_selezionato.IdIrregolarita, null);
                if (giust_irr_collection.Count > 0)
                    giust_x_irr_provider.DeleteCollection(giust_irr_collection);

                var disposizioni_provider = new SiarBLL.DisposizioneCollectionProvider();
                var disposizioni_collection = disposizioni_provider.GetDisposizioniIrregolaritaOld(registro_irregolarita_selezionato.IdIrregolarita);
                if (disposizioni_collection.Count > 0)
                    disposizioni_provider.DeleteCollection(disposizioni_collection);

                registro_irregolarita_provider.Delete(registro_irregolarita_selezionato);
                hdnIdIrregolarita = null;
                Irregolarita = null;
                hdnIdRecupero.Value = null;
                Recupero = null;
                hdnGiustXIrr = null;
                ShowMessage("Irregolarità eliminata");
                Response.Redirect("../Controlli/RicercaIrregolarita.aspx");
            }
            catch (Exception ex) { ShowError(ex); }
        }

        protected void btnNuovoControlloIrregolarita_Click(object sender, EventArgs e)
        {
            try
            {
                svuotaTuttiCampi();
            }
            catch (Exception ex) { ShowError(ex.ToString()); }
        }

        protected void btnCaricaRecupero_Click(object sender, EventArgs e)
        {
            try
            {
                SiarLibrary.RegistroRecupero registro_recupero_selezionato = null;
                int id_recupero;
                if (int.TryParse(hdnIdRecupero.Value, out id_recupero))
                    registro_recupero_selezionato = new SiarBLL.RegistroRecuperoCollectionProvider().GetById(id_recupero);

                if (registro_recupero_selezionato == null)
                    throw new Exception("Nessun recupero selezionato.");

                Recupero = registro_recupero_selezionato;
                Response.Redirect("../Controlli/RegistroRecuperi.aspx?idrec=" + registro_recupero_selezionato.IdRegistroRecupero);
            }
            catch (Exception ex) { ShowError(ex.ToString()); }
        }

        protected void btnCaricaGiustificativo_Click(object sender, EventArgs e)
        {
            try
            {
                int id_giustificativo;
                if (int.TryParse(ucZoomLoaderGiustificativiProgetto.SelectedValue, out id_giustificativo))
                {
                    var giust_provider = new SiarBLL.GiustificativiCollectionProvider();
                    var giust_x_irr_provider = new GiustificativoXRegistroIrregolaritaCollectionProvider();
                    var giust_x_irr = new GiustificativoXRegistroIrregolarita();

                    int id_irregolarita;
                    if (int.TryParse(hdnIdIrregolarita.Value, out id_irregolarita))
                    {
                        giust_x_irr.IdRegistroIrregolarita = id_irregolarita;
                        giust_x_irr.IdGiustificativo = id_giustificativo;
                        giust_x_irr.CfInserimento = Operatore.Utente.CfUtente;
                        giust_x_irr.CfModifica = Operatore.Utente.CfUtente;

                        giust_x_irr_provider.Save(giust_x_irr);
                        ucZoomLoaderGiustificativiProgetto.UnselectItem();
                        ShowMessage("Giustificativo associato correttamente.");
                    }
                    else
                        ShowError("Irregolarita non selezionata.");
                }
                else
                    ShowError("Giustificativo non selezionato.");
            }
            catch (Exception ex) { ShowError(ex.ToString()); }
        }

        protected void btnEscludiGiustificativo_Click(object sender, EventArgs e)
        {
            try
            {
                int id_giust_x_irr;
                if (int.TryParse(hdnGiustXIrr.Value, out id_giust_x_irr))
                {
                    var giust_x_irr_provider = new SiarBLL.GiustificativoXRegistroIrregolaritaCollectionProvider();
                    var giust_x_irr = giust_x_irr_provider.GetById(id_giust_x_irr);
                    giust_x_irr_provider.Delete(giust_x_irr);
                    hdnGiustXIrr.Value = null;
                    ShowMessage("Giustificativo escluso correttamente.");
                }
                else
                    ShowError("Nessun giustificativo associato.");
            }
            catch (Exception ex) { ShowError(ex.ToString()); }
        }

        #endregion

        protected void getHdnIdRegistroIrregolaritaOCrea()
        {
            int id_irregolarita;
            if (int.TryParse(hdnIdIrregolarita.Value, out id_irregolarita))
            {
                registro_irregolarita_selezionato = registro_irregolarita_provider.GetById(id_irregolarita);
                registro_irregolarita_selezionato.CfModifica = Operatore.Utente.CfUtente;
            }

            if (registro_irregolarita_selezionato == null || registro_irregolarita_selezionato.IdIrregolarita == null)
            {
                registro_irregolarita_selezionato = new RegistroIrregolarita();
                registro_irregolarita_selezionato.IdProgetto = Progetto.IdProgetto;
                registro_irregolarita_selezionato.CfInserimento = Operatore.Utente.CfUtente;
                registro_irregolarita_selezionato.CfModifica = Operatore.Utente.CfUtente;
                if (DomandaPagamento != null)
                    registro_irregolarita_selezionato.IdDomandaPagamento = DomandaPagamento.IdDomandaPagamento;
            }
        }

        protected void getHdnIdDisposizioneOCrea()
        {
            disposizione_provider = new SiarBLL.DisposizioneCollectionProvider();
            int id_disposizione;
            if (int.TryParse(hdnIdDisposizione.Value, out id_disposizione))
            {
                disposizione_selezionata = disposizione_provider.GetById(id_disposizione);
                disposizione_selezionata.CfModifica = Operatore.Utente.CfUtente;
            }

            if (disposizione_selezionata == null || disposizione_selezionata.IdDisposizione == null)
            {
                disposizione_selezionata = new Disposizione();
                getHdnIdRegistroIrregolaritaOCrea();
                disposizione_selezionata.IdRegistroIrregolarita = registro_irregolarita_selezionato.IdIrregolarita;
                disposizione_selezionata.CfInserimento = Operatore.Utente.CfUtente;
                disposizione_selezionata.CfModifica = Operatore.Utente.CfUtente;
            }
        }

        #region ItemDataBound

        void dgIrregolarita_ItemDataBound(object sender, System.Web.UI.WebControls.DataGridItemEventArgs e)
        {
            if (e.Item.ItemType == ListItemType.Item || e.Item.ItemType == ListItemType.AlternatingItem)
            {
                SiarLibrary.RegistroIrregolarita reg = (SiarLibrary.RegistroIrregolarita)e.Item.DataItem;
                SiarLibrary.CodificaGenericaCollectionProvider codifica_provider = new SiarLibrary.CodificaGenericaCollectionProvider();

                if (reg.DataIrregolarita == null
                    && (reg.DataIrregolaritaDa != null || reg.DataIrregolaritaA != null))
                    e.Item.Cells[1].Text = reg.DataIrregolaritaDa + "<br /> - <br />" + reg.DataIrregolaritaA;

                if (reg.IdImpresaCommessaDa == null || reg.IdImpresaCommessaDa == 0)
                    e.Item.Cells[2].Text = reg.NoteCommessaDa;
                else
                {
                    var impresa = new SiarBLL.ImpresaCollectionProvider().GetById(reg.IdImpresaCommessaDa);
                    e.Item.Cells[2].Text = impresa.RagioneSociale;
                }

                if (reg.IdCategoriaIrregolarita != null)
                {
                    var codifica = codifica_provider.GetById(reg.IdCategoriaIrregolarita);
                    if (codifica != null)
                        e.Item.Cells[4].Text = codifica.Descrizione;
                }

                if (reg.IdTipoIrregolarita != null)
                {
                    var codifica = codifica_provider.GetById(reg.IdTipoIrregolarita);
                    if (codifica != null)
                        e.Item.Cells[5].Text = codifica.Descrizione;
                }

                if (reg.IdClassificazioneIrregolarita != null)
                {
                    var codifica = codifica_provider.GetById(reg.IdClassificazioneIrregolarita);
                    if (codifica != null)
                        e.Item.Cells[6].Text = codifica.Descrizione;
                }

                if (reg.SegnalazioneOlaf != null && reg.SegnalazioneOlaf)
                    e.Item.Cells[7].Text = e.Item.Cells[7].Text.Replace("<input", "<input checked");
                else
                    e.Item.Cells[7].Text = e.Item.Cells[7].Text.Replace("<input checked", "<input");
            }
        }

        void dgDisposizioni_ItemDataBound(object sender, System.Web.UI.WebControls.DataGridItemEventArgs e)
        {
            if (e.Item.ItemType == ListItemType.Item || e.Item.ItemType == ListItemType.AlternatingItem)
            {
                SiarLibrary.Disposizione disp = (SiarLibrary.Disposizione)e.Item.DataItem;
                SiarLibrary.CodificaGenericaCollectionProvider codifica_provider = new SiarLibrary.CodificaGenericaCollectionProvider();

                if (disp.IdTipoDisposizione != null)
                {
                    var codifica = codifica_provider.GetById(disp.IdTipoDisposizione);
                    if (codifica != null)
                        e.Item.Cells[1].Text = codifica.Descrizione;
                }
            }
        }

        void dgRecuperi_ItemDataBound(object sender, System.Web.UI.WebControls.DataGridItemEventArgs e)
        {
            if (e.Item.ItemType == ListItemType.Item || e.Item.ItemType == ListItemType.AlternatingItem)
            {
                SiarLibrary.RegistroRecupero rec = (SiarLibrary.RegistroRecupero)e.Item.DataItem;
                SiarLibrary.CodificaGenericaCollectionProvider codifica_provider = new SiarLibrary.CodificaGenericaCollectionProvider();

                if (rec.IdTipoRecupero != null)
                {
                    var codifica = codifica_provider.GetById(rec.IdTipoRecupero);
                    if (codifica != null)
                        e.Item.Cells[1].Text = codifica.Descrizione;
                }

                if (rec.IdProcedureAvviate != null)
                {
                    var codifica = codifica_provider.GetById(rec.IdProcedureAvviate);
                    if (codifica != null)
                        e.Item.Cells[4].Text = codifica.Descrizione;
                }

                if (rec.IdTipoProcedureAvviate != null)
                {
                    var codifica = codifica_provider.GetById(rec.IdTipoProcedureAvviate);
                    if (codifica != null)
                        e.Item.Cells[5].Text = codifica.Descrizione;
                }

                if (rec.Recuperabile != null && rec.Recuperabile)
                    e.Item.Cells[6].Text = e.Item.Cells[6].Text.Replace("<input", "<input checked");
                else
                    e.Item.Cells[6].Text = e.Item.Cells[6].Text.Replace("<input checked", "<input");
            }
        }

        decimal importo_giust_totale = 0;

        void dgGiustificativiAssociati_ItemDataBound(object sender, System.Web.UI.WebControls.DataGridItemEventArgs e)
        {
            if (e.Item.ItemType == ListItemType.Item || e.Item.ItemType == ListItemType.AlternatingItem)
            {
                var giust_x_irr = (SiarLibrary.GiustificativoXRegistroIrregolarita)e.Item.DataItem;

                if (giust_x_irr.Imponibile != null)
                {
                    e.Item.Cells[3].Text = string.Format("{0:c}", giust_x_irr.Imponibile);
                    importo_giust_totale += giust_x_irr.Imponibile;
                }
            }
            else if (e.Item.ItemType == ListItemType.Footer)
                e.Item.Cells[3].Text = string.Format("{0:c}", importo_giust_totale);
        }

        void dgDomandaIrregolarita_ItemDataBound(object sender, DataGridItemEventArgs e)
        {
            DataGridItem dgi = (DataGridItem)e.Item;
            if (dgi.ItemType == ListItemType.Header)
            {
                dgi.CssClass = "TESTA1";
                dgi.Cells[0].ColumnSpan = 6;
                dgi.Cells[0].HorizontalAlign = HorizontalAlign.Center;
                dgi.Cells[0].Text = "DOMANDE DI PAGAMENTO</td><td colspan=4 align=center>RIEPILOGO ISTRUTTORIA</td></tr><tr class='TESTA'><td>Richiesta";
            }
            else if (dgi.ItemType == ListItemType.Footer)
            {
                dgi.Cells[3].Text = string.Format("{0:c}", importo_richiesto);
                dgi.Cells[4].Text = string.Format("{0:c}", contributo_richiesto);
                dgi.Cells[8].Text = string.Format("{0:c}", importo_ammesso);
                dgi.Cells[9].Text = string.Format("{0:c}", contributo_ammesso);
            }
            else
            {
                SiarLibrary.NotAutogeneratedClasses.RiepilogoDomandePagamento domanda = (SiarLibrary.NotAutogeneratedClasses.RiepilogoDomandePagamento)dgi.DataItem;
                if (domanda.IdDomandaPagamento == null)
                {
                    dgi.Cells[0].Text = "<input type='checkbox' disabled=true />";
                    dgi.Cells[6].Text = "<input type='checkbox' disabled=true />";
                    if (prima_domanda || (abilita_inserimento_nuova_domanda &&
                        list_abilita_inserimento.Contains(domanda.Ordine)))
                        dgi.Cells[2].Text = "<input type=button onclick=\"nsc_post('" + domanda.CodTipo
                            + "')\" value='Richiedi pagamento' style='width:130px' class='ButtonGrid'/>";
                    dgi.Cells[10].Text = "";
                }
                else
                {
                    dgi.Cells[0].Text = "<input type='checkbox' disabled=true checked />";
                    if (permessi_operatore < 3 || Operatore.Utente.CodTipoEnte == "%")
                        dgi.Cells[2].Text = "<input type=button onclick=\"location='../PPagamento/DatiAnagrafici.aspx?idpag="
                        + domanda.IdDomandaPagamento + "'\" value='Visualizza la domanda' style='width:150px' class='ButtonGrid'/>";
                    dgi.Cells[6].Text = "<input type='checkbox' disabled=true />";
                    if (domanda.CodTipo == "ANT")
                    {
                        dgi.Cells[3].Text = "--"; dgi.Cells[3].Style.Add("text-align", "center");
                        dgi.Cells[8].Text = "--"; dgi.Cells[7].Style.Add("text-align", "center");
                    }
                    if (domanda.Segnatura != null)
                    {
                        AllegatiProtocollatiCollectionProvider allegatiProvider = new AllegatiProtocollatiCollectionProvider();
                        //AllegatiProtocollatiCollection ff = allegatiProvider.Find(null, domanda.IdDomandaPagamento, null, null, null, null, null, null);
                        //int numeroAllegati = ff.Count;

                        //bool allegatiProtocollatiOk = checkAllegatiProtocollati(domanda, numeroAllegati);
                        bool allegatiProtocollatiOk = allegatiProvider.CheckAllegatiProtocollati(AllegatiProtocollatiCollectionProvider.TipoCheck.DomandaDiPagamento, domanda.IdDomandaPagamento, domanda.Segnatura);

                        if (!allegatiProtocollatiOk)
                        {
                            dgi.Cells[2].Text = "<input type=button onclick=\"location='../PPagamento/FirmaRichiesta.aspx?idpag="
                        + domanda.IdDomandaPagamento + "'\" value='Protocolla gli allegati' style='width:150px' class='ButtonGrid'/>";
                        }
                        else
                        {
                            dgi.Cells[5].Text = "<img src='" + Page.ResolveUrl("~/images/print_ico.gif") + "' alt='Domanda'  onclick=\"sncAjaxCallVisualizzaProtocollo('" + domanda.Segnatura + "');\" style='cursor: pointer;'>";
                            bool in_istruttoria = !domanda.Annullata && (domanda.Approvata == null ||
                                (domanda.SelezionataXRevisione != null && domanda.SelezionataXRevisione &&
                                (domanda.ApprovataRevisione == null || (!domanda.ApprovataRevisione && domanda.SegnaturaSecondaApprovazione == null))));
                            if (in_istruttoria)
                            {
                                //nascondo la lavorazione dell'istruttoria della domanda 
                                if (permessi_operatore > 2) dgi.Cells[2].Text = "<b>istruttoria in corso</b>";
                                else
                                {
                                    SiarBLL.IntegrazioniPerDomandaDiPagamentoCollectionProvider integrazione_provider = new SiarBLL.IntegrazioniPerDomandaDiPagamentoCollectionProvider();
                                    var integrazioni_collection = integrazione_provider.Find(null, domanda.IdDomandaPagamento, false, null);
                                    if (integrazioni_collection.Count > 0)
                                    {
                                        var integrazione_domanda = integrazioni_collection[0];
                                        if (integrazione_domanda.SegnaturaIstruttore != null && !integrazione_domanda.SegnaturaIstruttore.Equals(""))
                                        {
                                            SiarBLL.IntegrazioneSingolaDiDomandaCollectionProvider integrazioni_singole_provider = new SiarBLL.IntegrazioneSingolaDiDomandaCollectionProvider();
                                            var integrazioni_singole_collection = integrazioni_singole_provider.Find(null, integrazione_domanda.IdIntegrazioneDomandaDiPagamento, null, null, null, null);
                                            string testo_cella = "<table class='news' style='margin:5px' cellpadding=0 cellspacing=0><tr><td class='newsHeader'>INTEGRATIVE RICHIESTE</td></tr><tr><td class=news style='height:30px;width:180px;text-align:center;color:black;border-top:none' onclick=\"parent.location='../PPagamento/IntegrazioniDomandaPagamento.aspx?idpag="
                                                + domanda.IdDomandaPagamento + "'\">Visualizza le integrazioni richieste</td></tr><br /></table>";
                                            dgi.Cells[2].Text = testo_cella;
                                        }
                                        else
                                        {
                                            dgi.Cells[2].Text = "<table class='news' style='margin:5px' cellpadding=0 cellspacing=0><tr><td class='newsHeader'>ISTRUTTORIA IN CORSO</td></tr><tr><td class=news style='height:30px;width:180px;text-align:center;color:black;border-top:none' onclick=\"SNCVisualizzaReport('rptRicevutaProtocollazioneDomandaPagamento',1,'IdDomandaPagamento="
                                            + domanda.IdDomandaPagamento + "');\">Stampa la ricevuta di protocollazione</td></tr></table>";
                                        }
                                    }
                                    else
                                    {
                                        dgi.Cells[2].Text = "<table class='news' style='margin:5px' cellpadding=0 cellspacing=0><tr><td class='newsHeader'>ISTRUTTORIA IN CORSO</td></tr><tr><td class=news style='height:30px;width:180px;text-align:center;color:black;border-top:none' onclick=\"SNCVisualizzaReport('rptRicevutaProtocollazioneDomandaPagamento',1,'IdDomandaPagamento="
                                            + domanda.IdDomandaPagamento + "');\">Stampa la ricevuta di protocollazione</td></tr></table>";
                                    }
                                }
                                domanda.ImportoAmmesso = null;
                                domanda.ContributoAmmesso = null;
                                dgi.Cells[8].Text = "";
                                dgi.Cells[9].Text = "";
                            }
                            else if (!domanda.Annullata)
                            {
                                dgi.Cells[6].Text = "<input type='checkbox' disabled=true checked />";
                                if (domanda.Approvata != null && !domanda.Approvata)
                                {
                                    for (int i = 1; i < 10; i++)
                                    {
                                        dgi.Cells[i].Style.Add("text-decoration", "line-through");
                                        dgi.Cells[i].Style.Add("color", "#bc3333");
                                    }
                                }
                            }

                            if (permessi_operatore > 2)
                            {
                                string testo = "Visualizza l`istruttoria";
                                if (permessi_operatore == 3 && in_istruttoria) testo = "Istruisci la pratica";
                                dgi.Cells[7].Text = "<input type=button onclick=\"location='../IPagamento/CheckListPagamento.aspx?idpag="
                                    + domanda.IdDomandaPagamento + "'\" value='" + testo + "' style='width:150px' class='ButtonGrid'/>";
                            }
                        }
                    }
                    else if (AbilitaModifica && domanda.CfOperatore == ((SiarLibrary.Web.MasterPage)Master).Operatore.Utente.CfUtente)
                        dgi.Cells[2].Text = "<input type=button onclick=\"location='../PPagamento/DatiAnagrafici.aspx?idpag="
                        + domanda.IdDomandaPagamento + "'\" value='Modifica la richiesta' style='width:150px' class='ButtonGrid'/>";

                    if (domanda.ImportoRichiesto != null) importo_richiesto += domanda.ImportoRichiesto;
                    if (domanda.ContributoRichiesto != null) contributo_richiesto += domanda.ContributoRichiesto;
                    if (!domanda.Annullata)
                    {
                        if (domanda.Approvata != null && domanda.Approvata)
                        {
                            if (domanda.ImportoAmmesso != null) importo_ammesso += domanda.ImportoAmmesso;
                            if (domanda.ContributoAmmesso != null) contributo_ammesso += domanda.ContributoAmmesso;
                        }
                    }
                    else
                    {
                        dgi.Cells[7].Text = "ANNULLATA DAL RICHIEDENTE";
                        dgi.Cells[8].Text = "";
                        dgi.Cells[9].Text = "";
                        for (int i = 1; i < 6; i++)
                        {
                            dgi.Cells[i].Style.Add("color", "grey");
                            dgi.Cells[i].Style.Add("text-decoration", "line-through");
                        }
                    }
                }
            }
        }

        #endregion
    }
}