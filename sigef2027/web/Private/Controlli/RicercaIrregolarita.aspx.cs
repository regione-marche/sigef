using System;
using System.Web.UI;
using System.Web.UI.HtmlControls;
using System.Web.UI.WebControls;
using SiarLibrary.Extensions;
using System.Collections.Generic;

namespace web.Private.Controlli
{
    public partial class RicercaIrregolarita : SiarLibrary.Web.ControlliIrregolaritaPage
    {
        bool abilita_inserimento_nuova_domanda = false, pratiche_in_istruttoria = false;
        int ordine_minimo_inserimento = 0, permessi_operatore = 0; bool prima_domanda = false;
        List<int> list_abilita_inserimento = new List<int>();
        SiarLibrary.ProgettoStoricoCollection stati_progetto;
        SiarLibrary.NotAutogeneratedClasses.RiepilogoDomandePagamentoCollection domande_pagamento;
        SiarLibrary.NotAutogeneratedClasses.RiepilogoDomandePagamentoCollectionProvider pagamento_provider =
            new SiarLibrary.NotAutogeneratedClasses.RiepilogoDomandePagamentoCollectionProvider();

        decimal importo_richiesto = 0, contributo_richiesto = 0, importo_ammesso = 0, contributo_ammesso = 0;

        protected override void OnPreInit(EventArgs e)
        {
            this.FunzioneMenu = "irregolarita";
            base.OnPreInit(e);
        }

        protected void Page_Load(object sender, EventArgs e)
        {
            Form.DefaultButton = btnCerca.UniqueID;
            Form.DefaultFocus = txtNumDomanda.ClientID;
        }

        protected override void OnPreRender(EventArgs e)
        {
            int id_progetto;
            if (!IsPostBack) tdDomanda.InnerHtml = "<div class=testo_pagina><b>Ricercare per domanda di aiuto.</b></div>";
            else if (int.TryParse(txtNumDomanda.Text, out id_progetto))
            {
                SiarBLL.ProgettoCollectionProvider progProvider = new SiarBLL.ProgettoCollectionProvider();
                SiarLibrary.Progetto p = null;
                try
                {
                    p = progProvider.GetById(id_progetto);
                    if (p != null && p.IdProgIntegrato != null && p.IdProgIntegrato != p.IdProgetto)
                        p = progProvider.GetById(p.IdProgIntegrato);
                    if (p == null || p.FlagPreadesione) throw new Exception("Nessuna domanda trovata. Il codice inserito potrebbe essere errato.");

                    // controllo i permessi dell'operatore
                    int risultato = SiarLibrary.DbStaticProvider.GetPermessiOperatoreSuProgetto(p.IdProgetto, Operatore.Utente.IdUtente,
                        progProvider.DbProviderObj);
                    if (risultato == 0) throw new Exception("Nessuna domanda trovata. Il codice inserito potrebbe essere errato.");

                    AbilitaModifica = (risultato == 2);
                    //if (p.Segnatura == null && risultato == 1) ShowError("L'utente è abilitato alla sola visualizzazione della domanda.");
                    SiarLibrary.Bando b = new SiarBLL.BandoCollectionProvider().GetById(p.IdBando);

                    Control c = LoadControl("../../CONTROLS/DatiDomanda.ascx");
                    System.Type t = c.GetType();
                    t.GetProperty("Progetto").SetValue(c, p, null);
                    t.GetProperty("Bando").SetValue(c, b, null);
                    tdDomanda.Controls.Add(c);
                    Session["_progetto"] = p;
                    Session["_bando"] = b;

                    // per controllare gli allegati devo prendere la segnatura della firma di presentazione
                    SiarLibrary.ProgettoStoricoCollection psc = new SiarBLL.ProgettoStoricoCollectionProvider().Find(p.IdProgetto, "L", null);

                    bool allegatiProtocollatiOk = true;

                    if (psc.Count > 0)
                    {
                        SiarLibrary.ProgettoStorico s = psc[0];
                        //SiarLibrary.AllegatiProtocollatiCollection allegati = new SiarBLL.AllegatiProtocollatiCollectionProvider().Find(p.IdProgetto, null, null, null, null, null, null, null);
                        //int numeroAllegati = allegati.Count;
                        //allegatiProtocollatiOk = checkAllegatiProtocollati(s, numeroAllegati);
                        allegatiProtocollatiOk = new SiarBLL.AllegatiProtocollatiCollectionProvider().CheckAllegatiProtocollati(SiarBLL.AllegatiProtocollatiCollectionProvider.TipoCheck.Progetto, p.IdProgetto, s.Segnatura);
                    }

                    #region pulsanti bando

                    if (p.CodStato != "P" && Operatore.Utente.CodTipoEnte.FindValueIn("RM", "%", "AdC"))
                    {

                        if (allegatiProtocollatiOk)
                        {
                            HtmlInputButton btnRiepilogoBando = new HtmlInputButton();
                            btnRiepilogoBando.Value = "Sezione Dettaglio Bando";
                            btnRiepilogoBando.Attributes.Add("class", "Button");
                            btnRiepilogoBando.Attributes.Add("onclick", "location='../psr/bandi/dettaglio.aspx'");
                            btnRiepilogoBando.Style.Add("margin-right", "20px");
                            btnRiepilogoBando.Style.Add("width", "200px");

                            HtmlInputButton btnIstruttoriaBando = new HtmlInputButton();
                            btnIstruttoriaBando.Value = "Sezione Istruttoria Bando";
                            btnIstruttoriaBando.Attributes.Add("class", "Button");
                            btnIstruttoriaBando.Attributes.Add("onclick", "location='../istruttoria/statistiche.aspx'");
                            btnIstruttoriaBando.Style.Add("margin-right", "20px");
                            btnIstruttoriaBando.Style.Add("width", "200px");

                            HtmlInputButton btnIstruttoriaDomandePagamento = new HtmlInputButton();
                            btnIstruttoriaDomandePagamento.Value = "Checklist di istruttoria ammissibilità";
                            btnIstruttoriaDomandePagamento.Attributes.Add("class", "Button");
                            btnIstruttoriaDomandePagamento.Attributes.Add("onclick", "location='../istruttoria/ChecklistAmmissibilita.aspx?iddom="
                                + p.IdProgetto + "'");
                            btnIstruttoriaDomandePagamento.Style.Add("width", "230px");

                            tdPulsantiBando.Controls.Add(btnRiepilogoBando);
                            tdPulsantiBando.Controls.Add(btnIstruttoriaBando);
                            tdPulsantiBando.Controls.Add(btnIstruttoriaDomandePagamento);
                            tdPulsantiBando.Style.Add("height", "50px");
                        }
                    }

                    if (b.AbilitaValutazione && p.CodStato == "I" && (Operatore.Utente.CodTipoEnte.FindValueIn("RM", "%", "AdC") ||
                        Operatore.Utente.Profilo == "Membro del comitato di valutazione"))
                    {
                        HtmlInputButton btnIValutazioneProgetto = new HtmlInputButton();
                        btnIValutazioneProgetto.Value = "Valutazione bando";
                        btnIValutazioneProgetto.Attributes.Add("class", "Button");
                        btnIValutazioneProgetto.Attributes.Add("onclick", "location='../istruttoria/Valutazione.aspx?iddom="
                            + p.IdProgetto + "&idb=" + p.IdBando + "'");
                        btnIValutazioneProgetto.Style.Add("width", "200px");
                        btnIValutazioneProgetto.Style.Add("margin-top", "10px");
                        btnIValutazioneProgetto.Style.Add("margin-left", "-30px");

                        tdPulsantiBando.Controls.Add(btnIValutazioneProgetto);
                        tdPulsantiBando.Style.Add("height", "50px");
                    }

                    if (((p.CodStato == "L") || (p.CodStato == "I")) && !allegatiProtocollatiOk)
                    {
                        HtmlInputButton btnProtocollaAllegati = new HtmlInputButton();
                        btnProtocollaAllegati.Value = "Protocolla gli allegati";
                        btnProtocollaAllegati.Attributes.Add("class", "Button");
                        btnProtocollaAllegati.Attributes.Add("onclick", "location='../PDomanda/RiepilogoDomanda.aspx'");
                        btnProtocollaAllegati.Style.Add("margin-right", "20px");
                        btnProtocollaAllegati.Style.Add("width", "200px");

                        tdPulsantiBando.Controls.Add(btnProtocollaAllegati);
                        tdPulsantiBando.Style.Add("height", "50px");
                    }

                    #endregion

                    if (p.OrdineFase != null && p.OrdineFase > 3 && p.CodStato != "N")
                    {
                        Control c1 = LoadControl("../../CONTROLS/AZDomanda.ascx");
                        System.Type t1 = c1.GetType();
                        t1.GetProperty("Progetto").SetValue(c1, p, null);
                        //tdFase2.Controls.Add(c1);
                    }

                    #region controlli irregolarita

                    tbIrregolarita.Visible = true;
                    divElencoDomande.Visible = true;

                    var registro_irregolarita_provider = new SiarBLL.RegistroIrregolaritaCollectionProvider();
                    var irregolarita_collection = registro_irregolarita_provider.Find(null, p.IdProgetto, null);

                    dgIrregolarita.DataSource = irregolarita_collection;
                    dgIrregolarita.SetTitoloNrElementi();
                    dgIrregolarita.ItemDataBound += new System.Web.UI.WebControls.DataGridItemEventHandler(dgIrregolarita_ItemDataBound);
                    dgIrregolarita.DataBind();

                    permessi_operatore = SiarLibrary.DbStaticProvider.GetPermessiOperatoreSuGestioneLavori(Progetto.IdProgetto, Operatore.Utente.IdUtente, null);
                    domande_pagamento = pagamento_provider.Find(Progetto.IdProgetto);
                    dgDomande.DataSource = domande_pagamento;
                    if (domande_pagamento.Count == 0)
                        dgDomande.Titolo = "Nessuna domanda di pagamento prevista per il bando.";
                    dgDomande.ItemDataBound += new DataGridItemEventHandler(dgDomande_ItemDataBound);
                    dgDomande.ShowFooter = true;
                    dgDomande.FooterStyle.CssClass = "TotaliFooter";
                    dgDomande.DataBind();

                    #endregion
                }
                catch (Exception ex)
                {
                    ShowError(ex); Session.Remove("_progetto");
                    tdDomanda.InnerHtml = "<div class=testo_pagina><b>" + ex.Message + "</b></div>";
                }
            }
            base.OnPreRender(e);
        }

        protected void btnCerca_Click(object sender, EventArgs e) { }

        protected void btnInserisciIrregolaritaDomandaAiuto_Click(object sender, EventArgs e)
        {
            try
            {
                SiarLibrary.Progetto prog = null;
                int id_progetto;
                if (int.TryParse(txtNumDomanda.Text, out id_progetto))
                    prog = new SiarBLL.ProgettoCollectionProvider().GetById(id_progetto);

                if (prog == null)
                    throw new Exception("Nessun progetto selezionata.");

                Progetto = prog;
                DomandaPagamento = null;
                Response.Redirect("../Controlli/RegistroIrregolarita.aspx");
            }
            catch (Exception ex) { ShowError(ex); }
        }

        protected void btnCaricaIrregolarita_Click(object sender, EventArgs e)
        {
            try
            {
                SiarLibrary.RegistroIrregolarita registro_irregolarita_selezionata = null;
                int id_irregolarita;
                if (int.TryParse(hdnIdIrregolarita.Value, out id_irregolarita))
                    registro_irregolarita_selezionata = new SiarBLL.RegistroIrregolaritaCollectionProvider().GetById(id_irregolarita);

                if (registro_irregolarita_selezionata == null)
                    throw new Exception("Nessuna irregolarità selezionata.");

                Irregolarita = registro_irregolarita_selezionata;
                Response.Redirect("../Controlli/RegistroIrregolarita.aspx");

            }
            catch (Exception ex) { ShowError(ex); }
        }

        protected void btnInserisciIrregolaritaDomandaPagamento_Click(object sender, EventArgs e)
        {
            try
            {
                SiarLibrary.Progetto prog = null;
                int id_progetto;
                if (int.TryParse(txtNumDomanda.Text, out id_progetto))
                    prog = new SiarBLL.ProgettoCollectionProvider().GetById(id_progetto);

                if (prog == null)
                    throw new Exception("Nessun progetto selezionata.");

                SiarLibrary.DomandaDiPagamento domanda = null;
                int id_domanda;
                if (int.TryParse(hdnIdDomanda.Value, out id_domanda))
                    domanda = new SiarBLL.DomandaDiPagamentoCollectionProvider().GetById(id_domanda);

                if (domanda == null)
                    throw new Exception("Nessuna domanda selezionata.");

                Progetto = prog;
                DomandaPagamento = domanda;
                Response.Redirect("../Controlli/RegistroIrregolarita.aspx");
            }
            catch (Exception ex) { ShowError(ex); }
        }

        void dgIrregolarita_ItemDataBound(object sender, System.Web.UI.WebControls.DataGridItemEventArgs e)
        {
            if (e.Item.ItemType == ListItemType.Item || e.Item.ItemType == ListItemType.AlternatingItem)
            {
                SiarLibrary.RegistroIrregolarita reg = (SiarLibrary.RegistroIrregolarita)e.Item.DataItem;
                SiarLibrary.CodificaGenericaCollectionProvider codifica_provider = new SiarLibrary.CodificaGenericaCollectionProvider();

                if (reg.DataIrregolarita == null)
                    e.Item.Cells[1].Text = reg.DataIrregolaritaDa + "<br /> - <br />" + reg.DataIrregolaritaA;

                if (reg.IdImpresaCommessaDa == null || reg.IdImpresaCommessaDa == 0)
                    e.Item.Cells[2].Text = reg.NoteCommessaDa;
                else
                {
                    var impresa = new SiarBLL.ImpresaCollectionProvider().GetById(reg.IdImpresaCommessaDa);
                    e.Item.Cells[2].Text = impresa.RagioneSociale;
                }

                if (reg.IdCategoriaIrregolarita != null)
                {
                    var codifica = codifica_provider.GetById(reg.IdCategoriaIrregolarita);
                    if (codifica != null)
                        e.Item.Cells[4].Text = codifica.Descrizione;
                }

                if (reg.IdTipoIrregolarita != null)
                {
                    var codifica = codifica_provider.GetById(reg.IdTipoIrregolarita);
                    if (codifica != null)
                        e.Item.Cells[5].Text = codifica.Descrizione;
                }

                if (reg.IdClassificazioneIrregolarita != null)
                {
                    var codifica = codifica_provider.GetById(reg.IdClassificazioneIrregolarita);
                    if (codifica != null)
                        e.Item.Cells[6].Text = codifica.Descrizione;
                }

                if (reg.SegnalazioneOlaf != null && reg.SegnalazioneOlaf)
                    e.Item.Cells[7].Text = e.Item.Cells[7].Text.Replace("<input", "<input checked");
                else
                    e.Item.Cells[7].Text = e.Item.Cells[7].Text.Replace("<input checked", "<input");
            }
        }

        void dgDomande_ItemDataBound(object sender, DataGridItemEventArgs e)
        {
            DataGridItem dgi = (DataGridItem)e.Item;
            if (dgi.ItemType == ListItemType.Header)
            {
                dgi.CssClass = "TESTA1";
                dgi.Cells[0].ColumnSpan = 6;
                dgi.Cells[0].HorizontalAlign = HorizontalAlign.Center;
                dgi.Cells[0].Text = "DOMANDE DI PAGAMENTO</td><td colspan=4 align=center>RIEPILOGO ISTRUTTORIA</td></tr><tr class='TESTA'><td>Richiesta";
            }
            else if (dgi.ItemType == ListItemType.Footer)
            {
                dgi.Cells[3].Text = string.Format("{0:c}", importo_richiesto);
                dgi.Cells[4].Text = string.Format("{0:c}", contributo_richiesto);
                dgi.Cells[8].Text = string.Format("{0:c}", importo_ammesso);
                dgi.Cells[9].Text = string.Format("{0:c}", contributo_ammesso);
            }
            else
            {
                SiarLibrary.NotAutogeneratedClasses.RiepilogoDomandePagamento domanda = (SiarLibrary.NotAutogeneratedClasses.RiepilogoDomandePagamento)dgi.DataItem;
                if (domanda.IdDomandaPagamento == null)
                {
                    dgi.Cells[0].Text = "<input type='checkbox' disabled=true />";
                    dgi.Cells[6].Text = "<input type='checkbox' disabled=true />";
                    if (prima_domanda || (abilita_inserimento_nuova_domanda &&
                        list_abilita_inserimento.Contains(domanda.Ordine)))
                        dgi.Cells[2].Text = "<input type=button onclick=\"nsc_post('" + domanda.CodTipo
                            + "')\" value='Richiedi pagamento' style='width:130px' class='ButtonGrid'/>";
                    dgi.Cells[10].Text = "";
                }
                else
                {
                    dgi.Cells[0].Text = "<input type='checkbox' disabled=true checked />";
                    if (permessi_operatore < 3 || Operatore.Utente.CodTipoEnte == "%")
                        dgi.Cells[2].Text = "<input type=button onclick=\"location='../PPagamento/DatiAnagrafici.aspx?idpag="
                        + domanda.IdDomandaPagamento + "'\" value='Visualizza la domanda' style='width:150px' class='ButtonGrid'/>";
                    dgi.Cells[6].Text = "<input type='checkbox' disabled=true />";
                    if (domanda.CodTipo == "ANT")
                    {
                        dgi.Cells[3].Text = "--"; dgi.Cells[3].Style.Add("text-align", "center");
                        dgi.Cells[8].Text = "--"; dgi.Cells[7].Style.Add("text-align", "center");
                    }
                    if (domanda.Segnatura != null)
                    {
                        SiarBLL.AllegatiProtocollatiCollectionProvider allegatiProvider = new SiarBLL.AllegatiProtocollatiCollectionProvider();
                        //SiarLibrary.AllegatiProtocollatiCollection ff = allegatiProvider.Find(null, domanda.IdDomandaPagamento, null, null, null, null, null, null);
                        //int numeroAllegati = ff.Count;
                        //bool allegatiProtocollatiOk = checkAllegatiProtocollati(domanda, numeroAllegati);
                        bool allegatiProtocollatiOk = allegatiProvider.CheckAllegatiProtocollati(SiarBLL.AllegatiProtocollatiCollectionProvider.TipoCheck.DomandaDiPagamento, domanda.IdDomandaPagamento, domanda.Segnatura);

                        if (!allegatiProtocollatiOk)
                        {
                            dgi.Cells[2].Text = "<input type=button onclick=\"location='../PPagamento/FirmaRichiesta.aspx?idpag="
                        + domanda.IdDomandaPagamento + "'\" value='Protocolla gli allegati' style='width:150px' class='ButtonGrid'/>";
                        }
                        else
                        {
                            dgi.Cells[5].Text = "<img src='" + Page.ResolveUrl("~/images/print_ico.gif") + "' alt='Domanda'  onclick=\"sncAjaxCallVisualizzaProtocollo('" + domanda.Segnatura + "');\" style='cursor: pointer;'>";
                            bool in_istruttoria = !domanda.Annullata && (domanda.Approvata == null ||
                                (domanda.SelezionataXRevisione != null && domanda.SelezionataXRevisione &&
                                (domanda.ApprovataRevisione == null || (!domanda.ApprovataRevisione && domanda.SegnaturaSecondaApprovazione == null))));
                            if (in_istruttoria)
                            {
                                //nascondo la lavorazione dell'istruttoria della domanda 
                                if (permessi_operatore > 2) dgi.Cells[2].Text = "<b>istruttoria in corso</b>";
                                else
                                {
                                    SiarBLL.IntegrazioniPerDomandaDiPagamentoCollectionProvider integrazione_provider = new SiarBLL.IntegrazioniPerDomandaDiPagamentoCollectionProvider();
                                    var integrazioni_collection = integrazione_provider.Find(null, domanda.IdDomandaPagamento, false, null);
                                    if (integrazioni_collection.Count > 0)
                                    {
                                        var integrazione_domanda = integrazioni_collection[0];
                                        if (integrazione_domanda.SegnaturaIstruttore != null && !integrazione_domanda.SegnaturaIstruttore.Equals(""))
                                        {
                                            SiarBLL.IntegrazioneSingolaDiDomandaCollectionProvider integrazioni_singole_provider = new SiarBLL.IntegrazioneSingolaDiDomandaCollectionProvider();
                                            var integrazioni_singole_collection = integrazioni_singole_provider.Find(null, integrazione_domanda.IdIntegrazioneDomandaDiPagamento, null, null, null, null);
                                            string testo_cella = "<table class='news' style='margin:5px' cellpadding=0 cellspacing=0><tr><td class='newsHeader'>INTEGRATIVE RICHIESTE</td></tr><tr><td class=news style='height:30px;width:180px;text-align:center;color:black;border-top:none' onclick=\"parent.location='../PPagamento/IntegrazioniDomandaPagamento.aspx?idpag="
                                                + domanda.IdDomandaPagamento + "'\">Visualizza le integrazioni richieste</td></tr><br /></table>";
                                            dgi.Cells[2].Text = testo_cella;
                                        }
                                        else
                                        {
                                            dgi.Cells[2].Text = "<table class='news' style='margin:5px' cellpadding=0 cellspacing=0><tr><td class='newsHeader'>ISTRUTTORIA IN CORSO</td></tr><tr><td class=news style='height:30px;width:180px;text-align:center;color:black;border-top:none' onclick=\"SNCVisualizzaReport('rptRicevutaProtocollazioneDomandaPagamento',1,'IdDomandaPagamento="
                                            + domanda.IdDomandaPagamento + "');\">Stampa la ricevuta di protocollazione</td></tr></table>";
                                        }
                                    }
                                    else
                                    {
                                        dgi.Cells[2].Text = "<table class='news' style='margin:5px' cellpadding=0 cellspacing=0><tr><td class='newsHeader'>ISTRUTTORIA IN CORSO</td></tr><tr><td class=news style='height:30px;width:180px;text-align:center;color:black;border-top:none' onclick=\"SNCVisualizzaReport('rptRicevutaProtocollazioneDomandaPagamento',1,'IdDomandaPagamento="
                                            + domanda.IdDomandaPagamento + "');\">Stampa la ricevuta di protocollazione</td></tr></table>";
                                    }
                                }
                                domanda.ImportoAmmesso = null;
                                domanda.ContributoAmmesso = null;
                                dgi.Cells[8].Text = "";
                                dgi.Cells[9].Text = "";
                            }
                            else if (!domanda.Annullata)
                            {
                                dgi.Cells[6].Text = "<input type='checkbox' disabled=true checked />";
                                if (domanda.Approvata != null && !domanda.Approvata)
                                {
                                    for (int i = 1; i < 10; i++)
                                    {
                                        dgi.Cells[i].Style.Add("text-decoration", "line-through");
                                        dgi.Cells[i].Style.Add("color", "#bc3333");
                                    }
                                }
                            }

                            if (permessi_operatore > 2)
                            {
                                string testo = "Visualizza l`istruttoria";
                                if (permessi_operatore == 3 && in_istruttoria) testo = "Istruisci la pratica";
                                dgi.Cells[7].Text = "<input type=button onclick=\"location='../IPagamento/CheckListPagamento.aspx?idpag="
                                    + domanda.IdDomandaPagamento + "'\" value='" + testo + "' style='width:150px' class='ButtonGrid'/>";
                            }
                        }
                    }
                    else if (AbilitaModifica && domanda.CfOperatore == ((SiarLibrary.Web.MasterPage)Master).Operatore.Utente.CfUtente)
                        dgi.Cells[2].Text = "<input type=button onclick=\"location='../PPagamento/DatiAnagrafici.aspx?idpag="
                        + domanda.IdDomandaPagamento + "'\" value='Modifica la richiesta' style='width:150px' class='ButtonGrid'/>";

                    if (domanda.ImportoRichiesto != null) importo_richiesto += domanda.ImportoRichiesto;
                    if (domanda.ContributoRichiesto != null) contributo_richiesto += domanda.ContributoRichiesto;
                    if (!domanda.Annullata)
                    {
                        if (domanda.Approvata != null && domanda.Approvata)
                        {
                            if (domanda.ImportoAmmesso != null) importo_ammesso += domanda.ImportoAmmesso;
                            if (domanda.ContributoAmmesso != null) contributo_ammesso += domanda.ContributoAmmesso;
                        }
                    }
                    else
                    {
                        dgi.Cells[7].Text = "ANNULLATA DAL RICHIEDENTE";
                        dgi.Cells[8].Text = "";
                        dgi.Cells[9].Text = "";
                        for (int i = 1; i < 6; i++)
                        {
                            dgi.Cells[i].Style.Add("color", "grey");
                            dgi.Cells[i].Style.Add("text-decoration", "line-through");
                        }
                    }
                }
            }
        }
    }
}
