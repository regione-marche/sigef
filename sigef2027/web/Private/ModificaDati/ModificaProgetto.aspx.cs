using System;
using System.Web;
using System.Web.UI.WebControls;
using SiarLibrary;
using SiarBLL;
using System.Web.UI;
using System.Linq;
using SiarLibrary.Extensions;
using SiarLibrary.Web;

namespace web.Private.ModificaDati
{
    public partial class ModificaProgetto : SiarLibrary.Web.ModificaPage
    {
        BandoProgrammazioneCollectionProvider bando_prog_provider;
        PrioritaXProgettoCollectionProvider priorita_prog_provider;
        ModificaDatiGeneraleCollectionProvider modifica_dati_provider;
        SiarLibrary.NotAutogeneratedClasses.RiepilogoDomandePagamentoCollectionProvider riepilogo_domande_provider;
        AllegatiProtocollatiCollectionProvider allegatiProtocollatiProvider;
        VariantiCollectionProvider varianti_provider;

        private decimal importo_richiesto = 0, contributo_richiesto = 0, importo_ammesso = 0, contributo_ammesso = 0;
        private int permessi_operatore = 0;
        private bool strumenti_finanziari = false;

        protected override void OnPreInit(EventArgs e)
        {
            base.OnPreInit(e);
        }

        protected void Page_Load(object sender, EventArgs e)
        {
            
        }

        protected override void OnPreRender(EventArgs e)
        {
            InizializzaProvider();
            PopolaImmagini();

            //Gestione progetto
            CaricaPrioritaProgetto();
            CaricaProgettoIndicatori();

            //Gestione domande pagamento
            CaricaDomandePagamento();

            //Gestione varianti
            CaricaVarianti();
            
            //Gestione storico
            CaricaStoricoModifiche();
            
            base.OnPreRender(e);
        }

        private void InizializzaProvider()
        {
            bando_prog_provider = new BandoProgrammazioneCollectionProvider(ProgettoProvider.DbProviderObj);
            priorita_prog_provider = new PrioritaXProgettoCollectionProvider(ProgettoProvider.DbProviderObj);
            modifica_dati_provider = new ModificaDatiGeneraleCollectionProvider(ProgettoProvider.DbProviderObj);
            riepilogo_domande_provider = new SiarLibrary.NotAutogeneratedClasses.RiepilogoDomandePagamentoCollectionProvider();
            allegatiProtocollatiProvider = new AllegatiProtocollatiCollectionProvider(ProgettoProvider.DbProviderObj);
            varianti_provider = new VariantiCollectionProvider(ProgettoProvider.DbProviderObj);
        }

        private void PopolaImmagini()
        {
            //Immagini per progetto
            //imgMostraModificaProgetto.Attributes.Add("src", PATH_IMAGES + "ArrowUpSolid.png");
            //imgMostraRequisitiSoggettivi.Attributes.Add("src", PATH_IMAGES + "ArrowUpSolid.png");
            //imgMostraProgettoIndicatori.Attributes.Add("src", PATH_IMAGES + "ArrowUpSolid.png");

            //Immagini per domande pagamento
            //imgMostraModificaDomandePagamento.Attributes.Add("src", PATH_IMAGES + "ArrowUpSolid.png");

            //Immagini per varianti
            //imgMostraModificaVarianti.Attributes.Add("src", PATH_IMAGES + "ArrowUpSolid.png");

            //Immagini per storico
            //imgMostraStoricoModifiche.Attributes.Add("src", PATH_IMAGES + "ArrowUpSolid.png");
        }

        private void CaricaPrioritaProgetto()
        {
            txtNoteRequisitiProgetto.Text = null;

            var disposizioni_attuative = bando_prog_provider.GetDispAttuativeBando(Progetto.IdBando, Progetto.IdProgetto);
            foreach (BandoProgrammazione d in disposizioni_attuative)
            {
                Control c = LoadControl(PATH_CONTROLS + "RequisitiMisura.ascx");
                System.Reflection.PropertyInfo progi = c.GetType().GetProperty("IdProgIntegrato");
                progi.SetValue(c, Progetto.IdProgetto, null);
                System.Reflection.PropertyInfo pi = c.GetType().GetProperty("DisposizioniAttuative");
                pi.SetValue(c, d, null);
                System.Reflection.PropertyInfo fasei = c.GetType().GetProperty("fase_istruttoria");
                fasei.SetValue(c, false, null);
                divDisposizioniAttuative.Controls.Add(c);
            }
        }

        private void CaricaProgettoIndicatori()
        {
            txtNoteIndicatoriProgetto.Text = null;
            var monitoraggio_selezionato = false;

            var bp_coll = new BusinessPlanCollectionProvider().GetBusinessPlanBando(Progetto.IdBando);
            foreach (BusinessPlan bp in bp_coll)
            {
                if (bp.IdBando == Progetto.IdBando 
                    && bp.Quadro.Contains("Dati di Monitoraggio"))
                    monitoraggio_selezionato = true;
            }

            if (monitoraggio_selezionato)
            {
                ucProgettoInd.Progetto = Progetto;
                ucProgettoInd.Istruttoria = CONTROLS.ProgettoIndicatori.eIstruttoria.No;
                ucProgettoInd.StatoProgetto = CONTROLS.ProgettoIndicatori.eStato.Domanda;
                ucProgettoInd.Operatore = Operatore.Utente.IdUtente;
                ucProgettoInd.ModificaDatiGenerale = true;
                ucProgettoInd.DataBind();
            }
            else
            {
                divProgettoIndicatori.Visible = false;
                txtNoteIndicatoriProgetto.Enabled = false;
                btnSalvaIndicatoriProgetto.Visible = false;
            }
        }

        private void CaricaDomandePagamento()
        {
            try
            {
                permessi_operatore = DbStaticProvider.GetPermessiOperatoreSuGestioneLavori(Progetto.IdProgetto, Operatore.Utente.IdUtente, null);

                var utAppalto = new SiarBLL.BandoConfigCollectionProvider().GetBandoConfig_TpAppaltoDescrizione(Progetto.IdBando);
                if (utAppalto != null && utAppalto == "Strumenti finanziari")
                    strumenti_finanziari = true;

                var domande_collection = riepilogo_domande_provider.Find(Progetto.IdProgetto);
                if (domande_collection.Count > 0)
                {
                    dgDomande.DataSource = domande_collection;
                    dgDomande.ItemDataBound += new DataGridItemEventHandler(dgDomande_ItemDataBound);
                    dgDomande.ShowFooter = true;
                    dgDomande.FooterStyle.CssClass = "TotaliFooter";
                    dgDomande.DataBind();
                }
                else
                {
                    dgDomande.Titolo = "Nessuna domanda di pagamento trovata.";
                }
            }
            catch (Exception ex)
            {
                ShowError(ex.Message);
            }
        }

        private void CaricaVarianti()
        {
            try
            {
                var varianti_collection = varianti_provider.Find(null, Progetto.IdProgetto, null);
                if (varianti_collection.Count > 0)
                {
                    dgVarianti.DataSource = varianti_collection;
                    dgVarianti.ItemDataBound += new DataGridItemEventHandler(dgVarianti_ItemDataBound);
                    dgVarianti.ShowFooter = true;
                    dgVarianti.FooterStyle.CssClass = "TotaliFooter";
                    dgVarianti.DataBind();
                }
                else
                {
                    dgVarianti.Titolo = "Nessuna variante trovata.";
                }
            }
            catch (Exception ex)
            {
                ShowError(ex.Message);
            }
        }

        private void CaricaStoricoModifiche()
        {
            try
            {
                var modifiche_collection = modifica_dati_provider.Find(Progetto.IdProgetto, null, null, null, null, null);
                if (modifiche_collection.Count > 0)
                {
                    lblNumModifiche.Text = string.Format("Visualizzate {0} righe", modifiche_collection.Count.ToString());

                    dgModifiche.DataSource = modifiche_collection;
                    dgModifiche.ItemDataBound += new DataGridItemEventHandler(dgModifiche_ItemDataBound);
                    dgModifiche.DataBind();
                }
                else
                {
                    lblNumModifiche.Text = "Nessuna modifica trovata.";
                }
            }
            catch(Exception ex)
            {
                ShowError(ex.Message);
            }
        }

        private SiarLibrary.NullTypes.IntNT InserisciProgettoCorrelato(int id_disposizioni)
        {
            // inserisco la domanda che risponde alle disposizioni attuative
            Progetto p = new Progetto();
            p.FlagDefinitivo = false;
            p.FlagPreadesione = false;
            p.IdImpresa = Progetto.IdImpresa;
            p.IdBando = id_disposizioni;
            p.DataCreazione = DateTime.Now;
            p.OperatoreCreazione = Operatore.Utente.IdUtente;
            p.IdProgIntegrato = Progetto.IdProgetto;
            p.IdFascicolo = Progetto.IdFascicolo;
            ProgettoProvider.Save(p);

            ProgettoStorico s = new ProgettoStorico();
            s.IdProgetto = p.IdProgetto;
            s.CodStato = "P";
            s.Data = DateTime.Now;
            s.Operatore = Operatore.Utente.IdUtente;
            new ProgettoStoricoCollectionProvider(ProgettoProvider.DbProviderObj).Save(s);

            p.IdStoricoUltimo = s.Id;
            ProgettoProvider.Save(p);
            return p.IdProgetto;
        }

        private bool CheckAllegatiProtocollati(SiarLibrary.NotAutogeneratedClasses.RiepilogoDomandePagamento domanda, int numeroAllegati)
        {
            var allegatiProtocollati = allegatiProtocollatiProvider.Find(null, domanda.IdDomandaPagamento, null, null, null, null, true, domanda.Segnatura);
            if (allegatiProtocollati.Count == numeroAllegati || numeroAllegati == 0)
                return true;
            else
                return false;
        }

        #region ItemDataBound

        void dgDomande_ItemDataBound(object sender, DataGridItemEventArgs e)
        {
            DataGridItem dgi = (DataGridItem)e.Item;

            int col_Richiesta = 0,
                col_IdDomanda = 1,
                col_Modalita = 2,
                col_ImportoRichiesto = 3,
                col_ContributoRichiesto = 4,
                col_DomandaPagamento = 5,
                col_Istruita = 6,
                col_DataIstruttoria = 7,
                col_ImportoAmmesso = 8,
                col_ContributoAmmesso = 9,
                col_SelezionaDomanda = 10;

            if (dgi.ItemType == ListItemType.Header)
            {
                dgi.CssClass = "TESTA1";
                dgi.Cells[col_Richiesta].ColumnSpan = 6;
                dgi.Cells[col_Richiesta].HorizontalAlign = HorizontalAlign.Center;
                dgi.Cells[col_Richiesta].Text = "DOMANDE DI PAGAMENTO</td><td colspan=4 align=center>RIEPILOGO ISTRUTTORIA</td><td></td></tr><tr class='TESTA'><td>Richiesta";
            }
            else if (dgi.ItemType == ListItemType.Footer)
            {
                // se l'importo richiesto + maggiore del contributo massimo del bando allora faccio vedere il contributo massimo del bando
                decimal importoMassimoBando = 0;
                dgi.Cells[col_ContributoRichiesto].Text = "";
                BandoTipoInvestimentiCollection bti_coll = new BandoTipoInvestimentiCollectionProvider().Find(Progetto.IdBando, 7, null);
                if (bti_coll.Count > 0 && bti_coll[0].ImportoMax != null)
                {
                    importoMassimoBando = bti_coll[0].ImportoMax;
                    if (contributo_richiesto > importoMassimoBando)
                    {
                        contributo_richiesto = importoMassimoBando;
                        dgi.Cells[col_ContributoRichiesto].Text += "** ";
                    }
                }

                dgi.Cells[col_ImportoRichiesto].Text = string.Format("{0:c}", importo_richiesto);
                dgi.Cells[col_ContributoRichiesto].Text += string.Format("{0:c}", contributo_richiesto);
                dgi.Cells[col_ImportoAmmesso].Text = string.Format("{0:c}", importo_ammesso);
                dgi.Cells[col_ContributoAmmesso].Text = string.Format("{0:c}", contributo_ammesso);
            }
            else
            {
                SiarLibrary.NotAutogeneratedClasses.RiepilogoDomandePagamento domanda = (SiarLibrary.NotAutogeneratedClasses.RiepilogoDomandePagamento)dgi.DataItem;
                if (domanda.IdDomandaPagamento == null)
                {
                    dgi.Cells[col_Richiesta].Text = "<input type='checkbox' disabled=true />";
                    dgi.Cells[col_Istruita].Text = "<input type='checkbox' disabled=true />";
                    dgi.Cells[col_SelezionaDomanda].Text = "";
                }
                else
                {
                    dgi.Cells[col_Richiesta].Text = "<input type='checkbox' disabled=true checked />";
                    dgi.Cells[col_Istruita].Text = "<input type='checkbox' disabled=true />";
                    if (domanda.CodTipo == "ANT")
                    {
                        dgi.Cells[col_ImportoRichiesto].Text = "--";
                        dgi.Cells[col_ImportoRichiesto].Style.Add("text-align", "center");
                        dgi.Cells[col_ImportoAmmesso].Text = "--"; 
                    }
                    if (domanda.Segnatura != null)
                    {
                        var ff = allegatiProtocollatiProvider.Find(null, domanda.IdDomandaPagamento, null, null, null, null, null, null);
                        int numeroAllegati = ff.Count;

                        //bool allegatiProtocollatiOk = CheckAllegatiProtocollati(domanda, numeroAllegati);
                        bool allegatiProtocollatiOk = allegatiProtocollatiProvider.CheckAllegatiProtocollati(AllegatiProtocollatiCollectionProvider.TipoCheck.DomandaDiPagamento, domanda.IdDomandaPagamento, domanda.Segnatura);

                        if (allegatiProtocollatiOk)
                        {
                            //dgi.Cells[col_DomandaPagamento].Text = "<img src='" + Page.ResolveUrl(PATH_IMAGES + "print_ico.gif") + "' alt='Domanda'  onclick=\"sncAjaxCallVisualizzaProtocollo('" + domanda.Segnatura + "');\" style='cursor: pointer;'>";
                            dgi.Cells[col_DomandaPagamento].Text = "<img src='" + Page.ResolveUrl(PATH_IMAGES + "print_ico.gif") + "' alt='Domanda'  onclick=\"MostraProtocolloNew('" + domanda.Segnatura + "');\" style='cursor: pointer;'>";
                            bool in_istruttoria = !domanda.Annullata
                                && (domanda.Approvata == null || domanda.SegnaturaApprovazione == null);
                            if (in_istruttoria)
                            {
                                //nascondo la lavorazione dell'istruttoria della domanda 
                                if (permessi_operatore > 2)
                                    dgi.Cells[col_Modalita].Text = "<b>istruttoria in corso</b>";

                                domanda.ImportoAmmesso = null;
                                domanda.ContributoAmmesso = null;
                                dgi.Cells[col_ImportoAmmesso].Text = "";
                                dgi.Cells[col_ContributoAmmesso].Text = "";
                                dgi.Cells[col_SelezionaDomanda].Text = "Domanda in istruttoria.";
                            }
                            else if (!domanda.Annullata)
                            {
                                dgi.Cells[col_Istruita].Text = "<input type='checkbox' disabled=true checked />";

                                if (domanda.Approvata != null && !domanda.Approvata)
                                {
                                    for (int i = col_Modalita; i < col_SelezionaDomanda; i++)
                                    {
                                        dgi.Cells[i].Style.Add("text-decoration", "line-through");
                                        dgi.Cells[i].Style.Add("color", "#bc3333");
                                    }

                                    dgi.Cells[col_SelezionaDomanda].Text = "Domanda non approvata.";
                                }
                                else
                                {
                                    var dom_pag = new DomandaDiPagamentoCollectionProvider().GetById(domanda.IdDomandaPagamento);
                                    dgi.Cells[col_DataIstruttoria].Text = dom_pag.DataApprovazione.Value.ToString("dd/MM/yyyy");
                                }
                            }
                        }
                    }
                    else
                    {
                        dgi.Cells[col_SelezionaDomanda].Text = "Domanda non ancora presentata.";
                    }
                    
                    if (!domanda.Annullata)
                    {
                        if (!strumenti_finanziari)
                        {
                            if (domanda.ImportoRichiesto != null)
                                importo_richiesto += domanda.ImportoRichiesto;
                            if (domanda.ContributoRichiesto != null)
                                contributo_richiesto += domanda.ContributoRichiesto;

                            if (domanda.Approvata != null && domanda.Approvata)
                            {
                                if (domanda.ImportoAmmesso != null)
                                    importo_ammesso += domanda.ImportoAmmesso;
                                if (domanda.ContributoAmmesso != null)
                                    contributo_ammesso += domanda.ContributoAmmesso;
                            }
                        }
                        else
                        {
                            var pag_rich_fem_list = new SiarBLL.PagamentiRichiestiFemCollectionProvider()
                                .Find(null, null, null, Progetto.IdProgetto, domanda.IdDomandaPagamento, null)
                                .ToArrayList<SiarLibrary.PagamentiRichiestiFem>();

                            var richiesto = pag_rich_fem_list.Sum(p => p.ImportoRichiesto);
                            dgi.Cells[col_ImportoRichiesto].Text = string.Format("{0:c}", richiesto);
                            dgi.Cells[col_ContributoRichiesto].Text = string.Format("{0:c}", richiesto);
                            importo_richiesto += richiesto;
                            contributo_richiesto += richiesto;

                            if (domanda.Approvata != null && domanda.Approvata)
                            {
                                var ammesso = pag_rich_fem_list.Sum(p => p.ImportoAmmesso);
                                dgi.Cells[col_ImportoAmmesso].Text = string.Format("{0:c}", ammesso);
                                dgi.Cells[col_ContributoAmmesso].Text = string.Format("{0:c}", ammesso);
                                importo_ammesso += ammesso;
                                contributo_ammesso += ammesso;
                            }
                        }
                    }
                    else
                    {
                        dgi.Cells[col_ImportoAmmesso].Text = "";
                        dgi.Cells[col_ContributoAmmesso].Text = "";
                        for (int i = col_Modalita; i < col_SelezionaDomanda; i++)
                        {
                            dgi.Cells[i].Style.Add("color", "grey");
                            dgi.Cells[i].Style.Add("text-decoration", "line-through");
                        }
                    }
                }
            }
        }

        void dgVarianti_ItemDataBound(object sender, DataGridItemEventArgs e)
        {
            DataGridItem dgi = (DataGridItem)e.Item;

            int col_Nr = 0,
                col_CambioSoggetto = 1,
                col_Data = 2,
                col_Modalita = 3,
                col_Operatore = 4,
                col_Istruita = 5,
                col_DataApprovazione = 6,
                col_Approvata = 7,
                col_Istruttore = 8,
                col_SelezionaVariante = 9;

            if (dgi.ItemType == ListItemType.Header)
            {
                dgi.CssClass = "TESTA1";
                dgi.Cells[col_Nr].ColumnSpan = 5;
                dgi.Cells[col_Nr].HorizontalAlign = HorizontalAlign.Center;
                dgi.Cells[col_Nr].Text = "VARIANTI/VARIAZIONI FINANZIARIE/A.T.</td><td colspan=4 align=center>RIEPILOGO ISTRUTTORIA</td><td></td></tr><tr class='TESTA'><td>Nr.";
            }
            else if (dgi.ItemType != ListItemType.Footer)
            {
                Varianti v = (Varianti)dgi.DataItem;

                if (v.CuaaEntrante != null)
                    dgi.Cells[col_CambioSoggetto].Text = "<img src='" + PATH_IMAGES + "soggetto.ico' alt='Variante con richiesta di cambio beneficiario' />";

                if (v.Annullata)
                {
                    dgi.Cells[col_Approvata].Text = "ANNULLATA DAL RICHIEDENTE";
                    for (int i = col_Data; i < col_Istruita; i++)
                        dgi.Cells[i].Style.Add("text-decoration", "line-through");

                    dgi.Cells[col_SelezionaVariante].Text = "Variante annullata dal richiedente.";
                }

                if (v.CodTipo.FindValueIn("VI", "AR"))
                    dgi.Cells[col_Modalita].Text = "<b>" + v.TipoVariante + "</b>";
                else
                    dgi.Cells[col_Modalita].Text = "<b>" + v.TipoVariante + ": </b>" 
                        + (v.Descrizione == null ? "" : (v.Descrizione.Value.Length > 120 ? v.Descrizione.Value.Substring(0, 117) + "..." : v.Descrizione.Value));

                dgi.Cells[col_Operatore].Text = "Nominativo: <b>" + v.Nominativo + "</b><br />Ruolo: <b>" + v.Profilo + "</b><br />Ente: <b>" + v.Ente + "</b>";
                
                if (v.SegnaturaApprovazione != null || (v.CodTipo == "VI" && v.Approvata != null))
                    dgi.Cells[col_Istruita].Text = "<input type='checkbox' disabled=true checked />";
                else
                {
                    dgi.Cells[col_Istruita].Text = "<input type='checkbox' disabled=true />";
                    dgi.Cells[col_Approvata].Text = "";
                    dgi.Cells[col_Istruttore].Text = "";
                    dgi.Cells[col_SelezionaVariante].Text = "Variante non approvata.";
                }
            }
        }

        void dgModifiche_ItemDataBound(object sender, DataGridItemEventArgs e)
        {
            int col_Id = 0,
                col_Target = 1,
                col_IdDomandaPagamento = 2,
                col_IdVariante = 3,
                col_DataModifica = 4,
                col_UtenteModifica = 5,
                col_TipoModifica = 6,
                col_Note = 7,
                col_Dettaglio = 8;

            DataGridItem dgi = (DataGridItem)e.Item;

            if (e.Item.ItemType == ListItemType.Item || e.Item.ItemType == ListItemType.AlternatingItem)
            {
                var modifica = (ModificaDatiGenerale)dgi.DataItem;

                if (modifica.Note != null && modifica.Note != "")
                {
                    var note = modifica.Note.ToString();

                    if (note.Length > 150)
                        dgi.Cells[col_Note].Text = note.Substring(0, 150) + " [...] ";
                }
            }
        }

        #endregion

        #region Button event

        protected void btnSalvaRequisitiProgetto_Click(object sender, EventArgs e)
        {
            try
            {
                ProgettoProvider.DbProviderObj.BeginTran();
                InizializzaProvider();

                var modifica_dati = new ModificaDatiGenerale();
                modifica_dati.IdUtenteModifica = Operatore.Utente.IdUtente;
                modifica_dati.DataModifica = DateTime.Now;
                modifica_dati.IdProgetto = Progetto.IdProgetto;
                modifica_dati.CodTipoModifica = new TipoModificaGeneraleCollectionProvider().Find(null, ModificaDatiGenerale.eTipoModifica.Priorita.ToString(), true)[0].IdTipoModifica;
                modifica_dati.Note = txtNoteRequisitiProgetto.Text;
                var priorita_nuove = new PrioritaXProgettoCollection();

                var disposizioni_attuative = bando_prog_provider.GetDispAttuativeBando(Progetto.IdBando, Progetto.IdProgetto);

                ListItemCollection licoll = new ListItemCollection();
                foreach (BandoProgrammazione d in disposizioni_attuative)
                {
                    SiarLibrary.NullTypes.IntNT IdProgetto = new SiarLibrary.NullTypes.IntNT(d.AdditionalAttributes["IdProgetto"]);
                    if (IdProgetto == null)
                        IdProgetto = InserisciProgettoCorrelato(d.IdDisposizioniAttuative);
                    else
                    {
                        var priorita_vecchie = priorita_prog_provider.Find(IdProgetto, null, null);
                        var istanza_priorita = new IstanzaPrioritaXProgetto(priorita_vecchie);
                        modifica_dati.IstanzaPrecedente = istanza_priorita.Serialize();
                        priorita_prog_provider.DeleteCollection(priorita_vecchie);
                    }

                    PrioritaXProgettoCollection priorita_progetto = priorita_prog_provider.GetPrioritaDisposizioniAttuative(
                        d.IdDisposizioniAttuative, "D", IdProgetto);

                    foreach (PrioritaXProgetto pp in priorita_progetto)
                    {
                        if (pp.InputNumerico)
                        {
                            decimal valore;
                            if (decimal.TryParse(Request.Form["txtPriorita" + pp.IdPriorita + "_" + d.IdDisposizioniAttuative + "_text"], out valore))
                            {
                                PrioritaXProgetto pp_new = new PrioritaXProgetto();
                                pp_new.IdProgetto = IdProgetto;
                                pp_new.IdPriorita = pp.IdPriorita;
                                pp_new.Valore = valore;
                                pp_new.DataValutazione = pp.DataValutazione;
                                pp_new.OperatoreValutazione = pp.OperatoreValutazione;
                                pp_new.ModificaManuale = pp.ModificaManuale;
                                pp_new.Priorita = pp.Priorita;
                                pp_new.CodLivello = pp.CodLivello;
                                pp_new.PluriValore = pp.PluriValore;
                                pp_new.Eval = pp.Eval;
                                pp_new.FlagManuale = pp.FlagManuale;
                                pp_new.ValoreDesc = pp.ValoreDesc;
                                pp_new.IdValore = pp.IdValore;
                                pp_new.Punteggio = pp.Punteggio;
                                pp_new.InputNumerico = pp.InputNumerico;
                                pp_new.Misura = pp.Misura;
                                pp_new.Datetime = pp.Datetime;
                                pp_new.TestoSemplice = pp.TestoSemplice;
                                pp_new.TestoArea = pp.TestoArea;
                                pp_new.PluriValoreSql = pp.PluriValoreSql;
                                pp_new.QueryPlurivalore = pp.QueryPlurivalore;
                                pp_new.ValData = pp.ValData;
                                pp_new.ValTesto = pp.ValTesto;
                                
                                priorita_prog_provider.Save(pp_new);
                                priorita_nuove.Add(pp_new);
                            }
                        }
                        else if (pp.PluriValore)
                        {
                            int id_valore_priorita, id_disposizione_attuativa_check;
                            foreach (string s in Request.Form.AllKeys)
                            {
                                if (s.EndsWith("hdnPlurivaloreSelezionatoDisposizione" + pp.IdPriorita) && int.TryParse(Request.Form[s],
                                    out id_disposizione_attuativa_check) && id_disposizione_attuativa_check == d.IdDisposizioniAttuative &&
                                    int.TryParse(Request.Form[s.Replace("hdnPlurivaloreSelezionatoDisposizione", "hdnPlurivaloreSelezionato")], out id_valore_priorita))
                                {
                                    PrioritaXProgetto pp_new = new PrioritaXProgetto();
                                    pp_new.IdProgetto = IdProgetto;
                                    pp_new.IdPriorita = pp.IdPriorita;
                                    pp_new.Valore = pp.Valore;
                                    pp_new.DataValutazione = pp.DataValutazione;
                                    pp_new.OperatoreValutazione = pp.OperatoreValutazione;
                                    pp_new.ModificaManuale = pp.ModificaManuale;
                                    pp_new.Priorita = pp.Priorita;
                                    pp_new.CodLivello = pp.CodLivello;
                                    pp_new.PluriValore = pp.PluriValore;
                                    pp_new.Eval = pp.Eval;
                                    pp_new.FlagManuale = pp.FlagManuale;
                                    pp_new.ValoreDesc = pp.ValoreDesc;
                                    pp_new.IdValore = id_valore_priorita;
                                    pp_new.Punteggio = pp.Punteggio;
                                    pp_new.InputNumerico = pp.InputNumerico;
                                    pp_new.Misura = pp.Misura;
                                    pp_new.Datetime = pp.Datetime;
                                    pp_new.TestoSemplice = pp.TestoSemplice;
                                    pp_new.TestoArea = pp.TestoArea;
                                    pp_new.PluriValoreSql = pp.PluriValoreSql;
                                    pp_new.QueryPlurivalore = pp.QueryPlurivalore;
                                    pp_new.ValData = pp.ValData;
                                    pp_new.ValTesto = pp.ValTesto;

                                    priorita_prog_provider.Save(pp_new);
                                    priorita_nuove.Add(pp_new);
                                    break;
                                }
                            }
                        }
                        else if (pp.PluriValoreSql)
                        {
                            int id_disposizione_attuativa_check;
                            foreach (string s in Request.Form.AllKeys)
                            {
                                if (s.EndsWith("hdnPlurivaloreSelezionatoDisposizioneSql" + pp.IdPriorita) &&
                                    int.TryParse(Request.Form[s], out id_disposizione_attuativa_check) &&
                                    id_disposizione_attuativa_check == d.IdDisposizioniAttuative)
                                {
                                    string id_valore_priorita = Request.Form[s.Replace("hdnPlurivaloreSelezionatoDisposizioneSql", "hdnPlurivaloreSelezionatoSql")];
                                    if (!string.IsNullOrEmpty(id_valore_priorita))
                                    {
                                        PrioritaXProgetto pp_new = new PrioritaXProgetto();
                                        pp_new.IdProgetto = IdProgetto;
                                        pp_new.IdPriorita = pp.IdPriorita;
                                        pp_new.Valore = pp.Valore;
                                        pp_new.DataValutazione = pp.DataValutazione;
                                        pp_new.OperatoreValutazione = pp.OperatoreValutazione;
                                        pp_new.ModificaManuale = pp.ModificaManuale;
                                        pp_new.Priorita = pp.Priorita;
                                        pp_new.CodLivello = pp.CodLivello;
                                        pp_new.PluriValore = pp.PluriValore;
                                        pp_new.Eval = pp.Eval;
                                        pp_new.FlagManuale = pp.FlagManuale;
                                        pp_new.ValoreDesc = pp.ValoreDesc;
                                        pp_new.IdValore = pp.IdValore;
                                        pp_new.Punteggio = pp.Punteggio;
                                        pp_new.InputNumerico = pp.InputNumerico;
                                        pp_new.Misura = pp.Misura;
                                        pp_new.Datetime = pp.Datetime;
                                        pp_new.TestoSemplice = pp.TestoSemplice;
                                        pp_new.TestoArea = pp.TestoArea;
                                        pp_new.PluriValoreSql = pp.PluriValoreSql;
                                        pp_new.QueryPlurivalore = pp.QueryPlurivalore;
                                        pp_new.ValData = pp.ValData;
                                        pp_new.ValTesto = id_valore_priorita;

                                        priorita_prog_provider.Save(pp_new);
                                        priorita_nuove.Add(pp_new);
                                        break;
                                    }
                                }
                            }
                        }
                        else if (pp.Datetime)
                        {
                            DateTime data;
                            if (DateTime.TryParse(Request.Form["txtPriorita" + pp.IdPriorita + "_" + d.IdDisposizioniAttuative + "_text"], out data))
                            {
                                PrioritaXProgetto pp_new = new PrioritaXProgetto();
                                pp_new.IdProgetto = IdProgetto;
                                pp_new.IdPriorita = pp.IdPriorita;
                                pp_new.Valore = pp.Valore;
                                pp_new.DataValutazione = pp.DataValutazione;
                                pp_new.OperatoreValutazione = pp.OperatoreValutazione;
                                pp_new.ModificaManuale = pp.ModificaManuale;
                                pp_new.Priorita = pp.Priorita;
                                pp_new.CodLivello = pp.CodLivello;
                                pp_new.PluriValore = pp.PluriValore;
                                pp_new.Eval = pp.Eval;
                                pp_new.FlagManuale = pp.FlagManuale;
                                pp_new.ValoreDesc = pp.ValoreDesc;
                                pp_new.IdValore = pp.IdValore;
                                pp_new.Punteggio = pp.Punteggio;
                                pp_new.InputNumerico = pp.InputNumerico;
                                pp_new.Misura = pp.Misura;
                                pp_new.Datetime = pp.Datetime;
                                pp_new.TestoSemplice = pp.TestoSemplice;
                                pp_new.TestoArea = pp.TestoArea;
                                pp_new.PluriValoreSql = pp.PluriValoreSql;
                                pp_new.QueryPlurivalore = pp.QueryPlurivalore;
                                pp_new.ValData = data;
                                pp_new.ValTesto = pp.ValTesto;

                                priorita_prog_provider.Save(pp_new);
                                priorita_nuove.Add(pp_new);
                            }

                        }
                        else if (pp.TestoSemplice || pp.TestoArea)
                        {
                            string testoIn = Request.Form["txtPriorita" + pp.IdPriorita + "_" + d.IdDisposizioniAttuative + "_text"];
                            if (!string.IsNullOrEmpty(Request.Form["txtPriorita" + pp.IdPriorita + "_" + d.IdDisposizioniAttuative + "_text"]))
                            {
                                PrioritaXProgetto pp_new = new PrioritaXProgetto();
                                pp_new.IdProgetto = IdProgetto;
                                pp_new.IdPriorita = pp.IdPriorita;
                                pp_new.Valore = pp.Valore;
                                pp_new.DataValutazione = pp.DataValutazione;
                                pp_new.OperatoreValutazione = pp.OperatoreValutazione;
                                pp_new.ModificaManuale = pp.ModificaManuale;
                                pp_new.Priorita = pp.Priorita;
                                pp_new.CodLivello = pp.CodLivello;
                                pp_new.PluriValore = pp.PluriValore;
                                pp_new.Eval = pp.Eval;
                                pp_new.FlagManuale = pp.FlagManuale;
                                pp_new.ValoreDesc = pp.ValoreDesc;
                                pp_new.IdValore = pp.IdValore;
                                pp_new.Punteggio = pp.Punteggio;
                                pp_new.InputNumerico = pp.InputNumerico;
                                pp_new.Misura = pp.Misura;
                                pp_new.Datetime = pp.Datetime;
                                pp_new.TestoSemplice = pp.TestoSemplice;
                                pp_new.TestoArea = pp.TestoArea;
                                pp_new.PluriValoreSql = pp.PluriValoreSql;
                                pp_new.QueryPlurivalore = pp.QueryPlurivalore;
                                pp_new.ValData = pp.ValData;
                                pp_new.ValTesto = testoIn;

                                priorita_prog_provider.Save(pp_new);
                                priorita_nuove.Add(pp_new);
                            }

                        }
                        else if (!string.IsNullOrEmpty(Request.Form["chkPriorita"]))
                        {
                            string[] priorita_selezionate = Request.Form["chkPriorita"].Split(',');
                            foreach (string s in priorita_selezionate)
                            {
                                if (pp.IdPriorita == int.Parse(s))
                                {
                                    PrioritaXProgetto pp_new = new PrioritaXProgetto();
                                    pp_new.IdProgetto = IdProgetto;
                                    pp_new.IdPriorita = pp.IdPriorita;
                                    pp_new.Valore = pp.Valore;
                                    pp_new.DataValutazione = pp.DataValutazione;
                                    pp_new.OperatoreValutazione = pp.OperatoreValutazione;
                                    pp_new.ModificaManuale = pp.ModificaManuale;
                                    pp_new.Priorita = pp.Priorita;
                                    pp_new.CodLivello = pp.CodLivello;
                                    pp_new.PluriValore = pp.PluriValore;
                                    pp_new.Eval = pp.Eval;
                                    pp_new.FlagManuale = pp.FlagManuale;
                                    pp_new.ValoreDesc = pp.ValoreDesc;
                                    pp_new.IdValore = pp.IdValore;
                                    pp_new.Punteggio = pp.Punteggio;
                                    pp_new.InputNumerico = pp.InputNumerico;
                                    pp_new.Misura = pp.Misura;
                                    pp_new.Datetime = pp.Datetime;
                                    pp_new.TestoSemplice = pp.TestoSemplice;
                                    pp_new.TestoArea = pp.TestoArea;
                                    pp_new.PluriValoreSql = pp.PluriValoreSql;
                                    pp_new.QueryPlurivalore = pp.QueryPlurivalore;
                                    pp_new.ValData = pp.ValData;
                                    pp_new.ValTesto = pp.ValTesto;

                                    priorita_prog_provider.Save(pp_new);
                                    priorita_nuove.Add(pp_new);
                                    break;
                                }
                            }
                        }
                    }
                }

                // ricalcolo il contributo degli investimenti in caso di variazioni delle priorita con aiuto addizionale
                PianoInvestimentiCollectionProvider investimenti_provider = new PianoInvestimentiCollectionProvider(ProgettoProvider.DbProviderObj);
                foreach (PianoInvestimenti i in investimenti_provider.GetSituazionePianoInvestimenti(Progetto.IdProgetto))
                {
                    PianoInvestimenti investimento = i;
                    if (!investimento.NonCofinanziato)
                    {
                        // salvo contributo e quota
                        investimenti_provider.CalcoloContributoInvestimento(ref investimento, "PDOMANDA", null);
                        investimenti_provider.Save(investimento);
                    }
                }

                var istanza_priorita_nuova = new IstanzaPrioritaXProgetto(priorita_nuove);
                modifica_dati.IstanzaNuovo = istanza_priorita_nuova.Serialize();
                modifica_dati_provider.Save(modifica_dati);

                ProgettoProvider.DbProviderObj.Commit();
                ShowMessage("Requisiti salvati correttamente.");
            }
            catch (Exception ex)
            {
                ProgettoProvider.DbProviderObj.Rollback();
                ShowError(ex.Message);
            }
        }

        protected void btnSalvaIndicatoriProgetto_Click(object sender, EventArgs e)
        {
            try
            {
                ucProgettoInd.Progetto = Progetto;
                ucProgettoInd.Istruttoria = CONTROLS.ProgettoIndicatori.eIstruttoria.Si;
                ucProgettoInd.StatoProgetto = CONTROLS.ProgettoIndicatori.eStato.Domanda;
                ucProgettoInd.Operatore = Operatore.Utente.IdUtente;
                ucProgettoInd.ModificaDatiGenerale = true;
                ucProgettoInd.SalvaModificaDatiGenerale(txtNoteIndicatoriProgetto.Text);

                ShowMessage("Indicatori salvati correttamente.");
            }
            catch (Exception ex)
            {
                ShowError(ex.Message);
            }
        }

        protected void btnModificaDomanda_Click(object sender, EventArgs e)
        {
            try
            {
                int id_domanda;
                if (int.TryParse(hdnIdDomanda.Value, out id_domanda))
                {
                    Domanda = new DomandaDiPagamentoCollectionProvider().GetById(id_domanda);

                    Redirect(PATH_MODIFICA + "ModificaDomanda.aspx");
                }
                else
                    throw new Exception("Nessuna domanda selezionata.");
            }
            catch (Exception ex)
            {
                ShowError(ex.Message);
            }
        }

        protected void btnModificaVariante_Click(object sender, EventArgs e)
        {
            try
            {
                int id_variante;
                if (int.TryParse(hdnIdVariante.Value, out id_variante))
                {
                    Variante = new VariantiCollectionProvider().GetById(id_variante);

                    Redirect(PATH_MODIFICA + "ModificaVariante.aspx");
                }
                else
                    throw new Exception("Nessuna variante selezionata.");
            }
            catch (Exception ex)
            {
                ShowError(ex.Message);
            }
        }

        protected void btnVisualizzaModifica_Click(object sender, EventArgs e)
        {
            try
            {
                int id_modifica;
                if (int.TryParse(hdnIdModifica.Value, out id_modifica))
                {
                    ModificaDati = new ModificaDatiGeneraleCollectionProvider().GetById(id_modifica);

                    Redirect(PATH_MODIFICA + "VisualizzaModifica.aspx");
                }
                else
                    throw new Exception("Nessuna modifica selezionata.");
            }
            catch (Exception ex)
            {
                ShowError(ex.Message);
            }
        }

        protected void btnMostraProtocollo_Click(object sender, EventArgs e)
        {
            try
            {
                string segnatura = hdnSegnatura.Value;
                if (string.IsNullOrEmpty(segnatura) || segnatura == "undefined")
                    throw new Exception("Segnatura vuota");

                modaleMostraProtocollo.Segnatura = segnatura;
                RegisterClientScriptBlock(modaleMostraProtocollo.Mostra);
            }
            catch (Exception ex)
            {
                RegisterClientScriptBlock("chiudiPopupTemplate();");
                ShowError(ex.Message);
            }
        }

        #endregion
    }
}