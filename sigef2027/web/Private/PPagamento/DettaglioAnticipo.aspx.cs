using System;
using System.Web.UI;
using System.Web.UI.WebControls;

namespace web.Private.PPagamento
{
    public partial class DettaglioAnticipo : SiarLibrary.Web.DomandaPagamentoPage
    {
        SiarLibrary.NotAutogeneratedClasses.AnticipiRichiestiCollection anticipi;

        protected void Page_Load(object sender, EventArgs e)
        {
            anticipi = new SiarLibrary.NotAutogeneratedClasses.AnticipiRichiestiCollectionProvider()
                .CalcoloAmmontareAnticipo(Progetto.IdBando, DomandaPagamento.IdDomandaPagamento);
        }

        protected override void OnPreRender(EventArgs e)
        {
            dgMisure.DataSource = anticipi;
            dgMisure.MostraTotale("Importo", 1, 2, 3, 5);
            dgMisure.ItemDataBound += new DataGridItemEventHandler(dgMisure_ItemDataBound);
            dgMisure.DataBind();
            base.OnPreRender(e);
        }

        protected override void OnPreRenderComplete(EventArgs e)
        {
            decimal somma = 0;
            foreach (SiarLibrary.NotAutogeneratedClasses.AnticipiRichiesti ant in anticipi)
            {
                if (ant.AmmontareRichiesto != null)
                    somma += ant.AmmontareRichiesto;
            }
            if (somma == 0)
            {
                ucWorkflowPagamento.ProseguiMessaggio = "Attenzione! Per proseguire occorre specificare l`ammontare dell`anticipo.";
                ucWorkflowPagamento.ProseguiAbilitato = false;
            }
            base.OnPreRenderComplete(e);
        }

        void dgMisure_ItemDataBound(object sender, DataGridItemEventArgs e)
        {
            if (e.Item.ItemType == ListItemType.Item || e.Item.ItemType == ListItemType.AlternatingItem)
            {
                SiarLibrary.NotAutogeneratedClasses.AnticipiRichiesti ant = (SiarLibrary.NotAutogeneratedClasses.AnticipiRichiesti)e.Item.DataItem;
                if (ant.CodTipo == null)
                {
                    e.Item.BackColor = System.Drawing.Color.FromArgb(204, 204, 179);
                    e.Item.Cells[3].Enabled = false; 
                }
                else
                {
                    decimal quota_richiesta = 0, quota_ammessa = 0;
                    if (ant.AmmontareRichiesto != null)
                        if (ant.ContributoDiMisura > 0 && ant.AmmontareRichiesto > 0) quota_richiesta = Math.Round(100 * ant.AmmontareRichiesto / ant.ContributoDiMisura, 2, MidpointRounding.AwayFromZero);
                    if (ant.AmmontareAmmesso != null)
                        if (ant.ContributoDiMisura > 0 && ant.AmmontareAmmesso > 0) quota_ammessa = Math.Round(100 * ant.AmmontareAmmesso / ant.ContributoDiMisura, 2, MidpointRounding.AwayFromZero);
                    e.Item.Cells[4].Text = e.Item.Cells[4].Text.Replace("value=\"\"", "value=\"" + quota_richiesta + "\"");
                    e.Item.Cells[6].Text = e.Item.Cells[6].Text.Replace("value=\"\"", "value=\"" + quota_ammessa + "\"");
                }
            }
        }

        protected void btnSalva_Click(object sender, EventArgs e)
        {
            try
            {
                if (DomandaPagamento.IdFidejussione != null)
                {
                    SiarLibrary.DomandaPagamentoFidejussioneImpresaCollection fid_col = new SiarBLL.DomandaPagamentoFidejussioneImpresaCollectionProvider().Find(null, DomandaPagamento.IdDomandaPagamento, DomandaPagamento.IdProgetto, null);
                    foreach(SiarLibrary.DomandaPagamentoFidejussioneImpresa fid in fid_col)
                    { 
                        //SiarLibrary.Fidejussioni fid = new SiarBLL.FidejussioniCollectionProvider().GetById(DomandaPagamento.IdFidejussione);
                        if (fid.Stampato != null && fid.Stampato)
                            throw new Exception("Impossibile modificare i dati già presenti poiché è stato stampato il modello precompilato della polizza fidejussoria.");
                    }
                }

                SiarBLL.AnticipiRichiestiCollectionProvider anticipo_provider = new SiarBLL.AnticipiRichiestiCollectionProvider(PagamentoProvider.DbProviderObj);
                SiarBLL.GraduatoriaProgettiFinanziabilitaCollectionProvider finanziabilita_provider = new SiarBLL.GraduatoriaProgettiFinanziabilitaCollectionProvider(PagamentoProvider.DbProviderObj);
                PagamentoProvider.DbProviderObj.BeginTran();
                string messaggio_esito = null;
                foreach (SiarLibrary.NotAutogeneratedClasses.AnticipiRichiesti ant in anticipi)
                {
                    if (ant.ContributoDiMisura != null) //se e' nullo non ha richiesto investimenti per quella misura, non calcolo nulla
                    {
                        string richiesto = null;
                        foreach (string s in Request.Form.AllKeys)
                            if (s.EndsWith("txtAmmontareRichiesto" + ant.IdBando + "_text")) { richiesto = Request.Form[s]; break; }

                        decimal ammontare;
                        if (decimal.TryParse(richiesto, out ammontare))
                        {
                            if (ammontare < 0) ammontare = 0;
                            // controllo range valori
                            decimal quota_minima = 0, quota_massima = 0, importo_minimo = 0, importo_massimo = 0;
                            decimal.TryParse(ant.ImportoMin, out importo_minimo);
                            decimal.TryParse(ant.ImportoMax, out importo_massimo);
                            if (ant.QuotaMin != null) quota_minima = Math.Round(ant.ContributoDiMisura * ant.QuotaMin / 100, 2, MidpointRounding.AwayFromZero);
                            if (ant.QuotaMax != null) quota_massima = Math.Round(ant.ContributoDiMisura * ant.QuotaMax / 100, 2, MidpointRounding.AwayFromZero);
                            if (quota_massima > 0 && importo_massimo > 0) quota_massima = Math.Min(quota_massima, importo_massimo);
                            else quota_massima = Math.Max(quota_massima, importo_massimo);//se una delle 2 =0 allora prendo il massimo tra le due                        
                            quota_minima = Math.Max(quota_minima, importo_minimo);
                            if (quota_minima > quota_massima)
                                throw new Exception("L`ammontare dell`anticipo non rientra nell`intervallo concedibile da bando. Non è possibile richiedere un anticipo.");

                            if (ammontare < quota_minima)
                            {
                                ammontare = quota_minima;
                                messaggio_esito = "L`ammontare dell`anticipo non rientra nell`intervallo concedibile da bando, si è proceduto ad un allineamento automatico dei valori richiesti. Salvataggio completato.";
                            }
                            else if (ammontare > quota_massima)
                            {
                                ammontare = quota_massima;
                                messaggio_esito = "L`ammontare dell`anticipo non rientra nell`intervallo concedibile da bando, si è proceduto ad un allineamento automatico dei valori richiesti. Salvataggio completato.";
                            }

                            // controllo finanziabilita' parziale
                            if (anticipi.Count > 1)
                            {
                                SiarLibrary.GraduatoriaProgettiFinanziabilita ammontare_finanziabile = finanziabilita_provider.GetById(ant.IdBando, ant.IdProgetto);
                                if (ammontare_finanziabile != null)
                                {
                                    decimal ammontare_da_graduatoria = ammontare_finanziabile.ContributoDiMisura;
                                    if (ant.QuotaMax != null) ammontare_da_graduatoria = Math.Round(ammontare_finanziabile.ContributoDiMisura * ant.QuotaMax / 100, 2, MidpointRounding.AwayFromZero);
                                    if (ammontare > ammontare_da_graduatoria)
                                    {
                                        ammontare = ammontare_da_graduatoria;
                                        messaggio_esito = "L`ammontare dell`anticipo richiesto supera quello finanziabile da graduatoria, si è proceduto ad un allineamento automatico dei valori richiesti. Salvataggio completato.";
                                    }
                                }
                            }
                            else
                            {
                                SiarLibrary.GraduatoriaProgetti ammontare_finanziabile = new SiarBLL.GraduatoriaProgettiCollectionProvider(PagamentoProvider.DbProviderObj).
                                    GetById(ant.IdBando, ant.IdProgetto);
                                if (ammontare_finanziabile != null)
                                {
                                    decimal ammontare_da_graduatoria = ammontare_finanziabile.ContributoTotale;
                                    if (ant.QuotaMax != null) ammontare_da_graduatoria = Math.Round(ammontare_finanziabile.ContributoTotale * ant.QuotaMax / 100, 2, MidpointRounding.AwayFromZero);
                                    if (ammontare > ammontare_da_graduatoria)
                                    {
                                        ammontare = ammontare_da_graduatoria;
                                        messaggio_esito = "L`ammontare dell`anticipo richiesto supera quello finanziabile da graduatoria, si è proceduto ad un allineamento automatico dei valori richiesti. Salvataggio completato.";
                                    }
                                }
                            }

                            SiarLibrary.AnticipiRichiesti anticipo;
                            if (ant.AmmontareRichiesto == null)
                            {
                                anticipo = new SiarLibrary.AnticipiRichiesti();
                                anticipo.IdDomandaPagamento = DomandaPagamento.IdDomandaPagamento;
                                anticipo.IdBando = ant.IdBando;
                            }
                            else anticipo = anticipo_provider.Find(null, DomandaPagamento.IdDomandaPagamento, ant.IdBando)[0];
                            anticipo.DataRichiesta = DateTime.Now;
                            anticipo.ContributoRichiesto = ammontare;
                            anticipo_provider.Save(anticipo);
                            ant.AmmontareRichiesto = ammontare;
                        }
                    }
                }
                PagamentoProvider.AggiornaDomandaDiPagamento(DomandaPagamento, Operatore);
                PagamentoProvider.DbProviderObj.Commit();
                ShowMessage((messaggio_esito == null ? "Importi richiesti salvati correttamente." : messaggio_esito));
            }
            catch (Exception ex) { PagamentoProvider.DbProviderObj.Rollback(); ShowError(ex); }
        }
    }
}